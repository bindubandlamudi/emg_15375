

Microchip Technology PIC PRO Macro Assembler V1.44 build -154322312 
                                                                                               Mon Aug 13 15:44:07 2018

Microchip Technology Omniscient Code Generator v1.44 (PRO mode) build 201709140600
     1                           	processor	16F15375
     2                           	opt	pw 120
     3                           	opt	pm
     4                           	psect	idataBANK0,global,class=CODE,delta=2
     5                           	psect	stringtext1,global,class=STRCODE,delta=2
     6                           	psect	nvBANK1,global,class=BANK1,space=1,delta=1
     7                           	psect	stringtext2,global,class=STRCODE,delta=2
     8                           	psect	stringtext3,global,class=STRCODE,delta=2
     9                           	psect	stringtext4,global,class=STRCODE,delta=2
    10                           	psect	stringtext5,global,class=STRCODE,delta=2
    11                           	psect	stringtext6,global,class=STRCODE,delta=2
    12                           	psect	cinit,global,class=CODE,merge=1,delta=2
    13                           	psect	bssCOMMON,global,class=COMMON,space=1,delta=1
    14                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1
    15                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1
    16                           	psect	bssBANK2,global,class=BANK2,space=1,delta=1
    17                           	psect	clrtext,global,class=CODE,delta=2
    18                           	psect	cstackBANK2,global,class=BANK2,space=1,delta=1
    19                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1
    20                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    21                           	psect	text2,local,class=CODE,merge=1,delta=2
    22                           	psect	text4,local,class=CODE,merge=1,delta=2
    23                           	psect	text6,local,class=CODE,merge=1,delta=2
    24                           	psect	text7,local,class=CODE,merge=1,delta=2
    25                           	psect	text10,local,class=CODE,merge=1,delta=2,group=1
    26                           	psect	text22,local,class=CODE,merge=1,delta=2,group=1
    27                           	psect	text26,local,class=CODE,merge=1,delta=2,group=1
    28                           	psect	text34,local,class=CODE,merge=1,delta=2
    29                           	psect	intentry,global,class=CODE,delta=2
    30                           	psect	text43,local,class=CODE,merge=1,delta=2
    31                           	psect	text44,local,class=CODE,merge=1,delta=2
    32                           	psect	text45,local,class=CODE,merge=1,delta=2
    33                           	psect	text53,local,class=CODE,merge=1,delta=2
    34                           	psect	text54,local,class=CODE,merge=1,delta=2
    35                           	psect	text55,local,class=CODE,merge=1,delta=2
    36                           	psect	text56,local,class=CODE,merge=1,delta=2
    37                           	psect	pa_nodes0,global,class=CODE,delta=2
    38                           	dabs	1,0x620,48
    39                           	dabs	1,0x5BC,52
    40                           	dabs	1,0x238C,0,_sb_data
    41                           	dabs	1,0x7E,2
    42  0000                     
    43                           ; Version 1.44
    44                           ; Generated 14/09/2017 GMT
    45                           ; 
    46                           ; Copyright Â© 2017, Microchip Technology Inc. and its subsidiaries ("Microchip")
    47                           ; All rights reserved.
    48                           ; 
    49                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    50                           ; 
    51                           ; Redistribution and use in source and binary forms, with or without modification, are
    52                           ; permitted provided that the following conditions are met:
    53                           ; 
    54                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    55                           ;        conditions and the following disclaimer.
    56                           ; 
    57                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    58                           ;        of conditions and the following disclaimer in the documentation and/or other
    59                           ;        materials provided with the distribution.
    60                           ; 
    61                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    62                           ;        software without specific prior written permission.
    63                           ; 
    64                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    65                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    66                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    67                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    68                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    69                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    70                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    71                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    72                           ; 
    73                           ; 
    74                           ; Code-generator required, PIC16F15375 Definitions
    75                           ; 
    76                           ; SFR Addresses
    77  0000                     	;# 
    78  0001                     	;# 
    79  0002                     	;# 
    80  0003                     	;# 
    81  0004                     	;# 
    82  0005                     	;# 
    83  0006                     	;# 
    84  0007                     	;# 
    85  0008                     	;# 
    86  0009                     	;# 
    87  000A                     	;# 
    88  000B                     	;# 
    89  000C                     	;# 
    90  000D                     	;# 
    91  000E                     	;# 
    92  000F                     	;# 
    93  0010                     	;# 
    94  0012                     	;# 
    95  0013                     	;# 
    96  0014                     	;# 
    97  0015                     	;# 
    98  0016                     	;# 
    99  0018                     	;# 
   100  0019                     	;# 
   101  001A                     	;# 
   102  001B                     	;# 
   103  001C                     	;# 
   104  009B                     	;# 
   105  009B                     	;# 
   106  009C                     	;# 
   107  009D                     	;# 
   108  009E                     	;# 
   109  009F                     	;# 
   110  0119                     	;# 
   111  0119                     	;# 
   112  0119                     	;# 
   113  011A                     	;# 
   114  011A                     	;# 
   115  011A                     	;# 
   116  011B                     	;# 
   117  011B                     	;# 
   118  011B                     	;# 
   119  011B                     	;# 
   120  011B                     	;# 
   121  011C                     	;# 
   122  011C                     	;# 
   123  011C                     	;# 
   124  011D                     	;# 
   125  011D                     	;# 
   126  011D                     	;# 
   127  011E                     	;# 
   128  011E                     	;# 
   129  011E                     	;# 
   130  011F                     	;# 
   131  011F                     	;# 
   132  011F                     	;# 
   133  011F                     	;# 
   134  011F                     	;# 
   135  018C                     	;# 
   136  018D                     	;# 
   137  018E                     	;# 
   138  018F                     	;# 
   139  0190                     	;# 
   140  0191                     	;# 
   141  0192                     	;# 
   142  0196                     	;# 
   143  0197                     	;# 
   144  0198                     	;# 
   145  0199                     	;# 
   146  019A                     	;# 
   147  019B                     	;# 
   148  019C                     	;# 
   149  020C                     	;# 
   150  020C                     	;# 
   151  020D                     	;# 
   152  020E                     	;# 
   153  020F                     	;# 
   154  020F                     	;# 
   155  0210                     	;# 
   156  0210                     	;# 
   157  0211                     	;# 
   158  0211                     	;# 
   159  028C                     	;# 
   160  028C                     	;# 
   161  028D                     	;# 
   162  028D                     	;# 
   163  028E                     	;# 
   164  028F                     	;# 
   165  0290                     	;# 
   166  0291                     	;# 
   167  030C                     	;# 
   168  030C                     	;# 
   169  030D                     	;# 
   170  030E                     	;# 
   171  030F                     	;# 
   172  0310                     	;# 
   173  0310                     	;# 
   174  0311                     	;# 
   175  0312                     	;# 
   176  0313                     	;# 
   177  0314                     	;# 
   178  0315                     	;# 
   179  0316                     	;# 
   180  0318                     	;# 
   181  0319                     	;# 
   182  031A                     	;# 
   183  031C                     	;# 
   184  031D                     	;# 
   185  031E                     	;# 
   186  038C                     	;# 
   187  038D                     	;# 
   188  038E                     	;# 
   189  058C                     	;# 
   190  058C                     	;# 
   191  058D                     	;# 
   192  058E                     	;# 
   193  058F                     	;# 
   194  058F                     	;# 
   195  0590                     	;# 
   196  0591                     	;# 
   197  0592                     	;# 
   198  0593                     	;# 
   199  059C                     	;# 
   200  059C                     	;# 
   201  059D                     	;# 
   202  059D                     	;# 
   203  059E                     	;# 
   204  059F                     	;# 
   205  060C                     	;# 
   206  060D                     	;# 
   207  060E                     	;# 
   208  060F                     	;# 
   209  0610                     	;# 
   210  0611                     	;# 
   211  0612                     	;# 
   212  0613                     	;# 
   213  0614                     	;# 
   214  070C                     	;# 
   215  070D                     	;# 
   216  070E                     	;# 
   217  070F                     	;# 
   218  0710                     	;# 
   219  0711                     	;# 
   220  0712                     	;# 
   221  0713                     	;# 
   222  0716                     	;# 
   223  0717                     	;# 
   224  0718                     	;# 
   225  0719                     	;# 
   226  071A                     	;# 
   227  071B                     	;# 
   228  071C                     	;# 
   229  071D                     	;# 
   230  0796                     	;# 
   231  0797                     	;# 
   232  0798                     	;# 
   233  0799                     	;# 
   234  079A                     	;# 
   235  079B                     	;# 
   236  080C                     	;# 
   237  080D                     	;# 
   238  080E                     	;# 
   239  080F                     	;# 
   240  0810                     	;# 
   241  0811                     	;# 
   242  0812                     	;# 
   243  0813                     	;# 
   244  0814                     	;# 
   245  081A                     	;# 
   246  081A                     	;# 
   247  081B                     	;# 
   248  081C                     	;# 
   249  081C                     	;# 
   250  081D                     	;# 
   251  081E                     	;# 
   252  081F                     	;# 
   253  088C                     	;# 
   254  088D                     	;# 
   255  088E                     	;# 
   256  088F                     	;# 
   257  0890                     	;# 
   258  0891                     	;# 
   259  0892                     	;# 
   260  0893                     	;# 
   261  0895                     	;# 
   262  0896                     	;# 
   263  090C                     	;# 
   264  090E                     	;# 
   265  090F                     	;# 
   266  091F                     	;# 
   267  098F                     	;# 
   268  098F                     	;# 
   269  0990                     	;# 
   270  0991                     	;# 
   271  0992                     	;# 
   272  0993                     	;# 
   273  0994                     	;# 
   274  0995                     	;# 
   275  0996                     	;# 
   276  0997                     	;# 
   277  0A19                     	;# 
   278  0A19                     	;# 
   279  0A1A                     	;# 
   280  0A1A                     	;# 
   281  0A1B                     	;# 
   282  0A1B                     	;# 
   283  0A1B                     	;# 
   284  0A1C                     	;# 
   285  0A1C                     	;# 
   286  0A1D                     	;# 
   287  0A1D                     	;# 
   288  0A1E                     	;# 
   289  0A1E                     	;# 
   290  0A1F                     	;# 
   291  0A1F                     	;# 
   292  0A1F                     	;# 
   293  1E0F                     	;# 
   294  1E10                     	;# 
   295  1E11                     	;# 
   296  1E12                     	;# 
   297  1E13                     	;# 
   298  1E14                     	;# 
   299  1E15                     	;# 
   300  1E16                     	;# 
   301  1E17                     	;# 
   302  1E18                     	;# 
   303  1E19                     	;# 
   304  1E1A                     	;# 
   305  1E1B                     	;# 
   306  1E1C                     	;# 
   307  1E1D                     	;# 
   308  1E1E                     	;# 
   309  1E1F                     	;# 
   310  1E20                     	;# 
   311  1E21                     	;# 
   312  1E22                     	;# 
   313  1E23                     	;# 
   314  1E24                     	;# 
   315  1E25                     	;# 
   316  1E26                     	;# 
   317  1E27                     	;# 
   318  1E28                     	;# 
   319  1E29                     	;# 
   320  1E2A                     	;# 
   321  1E2B                     	;# 
   322  1E2C                     	;# 
   323  1E2D                     	;# 
   324  1E2E                     	;# 
   325  1E2F                     	;# 
   326  1E30                     	;# 
   327  1E31                     	;# 
   328  1E32                     	;# 
   329  1E33                     	;# 
   330  1E34                     	;# 
   331  1E35                     	;# 
   332  1E36                     	;# 
   333  1E37                     	;# 
   334  1E8F                     	;# 
   335  1E90                     	;# 
   336  1E91                     	;# 
   337  1E92                     	;# 
   338  1E93                     	;# 
   339  1E9C                     	;# 
   340  1EA1                     	;# 
   341  1EA2                     	;# 
   342  1EB1                     	;# 
   343  1EBB                     	;# 
   344  1EBC                     	;# 
   345  1EBD                     	;# 
   346  1EBE                     	;# 
   347  1EC3                     	;# 
   348  1EC5                     	;# 
   349  1EC6                     	;# 
   350  1EC7                     	;# 
   351  1EC8                     	;# 
   352  1EC9                     	;# 
   353  1ECA                     	;# 
   354  1ECB                     	;# 
   355  1ECC                     	;# 
   356  1ECD                     	;# 
   357  1ECE                     	;# 
   358  1F10                     	;# 
   359  1F11                     	;# 
   360  1F12                     	;# 
   361  1F13                     	;# 
   362  1F14                     	;# 
   363  1F15                     	;# 
   364  1F16                     	;# 
   365  1F17                     	;# 
   366  1F18                     	;# 
   367  1F19                     	;# 
   368  1F1A                     	;# 
   369  1F1B                     	;# 
   370  1F1C                     	;# 
   371  1F1D                     	;# 
   372  1F1E                     	;# 
   373  1F1F                     	;# 
   374  1F20                     	;# 
   375  1F21                     	;# 
   376  1F22                     	;# 
   377  1F23                     	;# 
   378  1F24                     	;# 
   379  1F25                     	;# 
   380  1F26                     	;# 
   381  1F27                     	;# 
   382  1F28                     	;# 
   383  1F29                     	;# 
   384  1F2A                     	;# 
   385  1F2B                     	;# 
   386  1F2C                     	;# 
   387  1F2D                     	;# 
   388  1F2E                     	;# 
   389  1F2F                     	;# 
   390  1F30                     	;# 
   391  1F31                     	;# 
   392  1F32                     	;# 
   393  1F38                     	;# 
   394  1F39                     	;# 
   395  1F3A                     	;# 
   396  1F3B                     	;# 
   397  1F3C                     	;# 
   398  1F3D                     	;# 
   399  1F3E                     	;# 
   400  1F3F                     	;# 
   401  1F43                     	;# 
   402  1F44                     	;# 
   403  1F45                     	;# 
   404  1F46                     	;# 
   405  1F47                     	;# 
   406  1F48                     	;# 
   407  1F49                     	;# 
   408  1F4A                     	;# 
   409  1F4E                     	;# 
   410  1F4F                     	;# 
   411  1F50                     	;# 
   412  1F51                     	;# 
   413  1F52                     	;# 
   414  1F53                     	;# 
   415  1F54                     	;# 
   416  1F55                     	;# 
   417  1F59                     	;# 
   418  1F5A                     	;# 
   419  1F5B                     	;# 
   420  1F5C                     	;# 
   421  1F5D                     	;# 
   422  1F64                     	;# 
   423  1F65                     	;# 
   424  1F66                     	;# 
   425  1F67                     	;# 
   426  1F68                     	;# 
   427  1F69                     	;# 
   428  1F6A                     	;# 
   429  1F6B                     	;# 
   430  1FE4                     	;# 
   431  1FE5                     	;# 
   432  1FE6                     	;# 
   433  1FE7                     	;# 
   434  1FE8                     	;# 
   435  1FE8                     	;# 
   436  1FE9                     	;# 
   437  1FEA                     	;# 
   438  1FEB                     	;# 
   439  1FED                     	;# 
   440  1FEE                     	;# 
   441  1FEF                     	;# 
   442  0000                     	;# 
   443  0001                     	;# 
   444  0002                     	;# 
   445  0003                     	;# 
   446  0004                     	;# 
   447  0005                     	;# 
   448  0006                     	;# 
   449  0007                     	;# 
   450  0008                     	;# 
   451  0009                     	;# 
   452  000A                     	;# 
   453  000B                     	;# 
   454  000C                     	;# 
   455  000D                     	;# 
   456  000E                     	;# 
   457  000F                     	;# 
   458  0010                     	;# 
   459  0012                     	;# 
   460  0013                     	;# 
   461  0014                     	;# 
   462  0015                     	;# 
   463  0016                     	;# 
   464  0018                     	;# 
   465  0019                     	;# 
   466  001A                     	;# 
   467  001B                     	;# 
   468  001C                     	;# 
   469  009B                     	;# 
   470  009B                     	;# 
   471  009C                     	;# 
   472  009D                     	;# 
   473  009E                     	;# 
   474  009F                     	;# 
   475  0119                     	;# 
   476  0119                     	;# 
   477  0119                     	;# 
   478  011A                     	;# 
   479  011A                     	;# 
   480  011A                     	;# 
   481  011B                     	;# 
   482  011B                     	;# 
   483  011B                     	;# 
   484  011B                     	;# 
   485  011B                     	;# 
   486  011C                     	;# 
   487  011C                     	;# 
   488  011C                     	;# 
   489  011D                     	;# 
   490  011D                     	;# 
   491  011D                     	;# 
   492  011E                     	;# 
   493  011E                     	;# 
   494  011E                     	;# 
   495  011F                     	;# 
   496  011F                     	;# 
   497  011F                     	;# 
   498  011F                     	;# 
   499  011F                     	;# 
   500  018C                     	;# 
   501  018D                     	;# 
   502  018E                     	;# 
   503  018F                     	;# 
   504  0190                     	;# 
   505  0191                     	;# 
   506  0192                     	;# 
   507  0196                     	;# 
   508  0197                     	;# 
   509  0198                     	;# 
   510  0199                     	;# 
   511  019A                     	;# 
   512  019B                     	;# 
   513  019C                     	;# 
   514  020C                     	;# 
   515  020C                     	;# 
   516  020D                     	;# 
   517  020E                     	;# 
   518  020F                     	;# 
   519  020F                     	;# 
   520  0210                     	;# 
   521  0210                     	;# 
   522  0211                     	;# 
   523  0211                     	;# 
   524  028C                     	;# 
   525  028C                     	;# 
   526  028D                     	;# 
   527  028D                     	;# 
   528  028E                     	;# 
   529  028F                     	;# 
   530  0290                     	;# 
   531  0291                     	;# 
   532  030C                     	;# 
   533  030C                     	;# 
   534  030D                     	;# 
   535  030E                     	;# 
   536  030F                     	;# 
   537  0310                     	;# 
   538  0310                     	;# 
   539  0311                     	;# 
   540  0312                     	;# 
   541  0313                     	;# 
   542  0314                     	;# 
   543  0315                     	;# 
   544  0316                     	;# 
   545  0318                     	;# 
   546  0319                     	;# 
   547  031A                     	;# 
   548  031C                     	;# 
   549  031D                     	;# 
   550  031E                     	;# 
   551  038C                     	;# 
   552  038D                     	;# 
   553  038E                     	;# 
   554  058C                     	;# 
   555  058C                     	;# 
   556  058D                     	;# 
   557  058E                     	;# 
   558  058F                     	;# 
   559  058F                     	;# 
   560  0590                     	;# 
   561  0591                     	;# 
   562  0592                     	;# 
   563  0593                     	;# 
   564  059C                     	;# 
   565  059C                     	;# 
   566  059D                     	;# 
   567  059D                     	;# 
   568  059E                     	;# 
   569  059F                     	;# 
   570  060C                     	;# 
   571  060D                     	;# 
   572  060E                     	;# 
   573  060F                     	;# 
   574  0610                     	;# 
   575  0611                     	;# 
   576  0612                     	;# 
   577  0613                     	;# 
   578  0614                     	;# 
   579  070C                     	;# 
   580  070D                     	;# 
   581  070E                     	;# 
   582  070F                     	;# 
   583  0710                     	;# 
   584  0711                     	;# 
   585  0712                     	;# 
   586  0713                     	;# 
   587  0716                     	;# 
   588  0717                     	;# 
   589  0718                     	;# 
   590  0719                     	;# 
   591  071A                     	;# 
   592  071B                     	;# 
   593  071C                     	;# 
   594  071D                     	;# 
   595  0796                     	;# 
   596  0797                     	;# 
   597  0798                     	;# 
   598  0799                     	;# 
   599  079A                     	;# 
   600  079B                     	;# 
   601  080C                     	;# 
   602  080D                     	;# 
   603  080E                     	;# 
   604  080F                     	;# 
   605  0810                     	;# 
   606  0811                     	;# 
   607  0812                     	;# 
   608  0813                     	;# 
   609  0814                     	;# 
   610  081A                     	;# 
   611  081A                     	;# 
   612  081B                     	;# 
   613  081C                     	;# 
   614  081C                     	;# 
   615  081D                     	;# 
   616  081E                     	;# 
   617  081F                     	;# 
   618  088C                     	;# 
   619  088D                     	;# 
   620  088E                     	;# 
   621  088F                     	;# 
   622  0890                     	;# 
   623  0891                     	;# 
   624  0892                     	;# 
   625  0893                     	;# 
   626  0895                     	;# 
   627  0896                     	;# 
   628  090C                     	;# 
   629  090E                     	;# 
   630  090F                     	;# 
   631  091F                     	;# 
   632  098F                     	;# 
   633  098F                     	;# 
   634  0990                     	;# 
   635  0991                     	;# 
   636  0992                     	;# 
   637  0993                     	;# 
   638  0994                     	;# 
   639  0995                     	;# 
   640  0996                     	;# 
   641  0997                     	;# 
   642  0A19                     	;# 
   643  0A19                     	;# 
   644  0A1A                     	;# 
   645  0A1A                     	;# 
   646  0A1B                     	;# 
   647  0A1B                     	;# 
   648  0A1B                     	;# 
   649  0A1C                     	;# 
   650  0A1C                     	;# 
   651  0A1D                     	;# 
   652  0A1D                     	;# 
   653  0A1E                     	;# 
   654  0A1E                     	;# 
   655  0A1F                     	;# 
   656  0A1F                     	;# 
   657  0A1F                     	;# 
   658  1E0F                     	;# 
   659  1E10                     	;# 
   660  1E11                     	;# 
   661  1E12                     	;# 
   662  1E13                     	;# 
   663  1E14                     	;# 
   664  1E15                     	;# 
   665  1E16                     	;# 
   666  1E17                     	;# 
   667  1E18                     	;# 
   668  1E19                     	;# 
   669  1E1A                     	;# 
   670  1E1B                     	;# 
   671  1E1C                     	;# 
   672  1E1D                     	;# 
   673  1E1E                     	;# 
   674  1E1F                     	;# 
   675  1E20                     	;# 
   676  1E21                     	;# 
   677  1E22                     	;# 
   678  1E23                     	;# 
   679  1E24                     	;# 
   680  1E25                     	;# 
   681  1E26                     	;# 
   682  1E27                     	;# 
   683  1E28                     	;# 
   684  1E29                     	;# 
   685  1E2A                     	;# 
   686  1E2B                     	;# 
   687  1E2C                     	;# 
   688  1E2D                     	;# 
   689  1E2E                     	;# 
   690  1E2F                     	;# 
   691  1E30                     	;# 
   692  1E31                     	;# 
   693  1E32                     	;# 
   694  1E33                     	;# 
   695  1E34                     	;# 
   696  1E35                     	;# 
   697  1E36                     	;# 
   698  1E37                     	;# 
   699  1E8F                     	;# 
   700  1E90                     	;# 
   701  1E91                     	;# 
   702  1E92                     	;# 
   703  1E93                     	;# 
   704  1E9C                     	;# 
   705  1EA1                     	;# 
   706  1EA2                     	;# 
   707  1EB1                     	;# 
   708  1EBB                     	;# 
   709  1EBC                     	;# 
   710  1EBD                     	;# 
   711  1EBE                     	;# 
   712  1EC3                     	;# 
   713  1EC5                     	;# 
   714  1EC6                     	;# 
   715  1EC7                     	;# 
   716  1EC8                     	;# 
   717  1EC9                     	;# 
   718  1ECA                     	;# 
   719  1ECB                     	;# 
   720  1ECC                     	;# 
   721  1ECD                     	;# 
   722  1ECE                     	;# 
   723  1F10                     	;# 
   724  1F11                     	;# 
   725  1F12                     	;# 
   726  1F13                     	;# 
   727  1F14                     	;# 
   728  1F15                     	;# 
   729  1F16                     	;# 
   730  1F17                     	;# 
   731  1F18                     	;# 
   732  1F19                     	;# 
   733  1F1A                     	;# 
   734  1F1B                     	;# 
   735  1F1C                     	;# 
   736  1F1D                     	;# 
   737  1F1E                     	;# 
   738  1F1F                     	;# 
   739  1F20                     	;# 
   740  1F21                     	;# 
   741  1F22                     	;# 
   742  1F23                     	;# 
   743  1F24                     	;# 
   744  1F25                     	;# 
   745  1F26                     	;# 
   746  1F27                     	;# 
   747  1F28                     	;# 
   748  1F29                     	;# 
   749  1F2A                     	;# 
   750  1F2B                     	;# 
   751  1F2C                     	;# 
   752  1F2D                     	;# 
   753  1F2E                     	;# 
   754  1F2F                     	;# 
   755  1F30                     	;# 
   756  1F31                     	;# 
   757  1F32                     	;# 
   758  1F38                     	;# 
   759  1F39                     	;# 
   760  1F3A                     	;# 
   761  1F3B                     	;# 
   762  1F3C                     	;# 
   763  1F3D                     	;# 
   764  1F3E                     	;# 
   765  1F3F                     	;# 
   766  1F43                     	;# 
   767  1F44                     	;# 
   768  1F45                     	;# 
   769  1F46                     	;# 
   770  1F47                     	;# 
   771  1F48                     	;# 
   772  1F49                     	;# 
   773  1F4A                     	;# 
   774  1F4E                     	;# 
   775  1F4F                     	;# 
   776  1F50                     	;# 
   777  1F51                     	;# 
   778  1F52                     	;# 
   779  1F53                     	;# 
   780  1F54                     	;# 
   781  1F55                     	;# 
   782  1F59                     	;# 
   783  1F5A                     	;# 
   784  1F5B                     	;# 
   785  1F5C                     	;# 
   786  1F5D                     	;# 
   787  1F64                     	;# 
   788  1F65                     	;# 
   789  1F66                     	;# 
   790  1F67                     	;# 
   791  1F68                     	;# 
   792  1F69                     	;# 
   793  1F6A                     	;# 
   794  1F6B                     	;# 
   795  1FE4                     	;# 
   796  1FE5                     	;# 
   797  1FE6                     	;# 
   798  1FE7                     	;# 
   799  1FE8                     	;# 
   800  1FE8                     	;# 
   801  1FE9                     	;# 
   802  1FEA                     	;# 
   803  1FEB                     	;# 
   804  1FED                     	;# 
   805  1FEE                     	;# 
   806  1FEF                     	;# 
   807  0000                     	;# 
   808  0001                     	;# 
   809  0002                     	;# 
   810  0003                     	;# 
   811  0004                     	;# 
   812  0005                     	;# 
   813  0006                     	;# 
   814  0007                     	;# 
   815  0008                     	;# 
   816  0009                     	;# 
   817  000A                     	;# 
   818  000B                     	;# 
   819  000C                     	;# 
   820  000D                     	;# 
   821  000E                     	;# 
   822  000F                     	;# 
   823  0010                     	;# 
   824  0012                     	;# 
   825  0013                     	;# 
   826  0014                     	;# 
   827  0015                     	;# 
   828  0016                     	;# 
   829  0018                     	;# 
   830  0019                     	;# 
   831  001A                     	;# 
   832  001B                     	;# 
   833  001C                     	;# 
   834  009B                     	;# 
   835  009B                     	;# 
   836  009C                     	;# 
   837  009D                     	;# 
   838  009E                     	;# 
   839  009F                     	;# 
   840  0119                     	;# 
   841  0119                     	;# 
   842  0119                     	;# 
   843  011A                     	;# 
   844  011A                     	;# 
   845  011A                     	;# 
   846  011B                     	;# 
   847  011B                     	;# 
   848  011B                     	;# 
   849  011B                     	;# 
   850  011B                     	;# 
   851  011C                     	;# 
   852  011C                     	;# 
   853  011C                     	;# 
   854  011D                     	;# 
   855  011D                     	;# 
   856  011D                     	;# 
   857  011E                     	;# 
   858  011E                     	;# 
   859  011E                     	;# 
   860  011F                     	;# 
   861  011F                     	;# 
   862  011F                     	;# 
   863  011F                     	;# 
   864  011F                     	;# 
   865  018C                     	;# 
   866  018D                     	;# 
   867  018E                     	;# 
   868  018F                     	;# 
   869  0190                     	;# 
   870  0191                     	;# 
   871  0192                     	;# 
   872  0196                     	;# 
   873  0197                     	;# 
   874  0198                     	;# 
   875  0199                     	;# 
   876  019A                     	;# 
   877  019B                     	;# 
   878  019C                     	;# 
   879  020C                     	;# 
   880  020C                     	;# 
   881  020D                     	;# 
   882  020E                     	;# 
   883  020F                     	;# 
   884  020F                     	;# 
   885  0210                     	;# 
   886  0210                     	;# 
   887  0211                     	;# 
   888  0211                     	;# 
   889  028C                     	;# 
   890  028C                     	;# 
   891  028D                     	;# 
   892  028D                     	;# 
   893  028E                     	;# 
   894  028F                     	;# 
   895  0290                     	;# 
   896  0291                     	;# 
   897  030C                     	;# 
   898  030C                     	;# 
   899  030D                     	;# 
   900  030E                     	;# 
   901  030F                     	;# 
   902  0310                     	;# 
   903  0310                     	;# 
   904  0311                     	;# 
   905  0312                     	;# 
   906  0313                     	;# 
   907  0314                     	;# 
   908  0315                     	;# 
   909  0316                     	;# 
   910  0318                     	;# 
   911  0319                     	;# 
   912  031A                     	;# 
   913  031C                     	;# 
   914  031D                     	;# 
   915  031E                     	;# 
   916  038C                     	;# 
   917  038D                     	;# 
   918  038E                     	;# 
   919  058C                     	;# 
   920  058C                     	;# 
   921  058D                     	;# 
   922  058E                     	;# 
   923  058F                     	;# 
   924  058F                     	;# 
   925  0590                     	;# 
   926  0591                     	;# 
   927  0592                     	;# 
   928  0593                     	;# 
   929  059C                     	;# 
   930  059C                     	;# 
   931  059D                     	;# 
   932  059D                     	;# 
   933  059E                     	;# 
   934  059F                     	;# 
   935  060C                     	;# 
   936  060D                     	;# 
   937  060E                     	;# 
   938  060F                     	;# 
   939  0610                     	;# 
   940  0611                     	;# 
   941  0612                     	;# 
   942  0613                     	;# 
   943  0614                     	;# 
   944  070C                     	;# 
   945  070D                     	;# 
   946  070E                     	;# 
   947  070F                     	;# 
   948  0710                     	;# 
   949  0711                     	;# 
   950  0712                     	;# 
   951  0713                     	;# 
   952  0716                     	;# 
   953  0717                     	;# 
   954  0718                     	;# 
   955  0719                     	;# 
   956  071A                     	;# 
   957  071B                     	;# 
   958  071C                     	;# 
   959  071D                     	;# 
   960  0796                     	;# 
   961  0797                     	;# 
   962  0798                     	;# 
   963  0799                     	;# 
   964  079A                     	;# 
   965  079B                     	;# 
   966  080C                     	;# 
   967  080D                     	;# 
   968  080E                     	;# 
   969  080F                     	;# 
   970  0810                     	;# 
   971  0811                     	;# 
   972  0812                     	;# 
   973  0813                     	;# 
   974  0814                     	;# 
   975  081A                     	;# 
   976  081A                     	;# 
   977  081B                     	;# 
   978  081C                     	;# 
   979  081C                     	;# 
   980  081D                     	;# 
   981  081E                     	;# 
   982  081F                     	;# 
   983  088C                     	;# 
   984  088D                     	;# 
   985  088E                     	;# 
   986  088F                     	;# 
   987  0890                     	;# 
   988  0891                     	;# 
   989  0892                     	;# 
   990  0893                     	;# 
   991  0895                     	;# 
   992  0896                     	;# 
   993  090C                     	;# 
   994  090E                     	;# 
   995  090F                     	;# 
   996  091F                     	;# 
   997  098F                     	;# 
   998  098F                     	;# 
   999  0990                     	;# 
  1000  0991                     	;# 
  1001  0992                     	;# 
  1002  0993                     	;# 
  1003  0994                     	;# 
  1004  0995                     	;# 
  1005  0996                     	;# 
  1006  0997                     	;# 
  1007  0A19                     	;# 
  1008  0A19                     	;# 
  1009  0A1A                     	;# 
  1010  0A1A                     	;# 
  1011  0A1B                     	;# 
  1012  0A1B                     	;# 
  1013  0A1B                     	;# 
  1014  0A1C                     	;# 
  1015  0A1C                     	;# 
  1016  0A1D                     	;# 
  1017  0A1D                     	;# 
  1018  0A1E                     	;# 
  1019  0A1E                     	;# 
  1020  0A1F                     	;# 
  1021  0A1F                     	;# 
  1022  0A1F                     	;# 
  1023  1E0F                     	;# 
  1024  1E10                     	;# 
  1025  1E11                     	;# 
  1026  1E12                     	;# 
  1027  1E13                     	;# 
  1028  1E14                     	;# 
  1029  1E15                     	;# 
  1030  1E16                     	;# 
  1031  1E17                     	;# 
  1032  1E18                     	;# 
  1033  1E19                     	;# 
  1034  1E1A                     	;# 
  1035  1E1B                     	;# 
  1036  1E1C                     	;# 
  1037  1E1D                     	;# 
  1038  1E1E                     	;# 
  1039  1E1F                     	;# 
  1040  1E20                     	;# 
  1041  1E21                     	;# 
  1042  1E22                     	;# 
  1043  1E23                     	;# 
  1044  1E24                     	;# 
  1045  1E25                     	;# 
  1046  1E26                     	;# 
  1047  1E27                     	;# 
  1048  1E28                     	;# 
  1049  1E29                     	;# 
  1050  1E2A                     	;# 
  1051  1E2B                     	;# 
  1052  1E2C                     	;# 
  1053  1E2D                     	;# 
  1054  1E2E                     	;# 
  1055  1E2F                     	;# 
  1056  1E30                     	;# 
  1057  1E31                     	;# 
  1058  1E32                     	;# 
  1059  1E33                     	;# 
  1060  1E34                     	;# 
  1061  1E35                     	;# 
  1062  1E36                     	;# 
  1063  1E37                     	;# 
  1064  1E8F                     	;# 
  1065  1E90                     	;# 
  1066  1E91                     	;# 
  1067  1E92                     	;# 
  1068  1E93                     	;# 
  1069  1E9C                     	;# 
  1070  1EA1                     	;# 
  1071  1EA2                     	;# 
  1072  1EB1                     	;# 
  1073  1EBB                     	;# 
  1074  1EBC                     	;# 
  1075  1EBD                     	;# 
  1076  1EBE                     	;# 
  1077  1EC3                     	;# 
  1078  1EC5                     	;# 
  1079  1EC6                     	;# 
  1080  1EC7                     	;# 
  1081  1EC8                     	;# 
  1082  1EC9                     	;# 
  1083  1ECA                     	;# 
  1084  1ECB                     	;# 
  1085  1ECC                     	;# 
  1086  1ECD                     	;# 
  1087  1ECE                     	;# 
  1088  1F10                     	;# 
  1089  1F11                     	;# 
  1090  1F12                     	;# 
  1091  1F13                     	;# 
  1092  1F14                     	;# 
  1093  1F15                     	;# 
  1094  1F16                     	;# 
  1095  1F17                     	;# 
  1096  1F18                     	;# 
  1097  1F19                     	;# 
  1098  1F1A                     	;# 
  1099  1F1B                     	;# 
  1100  1F1C                     	;# 
  1101  1F1D                     	;# 
  1102  1F1E                     	;# 
  1103  1F1F                     	;# 
  1104  1F20                     	;# 
  1105  1F21                     	;# 
  1106  1F22                     	;# 
  1107  1F23                     	;# 
  1108  1F24                     	;# 
  1109  1F25                     	;# 
  1110  1F26                     	;# 
  1111  1F27                     	;# 
  1112  1F28                     	;# 
  1113  1F29                     	;# 
  1114  1F2A                     	;# 
  1115  1F2B                     	;# 
  1116  1F2C                     	;# 
  1117  1F2D                     	;# 
  1118  1F2E                     	;# 
  1119  1F2F                     	;# 
  1120  1F30                     	;# 
  1121  1F31                     	;# 
  1122  1F32                     	;# 
  1123  1F38                     	;# 
  1124  1F39                     	;# 
  1125  1F3A                     	;# 
  1126  1F3B                     	;# 
  1127  1F3C                     	;# 
  1128  1F3D                     	;# 
  1129  1F3E                     	;# 
  1130  1F3F                     	;# 
  1131  1F43                     	;# 
  1132  1F44                     	;# 
  1133  1F45                     	;# 
  1134  1F46                     	;# 
  1135  1F47                     	;# 
  1136  1F48                     	;# 
  1137  1F49                     	;# 
  1138  1F4A                     	;# 
  1139  1F4E                     	;# 
  1140  1F4F                     	;# 
  1141  1F50                     	;# 
  1142  1F51                     	;# 
  1143  1F52                     	;# 
  1144  1F53                     	;# 
  1145  1F54                     	;# 
  1146  1F55                     	;# 
  1147  1F59                     	;# 
  1148  1F5A                     	;# 
  1149  1F5B                     	;# 
  1150  1F5C                     	;# 
  1151  1F5D                     	;# 
  1152  1F64                     	;# 
  1153  1F65                     	;# 
  1154  1F66                     	;# 
  1155  1F67                     	;# 
  1156  1F68                     	;# 
  1157  1F69                     	;# 
  1158  1F6A                     	;# 
  1159  1F6B                     	;# 
  1160  1FE4                     	;# 
  1161  1FE5                     	;# 
  1162  1FE6                     	;# 
  1163  1FE7                     	;# 
  1164  1FE8                     	;# 
  1165  1FE8                     	;# 
  1166  1FE9                     	;# 
  1167  1FEA                     	;# 
  1168  1FEB                     	;# 
  1169  1FED                     	;# 
  1170  1FEE                     	;# 
  1171  1FEF                     	;# 
  1172  0000                     	;# 
  1173  0001                     	;# 
  1174  0002                     	;# 
  1175  0003                     	;# 
  1176  0004                     	;# 
  1177  0005                     	;# 
  1178  0006                     	;# 
  1179  0007                     	;# 
  1180  0008                     	;# 
  1181  0009                     	;# 
  1182  000A                     	;# 
  1183  000B                     	;# 
  1184  000C                     	;# 
  1185  000D                     	;# 
  1186  000E                     	;# 
  1187  000F                     	;# 
  1188  0010                     	;# 
  1189  0012                     	;# 
  1190  0013                     	;# 
  1191  0014                     	;# 
  1192  0015                     	;# 
  1193  0016                     	;# 
  1194  0018                     	;# 
  1195  0019                     	;# 
  1196  001A                     	;# 
  1197  001B                     	;# 
  1198  001C                     	;# 
  1199  009B                     	;# 
  1200  009B                     	;# 
  1201  009C                     	;# 
  1202  009D                     	;# 
  1203  009E                     	;# 
  1204  009F                     	;# 
  1205  0119                     	;# 
  1206  0119                     	;# 
  1207  0119                     	;# 
  1208  011A                     	;# 
  1209  011A                     	;# 
  1210  011A                     	;# 
  1211  011B                     	;# 
  1212  011B                     	;# 
  1213  011B                     	;# 
  1214  011B                     	;# 
  1215  011B                     	;# 
  1216  011C                     	;# 
  1217  011C                     	;# 
  1218  011C                     	;# 
  1219  011D                     	;# 
  1220  011D                     	;# 
  1221  011D                     	;# 
  1222  011E                     	;# 
  1223  011E                     	;# 
  1224  011E                     	;# 
  1225  011F                     	;# 
  1226  011F                     	;# 
  1227  011F                     	;# 
  1228  011F                     	;# 
  1229  011F                     	;# 
  1230  018C                     	;# 
  1231  018D                     	;# 
  1232  018E                     	;# 
  1233  018F                     	;# 
  1234  0190                     	;# 
  1235  0191                     	;# 
  1236  0192                     	;# 
  1237  0196                     	;# 
  1238  0197                     	;# 
  1239  0198                     	;# 
  1240  0199                     	;# 
  1241  019A                     	;# 
  1242  019B                     	;# 
  1243  019C                     	;# 
  1244  020C                     	;# 
  1245  020C                     	;# 
  1246  020D                     	;# 
  1247  020E                     	;# 
  1248  020F                     	;# 
  1249  020F                     	;# 
  1250  0210                     	;# 
  1251  0210                     	;# 
  1252  0211                     	;# 
  1253  0211                     	;# 
  1254  028C                     	;# 
  1255  028C                     	;# 
  1256  028D                     	;# 
  1257  028D                     	;# 
  1258  028E                     	;# 
  1259  028F                     	;# 
  1260  0290                     	;# 
  1261  0291                     	;# 
  1262  030C                     	;# 
  1263  030C                     	;# 
  1264  030D                     	;# 
  1265  030E                     	;# 
  1266  030F                     	;# 
  1267  0310                     	;# 
  1268  0310                     	;# 
  1269  0311                     	;# 
  1270  0312                     	;# 
  1271  0313                     	;# 
  1272  0314                     	;# 
  1273  0315                     	;# 
  1274  0316                     	;# 
  1275  0318                     	;# 
  1276  0319                     	;# 
  1277  031A                     	;# 
  1278  031C                     	;# 
  1279  031D                     	;# 
  1280  031E                     	;# 
  1281  038C                     	;# 
  1282  038D                     	;# 
  1283  038E                     	;# 
  1284  058C                     	;# 
  1285  058C                     	;# 
  1286  058D                     	;# 
  1287  058E                     	;# 
  1288  058F                     	;# 
  1289  058F                     	;# 
  1290  0590                     	;# 
  1291  0591                     	;# 
  1292  0592                     	;# 
  1293  0593                     	;# 
  1294  059C                     	;# 
  1295  059C                     	;# 
  1296  059D                     	;# 
  1297  059D                     	;# 
  1298  059E                     	;# 
  1299  059F                     	;# 
  1300  060C                     	;# 
  1301  060D                     	;# 
  1302  060E                     	;# 
  1303  060F                     	;# 
  1304  0610                     	;# 
  1305  0611                     	;# 
  1306  0612                     	;# 
  1307  0613                     	;# 
  1308  0614                     	;# 
  1309  070C                     	;# 
  1310  070D                     	;# 
  1311  070E                     	;# 
  1312  070F                     	;# 
  1313  0710                     	;# 
  1314  0711                     	;# 
  1315  0712                     	;# 
  1316  0713                     	;# 
  1317  0716                     	;# 
  1318  0717                     	;# 
  1319  0718                     	;# 
  1320  0719                     	;# 
  1321  071A                     	;# 
  1322  071B                     	;# 
  1323  071C                     	;# 
  1324  071D                     	;# 
  1325  0796                     	;# 
  1326  0797                     	;# 
  1327  0798                     	;# 
  1328  0799                     	;# 
  1329  079A                     	;# 
  1330  079B                     	;# 
  1331  080C                     	;# 
  1332  080D                     	;# 
  1333  080E                     	;# 
  1334  080F                     	;# 
  1335  0810                     	;# 
  1336  0811                     	;# 
  1337  0812                     	;# 
  1338  0813                     	;# 
  1339  0814                     	;# 
  1340  081A                     	;# 
  1341  081A                     	;# 
  1342  081B                     	;# 
  1343  081C                     	;# 
  1344  081C                     	;# 
  1345  081D                     	;# 
  1346  081E                     	;# 
  1347  081F                     	;# 
  1348  088C                     	;# 
  1349  088D                     	;# 
  1350  088E                     	;# 
  1351  088F                     	;# 
  1352  0890                     	;# 
  1353  0891                     	;# 
  1354  0892                     	;# 
  1355  0893                     	;# 
  1356  0895                     	;# 
  1357  0896                     	;# 
  1358  090C                     	;# 
  1359  090E                     	;# 
  1360  090F                     	;# 
  1361  091F                     	;# 
  1362  098F                     	;# 
  1363  098F                     	;# 
  1364  0990                     	;# 
  1365  0991                     	;# 
  1366  0992                     	;# 
  1367  0993                     	;# 
  1368  0994                     	;# 
  1369  0995                     	;# 
  1370  0996                     	;# 
  1371  0997                     	;# 
  1372  0A19                     	;# 
  1373  0A19                     	;# 
  1374  0A1A                     	;# 
  1375  0A1A                     	;# 
  1376  0A1B                     	;# 
  1377  0A1B                     	;# 
  1378  0A1B                     	;# 
  1379  0A1C                     	;# 
  1380  0A1C                     	;# 
  1381  0A1D                     	;# 
  1382  0A1D                     	;# 
  1383  0A1E                     	;# 
  1384  0A1E                     	;# 
  1385  0A1F                     	;# 
  1386  0A1F                     	;# 
  1387  0A1F                     	;# 
  1388  1E0F                     	;# 
  1389  1E10                     	;# 
  1390  1E11                     	;# 
  1391  1E12                     	;# 
  1392  1E13                     	;# 
  1393  1E14                     	;# 
  1394  1E15                     	;# 
  1395  1E16                     	;# 
  1396  1E17                     	;# 
  1397  1E18                     	;# 
  1398  1E19                     	;# 
  1399  1E1A                     	;# 
  1400  1E1B                     	;# 
  1401  1E1C                     	;# 
  1402  1E1D                     	;# 
  1403  1E1E                     	;# 
  1404  1E1F                     	;# 
  1405  1E20                     	;# 
  1406  1E21                     	;# 
  1407  1E22                     	;# 
  1408  1E23                     	;# 
  1409  1E24                     	;# 
  1410  1E25                     	;# 
  1411  1E26                     	;# 
  1412  1E27                     	;# 
  1413  1E28                     	;# 
  1414  1E29                     	;# 
  1415  1E2A                     	;# 
  1416  1E2B                     	;# 
  1417  1E2C                     	;# 
  1418  1E2D                     	;# 
  1419  1E2E                     	;# 
  1420  1E2F                     	;# 
  1421  1E30                     	;# 
  1422  1E31                     	;# 
  1423  1E32                     	;# 
  1424  1E33                     	;# 
  1425  1E34                     	;# 
  1426  1E35                     	;# 
  1427  1E36                     	;# 
  1428  1E37                     	;# 
  1429  1E8F                     	;# 
  1430  1E90                     	;# 
  1431  1E91                     	;# 
  1432  1E92                     	;# 
  1433  1E93                     	;# 
  1434  1E9C                     	;# 
  1435  1EA1                     	;# 
  1436  1EA2                     	;# 
  1437  1EB1                     	;# 
  1438  1EBB                     	;# 
  1439  1EBC                     	;# 
  1440  1EBD                     	;# 
  1441  1EBE                     	;# 
  1442  1EC3                     	;# 
  1443  1EC5                     	;# 
  1444  1EC6                     	;# 
  1445  1EC7                     	;# 
  1446  1EC8                     	;# 
  1447  1EC9                     	;# 
  1448  1ECA                     	;# 
  1449  1ECB                     	;# 
  1450  1ECC                     	;# 
  1451  1ECD                     	;# 
  1452  1ECE                     	;# 
  1453  1F10                     	;# 
  1454  1F11                     	;# 
  1455  1F12                     	;# 
  1456  1F13                     	;# 
  1457  1F14                     	;# 
  1458  1F15                     	;# 
  1459  1F16                     	;# 
  1460  1F17                     	;# 
  1461  1F18                     	;# 
  1462  1F19                     	;# 
  1463  1F1A                     	;# 
  1464  1F1B                     	;# 
  1465  1F1C                     	;# 
  1466  1F1D                     	;# 
  1467  1F1E                     	;# 
  1468  1F1F                     	;# 
  1469  1F20                     	;# 
  1470  1F21                     	;# 
  1471  1F22                     	;# 
  1472  1F23                     	;# 
  1473  1F24                     	;# 
  1474  1F25                     	;# 
  1475  1F26                     	;# 
  1476  1F27                     	;# 
  1477  1F28                     	;# 
  1478  1F29                     	;# 
  1479  1F2A                     	;# 
  1480  1F2B                     	;# 
  1481  1F2C                     	;# 
  1482  1F2D                     	;# 
  1483  1F2E                     	;# 
  1484  1F2F                     	;# 
  1485  1F30                     	;# 
  1486  1F31                     	;# 
  1487  1F32                     	;# 
  1488  1F38                     	;# 
  1489  1F39                     	;# 
  1490  1F3A                     	;# 
  1491  1F3B                     	;# 
  1492  1F3C                     	;# 
  1493  1F3D                     	;# 
  1494  1F3E                     	;# 
  1495  1F3F                     	;# 
  1496  1F43                     	;# 
  1497  1F44                     	;# 
  1498  1F45                     	;# 
  1499  1F46                     	;# 
  1500  1F47                     	;# 
  1501  1F48                     	;# 
  1502  1F49                     	;# 
  1503  1F4A                     	;# 
  1504  1F4E                     	;# 
  1505  1F4F                     	;# 
  1506  1F50                     	;# 
  1507  1F51                     	;# 
  1508  1F52                     	;# 
  1509  1F53                     	;# 
  1510  1F54                     	;# 
  1511  1F55                     	;# 
  1512  1F59                     	;# 
  1513  1F5A                     	;# 
  1514  1F5B                     	;# 
  1515  1F5C                     	;# 
  1516  1F5D                     	;# 
  1517  1F64                     	;# 
  1518  1F65                     	;# 
  1519  1F66                     	;# 
  1520  1F67                     	;# 
  1521  1F68                     	;# 
  1522  1F69                     	;# 
  1523  1F6A                     	;# 
  1524  1F6B                     	;# 
  1525  1FE4                     	;# 
  1526  1FE5                     	;# 
  1527  1FE6                     	;# 
  1528  1FE7                     	;# 
  1529  1FE8                     	;# 
  1530  1FE8                     	;# 
  1531  1FE9                     	;# 
  1532  1FEA                     	;# 
  1533  1FEB                     	;# 
  1534  1FED                     	;# 
  1535  1FEE                     	;# 
  1536  1FEF                     	;# 
  1537  0000                     	;# 
  1538  0001                     	;# 
  1539  0002                     	;# 
  1540  0003                     	;# 
  1541  0004                     	;# 
  1542  0005                     	;# 
  1543  0006                     	;# 
  1544  0007                     	;# 
  1545  0008                     	;# 
  1546  0009                     	;# 
  1547  000A                     	;# 
  1548  000B                     	;# 
  1549  000C                     	;# 
  1550  000D                     	;# 
  1551  000E                     	;# 
  1552  000F                     	;# 
  1553  0010                     	;# 
  1554  0012                     	;# 
  1555  0013                     	;# 
  1556  0014                     	;# 
  1557  0015                     	;# 
  1558  0016                     	;# 
  1559  0018                     	;# 
  1560  0019                     	;# 
  1561  001A                     	;# 
  1562  001B                     	;# 
  1563  001C                     	;# 
  1564  009B                     	;# 
  1565  009B                     	;# 
  1566  009C                     	;# 
  1567  009D                     	;# 
  1568  009E                     	;# 
  1569  009F                     	;# 
  1570  0119                     	;# 
  1571  0119                     	;# 
  1572  0119                     	;# 
  1573  011A                     	;# 
  1574  011A                     	;# 
  1575  011A                     	;# 
  1576  011B                     	;# 
  1577  011B                     	;# 
  1578  011B                     	;# 
  1579  011B                     	;# 
  1580  011B                     	;# 
  1581  011C                     	;# 
  1582  011C                     	;# 
  1583  011C                     	;# 
  1584  011D                     	;# 
  1585  011D                     	;# 
  1586  011D                     	;# 
  1587  011E                     	;# 
  1588  011E                     	;# 
  1589  011E                     	;# 
  1590  011F                     	;# 
  1591  011F                     	;# 
  1592  011F                     	;# 
  1593  011F                     	;# 
  1594  011F                     	;# 
  1595  018C                     	;# 
  1596  018D                     	;# 
  1597  018E                     	;# 
  1598  018F                     	;# 
  1599  0190                     	;# 
  1600  0191                     	;# 
  1601  0192                     	;# 
  1602  0196                     	;# 
  1603  0197                     	;# 
  1604  0198                     	;# 
  1605  0199                     	;# 
  1606  019A                     	;# 
  1607  019B                     	;# 
  1608  019C                     	;# 
  1609  020C                     	;# 
  1610  020C                     	;# 
  1611  020D                     	;# 
  1612  020E                     	;# 
  1613  020F                     	;# 
  1614  020F                     	;# 
  1615  0210                     	;# 
  1616  0210                     	;# 
  1617  0211                     	;# 
  1618  0211                     	;# 
  1619  028C                     	;# 
  1620  028C                     	;# 
  1621  028D                     	;# 
  1622  028D                     	;# 
  1623  028E                     	;# 
  1624  028F                     	;# 
  1625  0290                     	;# 
  1626  0291                     	;# 
  1627  030C                     	;# 
  1628  030C                     	;# 
  1629  030D                     	;# 
  1630  030E                     	;# 
  1631  030F                     	;# 
  1632  0310                     	;# 
  1633  0310                     	;# 
  1634  0311                     	;# 
  1635  0312                     	;# 
  1636  0313                     	;# 
  1637  0314                     	;# 
  1638  0315                     	;# 
  1639  0316                     	;# 
  1640  0318                     	;# 
  1641  0319                     	;# 
  1642  031A                     	;# 
  1643  031C                     	;# 
  1644  031D                     	;# 
  1645  031E                     	;# 
  1646  038C                     	;# 
  1647  038D                     	;# 
  1648  038E                     	;# 
  1649  058C                     	;# 
  1650  058C                     	;# 
  1651  058D                     	;# 
  1652  058E                     	;# 
  1653  058F                     	;# 
  1654  058F                     	;# 
  1655  0590                     	;# 
  1656  0591                     	;# 
  1657  0592                     	;# 
  1658  0593                     	;# 
  1659  059C                     	;# 
  1660  059C                     	;# 
  1661  059D                     	;# 
  1662  059D                     	;# 
  1663  059E                     	;# 
  1664  059F                     	;# 
  1665  060C                     	;# 
  1666  060D                     	;# 
  1667  060E                     	;# 
  1668  060F                     	;# 
  1669  0610                     	;# 
  1670  0611                     	;# 
  1671  0612                     	;# 
  1672  0613                     	;# 
  1673  0614                     	;# 
  1674  070C                     	;# 
  1675  070D                     	;# 
  1676  070E                     	;# 
  1677  070F                     	;# 
  1678  0710                     	;# 
  1679  0711                     	;# 
  1680  0712                     	;# 
  1681  0713                     	;# 
  1682  0716                     	;# 
  1683  0717                     	;# 
  1684  0718                     	;# 
  1685  0719                     	;# 
  1686  071A                     	;# 
  1687  071B                     	;# 
  1688  071C                     	;# 
  1689  071D                     	;# 
  1690  0796                     	;# 
  1691  0797                     	;# 
  1692  0798                     	;# 
  1693  0799                     	;# 
  1694  079A                     	;# 
  1695  079B                     	;# 
  1696  080C                     	;# 
  1697  080D                     	;# 
  1698  080E                     	;# 
  1699  080F                     	;# 
  1700  0810                     	;# 
  1701  0811                     	;# 
  1702  0812                     	;# 
  1703  0813                     	;# 
  1704  0814                     	;# 
  1705  081A                     	;# 
  1706  081A                     	;# 
  1707  081B                     	;# 
  1708  081C                     	;# 
  1709  081C                     	;# 
  1710  081D                     	;# 
  1711  081E                     	;# 
  1712  081F                     	;# 
  1713  088C                     	;# 
  1714  088D                     	;# 
  1715  088E                     	;# 
  1716  088F                     	;# 
  1717  0890                     	;# 
  1718  0891                     	;# 
  1719  0892                     	;# 
  1720  0893                     	;# 
  1721  0895                     	;# 
  1722  0896                     	;# 
  1723  090C                     	;# 
  1724  090E                     	;# 
  1725  090F                     	;# 
  1726  091F                     	;# 
  1727  098F                     	;# 
  1728  098F                     	;# 
  1729  0990                     	;# 
  1730  0991                     	;# 
  1731  0992                     	;# 
  1732  0993                     	;# 
  1733  0994                     	;# 
  1734  0995                     	;# 
  1735  0996                     	;# 
  1736  0997                     	;# 
  1737  0A19                     	;# 
  1738  0A19                     	;# 
  1739  0A1A                     	;# 
  1740  0A1A                     	;# 
  1741  0A1B                     	;# 
  1742  0A1B                     	;# 
  1743  0A1B                     	;# 
  1744  0A1C                     	;# 
  1745  0A1C                     	;# 
  1746  0A1D                     	;# 
  1747  0A1D                     	;# 
  1748  0A1E                     	;# 
  1749  0A1E                     	;# 
  1750  0A1F                     	;# 
  1751  0A1F                     	;# 
  1752  0A1F                     	;# 
  1753  1E0F                     	;# 
  1754  1E10                     	;# 
  1755  1E11                     	;# 
  1756  1E12                     	;# 
  1757  1E13                     	;# 
  1758  1E14                     	;# 
  1759  1E15                     	;# 
  1760  1E16                     	;# 
  1761  1E17                     	;# 
  1762  1E18                     	;# 
  1763  1E19                     	;# 
  1764  1E1A                     	;# 
  1765  1E1B                     	;# 
  1766  1E1C                     	;# 
  1767  1E1D                     	;# 
  1768  1E1E                     	;# 
  1769  1E1F                     	;# 
  1770  1E20                     	;# 
  1771  1E21                     	;# 
  1772  1E22                     	;# 
  1773  1E23                     	;# 
  1774  1E24                     	;# 
  1775  1E25                     	;# 
  1776  1E26                     	;# 
  1777  1E27                     	;# 
  1778  1E28                     	;# 
  1779  1E29                     	;# 
  1780  1E2A                     	;# 
  1781  1E2B                     	;# 
  1782  1E2C                     	;# 
  1783  1E2D                     	;# 
  1784  1E2E                     	;# 
  1785  1E2F                     	;# 
  1786  1E30                     	;# 
  1787  1E31                     	;# 
  1788  1E32                     	;# 
  1789  1E33                     	;# 
  1790  1E34                     	;# 
  1791  1E35                     	;# 
  1792  1E36                     	;# 
  1793  1E37                     	;# 
  1794  1E8F                     	;# 
  1795  1E90                     	;# 
  1796  1E91                     	;# 
  1797  1E92                     	;# 
  1798  1E93                     	;# 
  1799  1E9C                     	;# 
  1800  1EA1                     	;# 
  1801  1EA2                     	;# 
  1802  1EB1                     	;# 
  1803  1EBB                     	;# 
  1804  1EBC                     	;# 
  1805  1EBD                     	;# 
  1806  1EBE                     	;# 
  1807  1EC3                     	;# 
  1808  1EC5                     	;# 
  1809  1EC6                     	;# 
  1810  1EC7                     	;# 
  1811  1EC8                     	;# 
  1812  1EC9                     	;# 
  1813  1ECA                     	;# 
  1814  1ECB                     	;# 
  1815  1ECC                     	;# 
  1816  1ECD                     	;# 
  1817  1ECE                     	;# 
  1818  1F10                     	;# 
  1819  1F11                     	;# 
  1820  1F12                     	;# 
  1821  1F13                     	;# 
  1822  1F14                     	;# 
  1823  1F15                     	;# 
  1824  1F16                     	;# 
  1825  1F17                     	;# 
  1826  1F18                     	;# 
  1827  1F19                     	;# 
  1828  1F1A                     	;# 
  1829  1F1B                     	;# 
  1830  1F1C                     	;# 
  1831  1F1D                     	;# 
  1832  1F1E                     	;# 
  1833  1F1F                     	;# 
  1834  1F20                     	;# 
  1835  1F21                     	;# 
  1836  1F22                     	;# 
  1837  1F23                     	;# 
  1838  1F24                     	;# 
  1839  1F25                     	;# 
  1840  1F26                     	;# 
  1841  1F27                     	;# 
  1842  1F28                     	;# 
  1843  1F29                     	;# 
  1844  1F2A                     	;# 
  1845  1F2B                     	;# 
  1846  1F2C                     	;# 
  1847  1F2D                     	;# 
  1848  1F2E                     	;# 
  1849  1F2F                     	;# 
  1850  1F30                     	;# 
  1851  1F31                     	;# 
  1852  1F32                     	;# 
  1853  1F38                     	;# 
  1854  1F39                     	;# 
  1855  1F3A                     	;# 
  1856  1F3B                     	;# 
  1857  1F3C                     	;# 
  1858  1F3D                     	;# 
  1859  1F3E                     	;# 
  1860  1F3F                     	;# 
  1861  1F43                     	;# 
  1862  1F44                     	;# 
  1863  1F45                     	;# 
  1864  1F46                     	;# 
  1865  1F47                     	;# 
  1866  1F48                     	;# 
  1867  1F49                     	;# 
  1868  1F4A                     	;# 
  1869  1F4E                     	;# 
  1870  1F4F                     	;# 
  1871  1F50                     	;# 
  1872  1F51                     	;# 
  1873  1F52                     	;# 
  1874  1F53                     	;# 
  1875  1F54                     	;# 
  1876  1F55                     	;# 
  1877  1F59                     	;# 
  1878  1F5A                     	;# 
  1879  1F5B                     	;# 
  1880  1F5C                     	;# 
  1881  1F5D                     	;# 
  1882  1F64                     	;# 
  1883  1F65                     	;# 
  1884  1F66                     	;# 
  1885  1F67                     	;# 
  1886  1F68                     	;# 
  1887  1F69                     	;# 
  1888  1F6A                     	;# 
  1889  1F6B                     	;# 
  1890  1FE4                     	;# 
  1891  1FE5                     	;# 
  1892  1FE6                     	;# 
  1893  1FE7                     	;# 
  1894  1FE8                     	;# 
  1895  1FE8                     	;# 
  1896  1FE9                     	;# 
  1897  1FEA                     	;# 
  1898  1FEB                     	;# 
  1899  1FED                     	;# 
  1900  1FEE                     	;# 
  1901  1FEF                     	;# 
  1902  0000                     	;# 
  1903  0001                     	;# 
  1904  0002                     	;# 
  1905  0003                     	;# 
  1906  0004                     	;# 
  1907  0005                     	;# 
  1908  0006                     	;# 
  1909  0007                     	;# 
  1910  0008                     	;# 
  1911  0009                     	;# 
  1912  000A                     	;# 
  1913  000B                     	;# 
  1914  000C                     	;# 
  1915  000D                     	;# 
  1916  000E                     	;# 
  1917  000F                     	;# 
  1918  0010                     	;# 
  1919  0012                     	;# 
  1920  0013                     	;# 
  1921  0014                     	;# 
  1922  0015                     	;# 
  1923  0016                     	;# 
  1924  0018                     	;# 
  1925  0019                     	;# 
  1926  001A                     	;# 
  1927  001B                     	;# 
  1928  001C                     	;# 
  1929  009B                     	;# 
  1930  009B                     	;# 
  1931  009C                     	;# 
  1932  009D                     	;# 
  1933  009E                     	;# 
  1934  009F                     	;# 
  1935  0119                     	;# 
  1936  0119                     	;# 
  1937  0119                     	;# 
  1938  011A                     	;# 
  1939  011A                     	;# 
  1940  011A                     	;# 
  1941  011B                     	;# 
  1942  011B                     	;# 
  1943  011B                     	;# 
  1944  011B                     	;# 
  1945  011B                     	;# 
  1946  011C                     	;# 
  1947  011C                     	;# 
  1948  011C                     	;# 
  1949  011D                     	;# 
  1950  011D                     	;# 
  1951  011D                     	;# 
  1952  011E                     	;# 
  1953  011E                     	;# 
  1954  011E                     	;# 
  1955  011F                     	;# 
  1956  011F                     	;# 
  1957  011F                     	;# 
  1958  011F                     	;# 
  1959  011F                     	;# 
  1960  018C                     	;# 
  1961  018D                     	;# 
  1962  018E                     	;# 
  1963  018F                     	;# 
  1964  0190                     	;# 
  1965  0191                     	;# 
  1966  0192                     	;# 
  1967  0196                     	;# 
  1968  0197                     	;# 
  1969  0198                     	;# 
  1970  0199                     	;# 
  1971  019A                     	;# 
  1972  019B                     	;# 
  1973  019C                     	;# 
  1974  020C                     	;# 
  1975  020C                     	;# 
  1976  020D                     	;# 
  1977  020E                     	;# 
  1978  020F                     	;# 
  1979  020F                     	;# 
  1980  0210                     	;# 
  1981  0210                     	;# 
  1982  0211                     	;# 
  1983  0211                     	;# 
  1984  028C                     	;# 
  1985  028C                     	;# 
  1986  028D                     	;# 
  1987  028D                     	;# 
  1988  028E                     	;# 
  1989  028F                     	;# 
  1990  0290                     	;# 
  1991  0291                     	;# 
  1992  030C                     	;# 
  1993  030C                     	;# 
  1994  030D                     	;# 
  1995  030E                     	;# 
  1996  030F                     	;# 
  1997  0310                     	;# 
  1998  0310                     	;# 
  1999  0311                     	;# 
  2000  0312                     	;# 
  2001  0313                     	;# 
  2002  0314                     	;# 
  2003  0315                     	;# 
  2004  0316                     	;# 
  2005  0318                     	;# 
  2006  0319                     	;# 
  2007  031A                     	;# 
  2008  031C                     	;# 
  2009  031D                     	;# 
  2010  031E                     	;# 
  2011  038C                     	;# 
  2012  038D                     	;# 
  2013  038E                     	;# 
  2014  058C                     	;# 
  2015  058C                     	;# 
  2016  058D                     	;# 
  2017  058E                     	;# 
  2018  058F                     	;# 
  2019  058F                     	;# 
  2020  0590                     	;# 
  2021  0591                     	;# 
  2022  0592                     	;# 
  2023  0593                     	;# 
  2024  059C                     	;# 
  2025  059C                     	;# 
  2026  059D                     	;# 
  2027  059D                     	;# 
  2028  059E                     	;# 
  2029  059F                     	;# 
  2030  060C                     	;# 
  2031  060D                     	;# 
  2032  060E                     	;# 
  2033  060F                     	;# 
  2034  0610                     	;# 
  2035  0611                     	;# 
  2036  0612                     	;# 
  2037  0613                     	;# 
  2038  0614                     	;# 
  2039  070C                     	;# 
  2040  070D                     	;# 
  2041  070E                     	;# 
  2042  070F                     	;# 
  2043  0710                     	;# 
  2044  0711                     	;# 
  2045  0712                     	;# 
  2046  0713                     	;# 
  2047  0716                     	;# 
  2048  0717                     	;# 
  2049  0718                     	;# 
  2050  0719                     	;# 
  2051  071A                     	;# 
  2052  071B                     	;# 
  2053  071C                     	;# 
  2054  071D                     	;# 
  2055  0796                     	;# 
  2056  0797                     	;# 
  2057  0798                     	;# 
  2058  0799                     	;# 
  2059  079A                     	;# 
  2060  079B                     	;# 
  2061  080C                     	;# 
  2062  080D                     	;# 
  2063  080E                     	;# 
  2064  080F                     	;# 
  2065  0810                     	;# 
  2066  0811                     	;# 
  2067  0812                     	;# 
  2068  0813                     	;# 
  2069  0814                     	;# 
  2070  081A                     	;# 
  2071  081A                     	;# 
  2072  081B                     	;# 
  2073  081C                     	;# 
  2074  081C                     	;# 
  2075  081D                     	;# 
  2076  081E                     	;# 
  2077  081F                     	;# 
  2078  088C                     	;# 
  2079  088D                     	;# 
  2080  088E                     	;# 
  2081  088F                     	;# 
  2082  0890                     	;# 
  2083  0891                     	;# 
  2084  0892                     	;# 
  2085  0893                     	;# 
  2086  0895                     	;# 
  2087  0896                     	;# 
  2088  090C                     	;# 
  2089  090E                     	;# 
  2090  090F                     	;# 
  2091  091F                     	;# 
  2092  098F                     	;# 
  2093  098F                     	;# 
  2094  0990                     	;# 
  2095  0991                     	;# 
  2096  0992                     	;# 
  2097  0993                     	;# 
  2098  0994                     	;# 
  2099  0995                     	;# 
  2100  0996                     	;# 
  2101  0997                     	;# 
  2102  0A19                     	;# 
  2103  0A19                     	;# 
  2104  0A1A                     	;# 
  2105  0A1A                     	;# 
  2106  0A1B                     	;# 
  2107  0A1B                     	;# 
  2108  0A1B                     	;# 
  2109  0A1C                     	;# 
  2110  0A1C                     	;# 
  2111  0A1D                     	;# 
  2112  0A1D                     	;# 
  2113  0A1E                     	;# 
  2114  0A1E                     	;# 
  2115  0A1F                     	;# 
  2116  0A1F                     	;# 
  2117  0A1F                     	;# 
  2118  1E0F                     	;# 
  2119  1E10                     	;# 
  2120  1E11                     	;# 
  2121  1E12                     	;# 
  2122  1E13                     	;# 
  2123  1E14                     	;# 
  2124  1E15                     	;# 
  2125  1E16                     	;# 
  2126  1E17                     	;# 
  2127  1E18                     	;# 
  2128  1E19                     	;# 
  2129  1E1A                     	;# 
  2130  1E1B                     	;# 
  2131  1E1C                     	;# 
  2132  1E1D                     	;# 
  2133  1E1E                     	;# 
  2134  1E1F                     	;# 
  2135  1E20                     	;# 
  2136  1E21                     	;# 
  2137  1E22                     	;# 
  2138  1E23                     	;# 
  2139  1E24                     	;# 
  2140  1E25                     	;# 
  2141  1E26                     	;# 
  2142  1E27                     	;# 
  2143  1E28                     	;# 
  2144  1E29                     	;# 
  2145  1E2A                     	;# 
  2146  1E2B                     	;# 
  2147  1E2C                     	;# 
  2148  1E2D                     	;# 
  2149  1E2E                     	;# 
  2150  1E2F                     	;# 
  2151  1E30                     	;# 
  2152  1E31                     	;# 
  2153  1E32                     	;# 
  2154  1E33                     	;# 
  2155  1E34                     	;# 
  2156  1E35                     	;# 
  2157  1E36                     	;# 
  2158  1E37                     	;# 
  2159  1E8F                     	;# 
  2160  1E90                     	;# 
  2161  1E91                     	;# 
  2162  1E92                     	;# 
  2163  1E93                     	;# 
  2164  1E9C                     	;# 
  2165  1EA1                     	;# 
  2166  1EA2                     	;# 
  2167  1EB1                     	;# 
  2168  1EBB                     	;# 
  2169  1EBC                     	;# 
  2170  1EBD                     	;# 
  2171  1EBE                     	;# 
  2172  1EC3                     	;# 
  2173  1EC5                     	;# 
  2174  1EC6                     	;# 
  2175  1EC7                     	;# 
  2176  1EC8                     	;# 
  2177  1EC9                     	;# 
  2178  1ECA                     	;# 
  2179  1ECB                     	;# 
  2180  1ECC                     	;# 
  2181  1ECD                     	;# 
  2182  1ECE                     	;# 
  2183  1F10                     	;# 
  2184  1F11                     	;# 
  2185  1F12                     	;# 
  2186  1F13                     	;# 
  2187  1F14                     	;# 
  2188  1F15                     	;# 
  2189  1F16                     	;# 
  2190  1F17                     	;# 
  2191  1F18                     	;# 
  2192  1F19                     	;# 
  2193  1F1A                     	;# 
  2194  1F1B                     	;# 
  2195  1F1C                     	;# 
  2196  1F1D                     	;# 
  2197  1F1E                     	;# 
  2198  1F1F                     	;# 
  2199  1F20                     	;# 
  2200  1F21                     	;# 
  2201  1F22                     	;# 
  2202  1F23                     	;# 
  2203  1F24                     	;# 
  2204  1F25                     	;# 
  2205  1F26                     	;# 
  2206  1F27                     	;# 
  2207  1F28                     	;# 
  2208  1F29                     	;# 
  2209  1F2A                     	;# 
  2210  1F2B                     	;# 
  2211  1F2C                     	;# 
  2212  1F2D                     	;# 
  2213  1F2E                     	;# 
  2214  1F2F                     	;# 
  2215  1F30                     	;# 
  2216  1F31                     	;# 
  2217  1F32                     	;# 
  2218  1F38                     	;# 
  2219  1F39                     	;# 
  2220  1F3A                     	;# 
  2221  1F3B                     	;# 
  2222  1F3C                     	;# 
  2223  1F3D                     	;# 
  2224  1F3E                     	;# 
  2225  1F3F                     	;# 
  2226  1F43                     	;# 
  2227  1F44                     	;# 
  2228  1F45                     	;# 
  2229  1F46                     	;# 
  2230  1F47                     	;# 
  2231  1F48                     	;# 
  2232  1F49                     	;# 
  2233  1F4A                     	;# 
  2234  1F4E                     	;# 
  2235  1F4F                     	;# 
  2236  1F50                     	;# 
  2237  1F51                     	;# 
  2238  1F52                     	;# 
  2239  1F53                     	;# 
  2240  1F54                     	;# 
  2241  1F55                     	;# 
  2242  1F59                     	;# 
  2243  1F5A                     	;# 
  2244  1F5B                     	;# 
  2245  1F5C                     	;# 
  2246  1F5D                     	;# 
  2247  1F64                     	;# 
  2248  1F65                     	;# 
  2249  1F66                     	;# 
  2250  1F67                     	;# 
  2251  1F68                     	;# 
  2252  1F69                     	;# 
  2253  1F6A                     	;# 
  2254  1F6B                     	;# 
  2255  1FE4                     	;# 
  2256  1FE5                     	;# 
  2257  1FE6                     	;# 
  2258  1FE7                     	;# 
  2259  1FE8                     	;# 
  2260  1FE8                     	;# 
  2261  1FE9                     	;# 
  2262  1FEA                     	;# 
  2263  1FEB                     	;# 
  2264  1FED                     	;# 
  2265  1FEE                     	;# 
  2266  1FEF                     	;# 
  2267  0000                     	;# 
  2268  0001                     	;# 
  2269  0002                     	;# 
  2270  0003                     	;# 
  2271  0004                     	;# 
  2272  0005                     	;# 
  2273  0006                     	;# 
  2274  0007                     	;# 
  2275  0008                     	;# 
  2276  0009                     	;# 
  2277  000A                     	;# 
  2278  000B                     	;# 
  2279  000C                     	;# 
  2280  000D                     	;# 
  2281  000E                     	;# 
  2282  000F                     	;# 
  2283  0010                     	;# 
  2284  0012                     	;# 
  2285  0013                     	;# 
  2286  0014                     	;# 
  2287  0015                     	;# 
  2288  0016                     	;# 
  2289  0018                     	;# 
  2290  0019                     	;# 
  2291  001A                     	;# 
  2292  001B                     	;# 
  2293  001C                     	;# 
  2294  009B                     	;# 
  2295  009B                     	;# 
  2296  009C                     	;# 
  2297  009D                     	;# 
  2298  009E                     	;# 
  2299  009F                     	;# 
  2300  0119                     	;# 
  2301  0119                     	;# 
  2302  0119                     	;# 
  2303  011A                     	;# 
  2304  011A                     	;# 
  2305  011A                     	;# 
  2306  011B                     	;# 
  2307  011B                     	;# 
  2308  011B                     	;# 
  2309  011B                     	;# 
  2310  011B                     	;# 
  2311  011C                     	;# 
  2312  011C                     	;# 
  2313  011C                     	;# 
  2314  011D                     	;# 
  2315  011D                     	;# 
  2316  011D                     	;# 
  2317  011E                     	;# 
  2318  011E                     	;# 
  2319  011E                     	;# 
  2320  011F                     	;# 
  2321  011F                     	;# 
  2322  011F                     	;# 
  2323  011F                     	;# 
  2324  011F                     	;# 
  2325  018C                     	;# 
  2326  018D                     	;# 
  2327  018E                     	;# 
  2328  018F                     	;# 
  2329  0190                     	;# 
  2330  0191                     	;# 
  2331  0192                     	;# 
  2332  0196                     	;# 
  2333  0197                     	;# 
  2334  0198                     	;# 
  2335  0199                     	;# 
  2336  019A                     	;# 
  2337  019B                     	;# 
  2338  019C                     	;# 
  2339  020C                     	;# 
  2340  020C                     	;# 
  2341  020D                     	;# 
  2342  020E                     	;# 
  2343  020F                     	;# 
  2344  020F                     	;# 
  2345  0210                     	;# 
  2346  0210                     	;# 
  2347  0211                     	;# 
  2348  0211                     	;# 
  2349  028C                     	;# 
  2350  028C                     	;# 
  2351  028D                     	;# 
  2352  028D                     	;# 
  2353  028E                     	;# 
  2354  028F                     	;# 
  2355  0290                     	;# 
  2356  0291                     	;# 
  2357  030C                     	;# 
  2358  030C                     	;# 
  2359  030D                     	;# 
  2360  030E                     	;# 
  2361  030F                     	;# 
  2362  0310                     	;# 
  2363  0310                     	;# 
  2364  0311                     	;# 
  2365  0312                     	;# 
  2366  0313                     	;# 
  2367  0314                     	;# 
  2368  0315                     	;# 
  2369  0316                     	;# 
  2370  0318                     	;# 
  2371  0319                     	;# 
  2372  031A                     	;# 
  2373  031C                     	;# 
  2374  031D                     	;# 
  2375  031E                     	;# 
  2376  038C                     	;# 
  2377  038D                     	;# 
  2378  038E                     	;# 
  2379  058C                     	;# 
  2380  058C                     	;# 
  2381  058D                     	;# 
  2382  058E                     	;# 
  2383  058F                     	;# 
  2384  058F                     	;# 
  2385  0590                     	;# 
  2386  0591                     	;# 
  2387  0592                     	;# 
  2388  0593                     	;# 
  2389  059C                     	;# 
  2390  059C                     	;# 
  2391  059D                     	;# 
  2392  059D                     	;# 
  2393  059E                     	;# 
  2394  059F                     	;# 
  2395  060C                     	;# 
  2396  060D                     	;# 
  2397  060E                     	;# 
  2398  060F                     	;# 
  2399  0610                     	;# 
  2400  0611                     	;# 
  2401  0612                     	;# 
  2402  0613                     	;# 
  2403  0614                     	;# 
  2404  070C                     	;# 
  2405  070D                     	;# 
  2406  070E                     	;# 
  2407  070F                     	;# 
  2408  0710                     	;# 
  2409  0711                     	;# 
  2410  0712                     	;# 
  2411  0713                     	;# 
  2412  0716                     	;# 
  2413  0717                     	;# 
  2414  0718                     	;# 
  2415  0719                     	;# 
  2416  071A                     	;# 
  2417  071B                     	;# 
  2418  071C                     	;# 
  2419  071D                     	;# 
  2420  0796                     	;# 
  2421  0797                     	;# 
  2422  0798                     	;# 
  2423  0799                     	;# 
  2424  079A                     	;# 
  2425  079B                     	;# 
  2426  080C                     	;# 
  2427  080D                     	;# 
  2428  080E                     	;# 
  2429  080F                     	;# 
  2430  0810                     	;# 
  2431  0811                     	;# 
  2432  0812                     	;# 
  2433  0813                     	;# 
  2434  0814                     	;# 
  2435  081A                     	;# 
  2436  081A                     	;# 
  2437  081B                     	;# 
  2438  081C                     	;# 
  2439  081C                     	;# 
  2440  081D                     	;# 
  2441  081E                     	;# 
  2442  081F                     	;# 
  2443  088C                     	;# 
  2444  088D                     	;# 
  2445  088E                     	;# 
  2446  088F                     	;# 
  2447  0890                     	;# 
  2448  0891                     	;# 
  2449  0892                     	;# 
  2450  0893                     	;# 
  2451  0895                     	;# 
  2452  0896                     	;# 
  2453  090C                     	;# 
  2454  090E                     	;# 
  2455  090F                     	;# 
  2456  091F                     	;# 
  2457  098F                     	;# 
  2458  098F                     	;# 
  2459  0990                     	;# 
  2460  0991                     	;# 
  2461  0992                     	;# 
  2462  0993                     	;# 
  2463  0994                     	;# 
  2464  0995                     	;# 
  2465  0996                     	;# 
  2466  0997                     	;# 
  2467  0A19                     	;# 
  2468  0A19                     	;# 
  2469  0A1A                     	;# 
  2470  0A1A                     	;# 
  2471  0A1B                     	;# 
  2472  0A1B                     	;# 
  2473  0A1B                     	;# 
  2474  0A1C                     	;# 
  2475  0A1C                     	;# 
  2476  0A1D                     	;# 
  2477  0A1D                     	;# 
  2478  0A1E                     	;# 
  2479  0A1E                     	;# 
  2480  0A1F                     	;# 
  2481  0A1F                     	;# 
  2482  0A1F                     	;# 
  2483  1E0F                     	;# 
  2484  1E10                     	;# 
  2485  1E11                     	;# 
  2486  1E12                     	;# 
  2487  1E13                     	;# 
  2488  1E14                     	;# 
  2489  1E15                     	;# 
  2490  1E16                     	;# 
  2491  1E17                     	;# 
  2492  1E18                     	;# 
  2493  1E19                     	;# 
  2494  1E1A                     	;# 
  2495  1E1B                     	;# 
  2496  1E1C                     	;# 
  2497  1E1D                     	;# 
  2498  1E1E                     	;# 
  2499  1E1F                     	;# 
  2500  1E20                     	;# 
  2501  1E21                     	;# 
  2502  1E22                     	;# 
  2503  1E23                     	;# 
  2504  1E24                     	;# 
  2505  1E25                     	;# 
  2506  1E26                     	;# 
  2507  1E27                     	;# 
  2508  1E28                     	;# 
  2509  1E29                     	;# 
  2510  1E2A                     	;# 
  2511  1E2B                     	;# 
  2512  1E2C                     	;# 
  2513  1E2D                     	;# 
  2514  1E2E                     	;# 
  2515  1E2F                     	;# 
  2516  1E30                     	;# 
  2517  1E31                     	;# 
  2518  1E32                     	;# 
  2519  1E33                     	;# 
  2520  1E34                     	;# 
  2521  1E35                     	;# 
  2522  1E36                     	;# 
  2523  1E37                     	;# 
  2524  1E8F                     	;# 
  2525  1E90                     	;# 
  2526  1E91                     	;# 
  2527  1E92                     	;# 
  2528  1E93                     	;# 
  2529  1E9C                     	;# 
  2530  1EA1                     	;# 
  2531  1EA2                     	;# 
  2532  1EB1                     	;# 
  2533  1EBB                     	;# 
  2534  1EBC                     	;# 
  2535  1EBD                     	;# 
  2536  1EBE                     	;# 
  2537  1EC3                     	;# 
  2538  1EC5                     	;# 
  2539  1EC6                     	;# 
  2540  1EC7                     	;# 
  2541  1EC8                     	;# 
  2542  1EC9                     	;# 
  2543  1ECA                     	;# 
  2544  1ECB                     	;# 
  2545  1ECC                     	;# 
  2546  1ECD                     	;# 
  2547  1ECE                     	;# 
  2548  1F10                     	;# 
  2549  1F11                     	;# 
  2550  1F12                     	;# 
  2551  1F13                     	;# 
  2552  1F14                     	;# 
  2553  1F15                     	;# 
  2554  1F16                     	;# 
  2555  1F17                     	;# 
  2556  1F18                     	;# 
  2557  1F19                     	;# 
  2558  1F1A                     	;# 
  2559  1F1B                     	;# 
  2560  1F1C                     	;# 
  2561  1F1D                     	;# 
  2562  1F1E                     	;# 
  2563  1F1F                     	;# 
  2564  1F20                     	;# 
  2565  1F21                     	;# 
  2566  1F22                     	;# 
  2567  1F23                     	;# 
  2568  1F24                     	;# 
  2569  1F25                     	;# 
  2570  1F26                     	;# 
  2571  1F27                     	;# 
  2572  1F28                     	;# 
  2573  1F29                     	;# 
  2574  1F2A                     	;# 
  2575  1F2B                     	;# 
  2576  1F2C                     	;# 
  2577  1F2D                     	;# 
  2578  1F2E                     	;# 
  2579  1F2F                     	;# 
  2580  1F30                     	;# 
  2581  1F31                     	;# 
  2582  1F32                     	;# 
  2583  1F38                     	;# 
  2584  1F39                     	;# 
  2585  1F3A                     	;# 
  2586  1F3B                     	;# 
  2587  1F3C                     	;# 
  2588  1F3D                     	;# 
  2589  1F3E                     	;# 
  2590  1F3F                     	;# 
  2591  1F43                     	;# 
  2592  1F44                     	;# 
  2593  1F45                     	;# 
  2594  1F46                     	;# 
  2595  1F47                     	;# 
  2596  1F48                     	;# 
  2597  1F49                     	;# 
  2598  1F4A                     	;# 
  2599  1F4E                     	;# 
  2600  1F4F                     	;# 
  2601  1F50                     	;# 
  2602  1F51                     	;# 
  2603  1F52                     	;# 
  2604  1F53                     	;# 
  2605  1F54                     	;# 
  2606  1F55                     	;# 
  2607  1F59                     	;# 
  2608  1F5A                     	;# 
  2609  1F5B                     	;# 
  2610  1F5C                     	;# 
  2611  1F5D                     	;# 
  2612  1F64                     	;# 
  2613  1F65                     	;# 
  2614  1F66                     	;# 
  2615  1F67                     	;# 
  2616  1F68                     	;# 
  2617  1F69                     	;# 
  2618  1F6A                     	;# 
  2619  1F6B                     	;# 
  2620  1FE4                     	;# 
  2621  1FE5                     	;# 
  2622  1FE6                     	;# 
  2623  1FE7                     	;# 
  2624  1FE8                     	;# 
  2625  1FE8                     	;# 
  2626  1FE9                     	;# 
  2627  1FEA                     	;# 
  2628  1FEB                     	;# 
  2629  1FED                     	;# 
  2630  1FEE                     	;# 
  2631  1FEF                     	;# 
  2632  0000                     	;# 
  2633  0001                     	;# 
  2634  0002                     	;# 
  2635  0003                     	;# 
  2636  0004                     	;# 
  2637  0005                     	;# 
  2638  0006                     	;# 
  2639  0007                     	;# 
  2640  0008                     	;# 
  2641  0009                     	;# 
  2642  000A                     	;# 
  2643  000B                     	;# 
  2644  000C                     	;# 
  2645  000D                     	;# 
  2646  000E                     	;# 
  2647  000F                     	;# 
  2648  0010                     	;# 
  2649  0012                     	;# 
  2650  0013                     	;# 
  2651  0014                     	;# 
  2652  0015                     	;# 
  2653  0016                     	;# 
  2654  0018                     	;# 
  2655  0019                     	;# 
  2656  001A                     	;# 
  2657  001B                     	;# 
  2658  001C                     	;# 
  2659  009B                     	;# 
  2660  009B                     	;# 
  2661  009C                     	;# 
  2662  009D                     	;# 
  2663  009E                     	;# 
  2664  009F                     	;# 
  2665  0119                     	;# 
  2666  0119                     	;# 
  2667  0119                     	;# 
  2668  011A                     	;# 
  2669  011A                     	;# 
  2670  011A                     	;# 
  2671  011B                     	;# 
  2672  011B                     	;# 
  2673  011B                     	;# 
  2674  011B                     	;# 
  2675  011B                     	;# 
  2676  011C                     	;# 
  2677  011C                     	;# 
  2678  011C                     	;# 
  2679  011D                     	;# 
  2680  011D                     	;# 
  2681  011D                     	;# 
  2682  011E                     	;# 
  2683  011E                     	;# 
  2684  011E                     	;# 
  2685  011F                     	;# 
  2686  011F                     	;# 
  2687  011F                     	;# 
  2688  011F                     	;# 
  2689  011F                     	;# 
  2690  018C                     	;# 
  2691  018D                     	;# 
  2692  018E                     	;# 
  2693  018F                     	;# 
  2694  0190                     	;# 
  2695  0191                     	;# 
  2696  0192                     	;# 
  2697  0196                     	;# 
  2698  0197                     	;# 
  2699  0198                     	;# 
  2700  0199                     	;# 
  2701  019A                     	;# 
  2702  019B                     	;# 
  2703  019C                     	;# 
  2704  020C                     	;# 
  2705  020C                     	;# 
  2706  020D                     	;# 
  2707  020E                     	;# 
  2708  020F                     	;# 
  2709  020F                     	;# 
  2710  0210                     	;# 
  2711  0210                     	;# 
  2712  0211                     	;# 
  2713  0211                     	;# 
  2714  028C                     	;# 
  2715  028C                     	;# 
  2716  028D                     	;# 
  2717  028D                     	;# 
  2718  028E                     	;# 
  2719  028F                     	;# 
  2720  0290                     	;# 
  2721  0291                     	;# 
  2722  030C                     	;# 
  2723  030C                     	;# 
  2724  030D                     	;# 
  2725  030E                     	;# 
  2726  030F                     	;# 
  2727  0310                     	;# 
  2728  0310                     	;# 
  2729  0311                     	;# 
  2730  0312                     	;# 
  2731  0313                     	;# 
  2732  0314                     	;# 
  2733  0315                     	;# 
  2734  0316                     	;# 
  2735  0318                     	;# 
  2736  0319                     	;# 
  2737  031A                     	;# 
  2738  031C                     	;# 
  2739  031D                     	;# 
  2740  031E                     	;# 
  2741  038C                     	;# 
  2742  038D                     	;# 
  2743  038E                     	;# 
  2744  058C                     	;# 
  2745  058C                     	;# 
  2746  058D                     	;# 
  2747  058E                     	;# 
  2748  058F                     	;# 
  2749  058F                     	;# 
  2750  0590                     	;# 
  2751  0591                     	;# 
  2752  0592                     	;# 
  2753  0593                     	;# 
  2754  059C                     	;# 
  2755  059C                     	;# 
  2756  059D                     	;# 
  2757  059D                     	;# 
  2758  059E                     	;# 
  2759  059F                     	;# 
  2760  060C                     	;# 
  2761  060D                     	;# 
  2762  060E                     	;# 
  2763  060F                     	;# 
  2764  0610                     	;# 
  2765  0611                     	;# 
  2766  0612                     	;# 
  2767  0613                     	;# 
  2768  0614                     	;# 
  2769  070C                     	;# 
  2770  070D                     	;# 
  2771  070E                     	;# 
  2772  070F                     	;# 
  2773  0710                     	;# 
  2774  0711                     	;# 
  2775  0712                     	;# 
  2776  0713                     	;# 
  2777  0716                     	;# 
  2778  0717                     	;# 
  2779  0718                     	;# 
  2780  0719                     	;# 
  2781  071A                     	;# 
  2782  071B                     	;# 
  2783  071C                     	;# 
  2784  071D                     	;# 
  2785  0796                     	;# 
  2786  0797                     	;# 
  2787  0798                     	;# 
  2788  0799                     	;# 
  2789  079A                     	;# 
  2790  079B                     	;# 
  2791  080C                     	;# 
  2792  080D                     	;# 
  2793  080E                     	;# 
  2794  080F                     	;# 
  2795  0810                     	;# 
  2796  0811                     	;# 
  2797  0812                     	;# 
  2798  0813                     	;# 
  2799  0814                     	;# 
  2800  081A                     	;# 
  2801  081A                     	;# 
  2802  081B                     	;# 
  2803  081C                     	;# 
  2804  081C                     	;# 
  2805  081D                     	;# 
  2806  081E                     	;# 
  2807  081F                     	;# 
  2808  088C                     	;# 
  2809  088D                     	;# 
  2810  088E                     	;# 
  2811  088F                     	;# 
  2812  0890                     	;# 
  2813  0891                     	;# 
  2814  0892                     	;# 
  2815  0893                     	;# 
  2816  0895                     	;# 
  2817  0896                     	;# 
  2818  090C                     	;# 
  2819  090E                     	;# 
  2820  090F                     	;# 
  2821  091F                     	;# 
  2822  098F                     	;# 
  2823  098F                     	;# 
  2824  0990                     	;# 
  2825  0991                     	;# 
  2826  0992                     	;# 
  2827  0993                     	;# 
  2828  0994                     	;# 
  2829  0995                     	;# 
  2830  0996                     	;# 
  2831  0997                     	;# 
  2832  0A19                     	;# 
  2833  0A19                     	;# 
  2834  0A1A                     	;# 
  2835  0A1A                     	;# 
  2836  0A1B                     	;# 
  2837  0A1B                     	;# 
  2838  0A1B                     	;# 
  2839  0A1C                     	;# 
  2840  0A1C                     	;# 
  2841  0A1D                     	;# 
  2842  0A1D                     	;# 
  2843  0A1E                     	;# 
  2844  0A1E                     	;# 
  2845  0A1F                     	;# 
  2846  0A1F                     	;# 
  2847  0A1F                     	;# 
  2848  1E0F                     	;# 
  2849  1E10                     	;# 
  2850  1E11                     	;# 
  2851  1E12                     	;# 
  2852  1E13                     	;# 
  2853  1E14                     	;# 
  2854  1E15                     	;# 
  2855  1E16                     	;# 
  2856  1E17                     	;# 
  2857  1E18                     	;# 
  2858  1E19                     	;# 
  2859  1E1A                     	;# 
  2860  1E1B                     	;# 
  2861  1E1C                     	;# 
  2862  1E1D                     	;# 
  2863  1E1E                     	;# 
  2864  1E1F                     	;# 
  2865  1E20                     	;# 
  2866  1E21                     	;# 
  2867  1E22                     	;# 
  2868  1E23                     	;# 
  2869  1E24                     	;# 
  2870  1E25                     	;# 
  2871  1E26                     	;# 
  2872  1E27                     	;# 
  2873  1E28                     	;# 
  2874  1E29                     	;# 
  2875  1E2A                     	;# 
  2876  1E2B                     	;# 
  2877  1E2C                     	;# 
  2878  1E2D                     	;# 
  2879  1E2E                     	;# 
  2880  1E2F                     	;# 
  2881  1E30                     	;# 
  2882  1E31                     	;# 
  2883  1E32                     	;# 
  2884  1E33                     	;# 
  2885  1E34                     	;# 
  2886  1E35                     	;# 
  2887  1E36                     	;# 
  2888  1E37                     	;# 
  2889  1E8F                     	;# 
  2890  1E90                     	;# 
  2891  1E91                     	;# 
  2892  1E92                     	;# 
  2893  1E93                     	;# 
  2894  1E9C                     	;# 
  2895  1EA1                     	;# 
  2896  1EA2                     	;# 
  2897  1EB1                     	;# 
  2898  1EBB                     	;# 
  2899  1EBC                     	;# 
  2900  1EBD                     	;# 
  2901  1EBE                     	;# 
  2902  1EC3                     	;# 
  2903  1EC5                     	;# 
  2904  1EC6                     	;# 
  2905  1EC7                     	;# 
  2906  1EC8                     	;# 
  2907  1EC9                     	;# 
  2908  1ECA                     	;# 
  2909  1ECB                     	;# 
  2910  1ECC                     	;# 
  2911  1ECD                     	;# 
  2912  1ECE                     	;# 
  2913  1F10                     	;# 
  2914  1F11                     	;# 
  2915  1F12                     	;# 
  2916  1F13                     	;# 
  2917  1F14                     	;# 
  2918  1F15                     	;# 
  2919  1F16                     	;# 
  2920  1F17                     	;# 
  2921  1F18                     	;# 
  2922  1F19                     	;# 
  2923  1F1A                     	;# 
  2924  1F1B                     	;# 
  2925  1F1C                     	;# 
  2926  1F1D                     	;# 
  2927  1F1E                     	;# 
  2928  1F1F                     	;# 
  2929  1F20                     	;# 
  2930  1F21                     	;# 
  2931  1F22                     	;# 
  2932  1F23                     	;# 
  2933  1F24                     	;# 
  2934  1F25                     	;# 
  2935  1F26                     	;# 
  2936  1F27                     	;# 
  2937  1F28                     	;# 
  2938  1F29                     	;# 
  2939  1F2A                     	;# 
  2940  1F2B                     	;# 
  2941  1F2C                     	;# 
  2942  1F2D                     	;# 
  2943  1F2E                     	;# 
  2944  1F2F                     	;# 
  2945  1F30                     	;# 
  2946  1F31                     	;# 
  2947  1F32                     	;# 
  2948  1F38                     	;# 
  2949  1F39                     	;# 
  2950  1F3A                     	;# 
  2951  1F3B                     	;# 
  2952  1F3C                     	;# 
  2953  1F3D                     	;# 
  2954  1F3E                     	;# 
  2955  1F3F                     	;# 
  2956  1F43                     	;# 
  2957  1F44                     	;# 
  2958  1F45                     	;# 
  2959  1F46                     	;# 
  2960  1F47                     	;# 
  2961  1F48                     	;# 
  2962  1F49                     	;# 
  2963  1F4A                     	;# 
  2964  1F4E                     	;# 
  2965  1F4F                     	;# 
  2966  1F50                     	;# 
  2967  1F51                     	;# 
  2968  1F52                     	;# 
  2969  1F53                     	;# 
  2970  1F54                     	;# 
  2971  1F55                     	;# 
  2972  1F59                     	;# 
  2973  1F5A                     	;# 
  2974  1F5B                     	;# 
  2975  1F5C                     	;# 
  2976  1F5D                     	;# 
  2977  1F64                     	;# 
  2978  1F65                     	;# 
  2979  1F66                     	;# 
  2980  1F67                     	;# 
  2981  1F68                     	;# 
  2982  1F69                     	;# 
  2983  1F6A                     	;# 
  2984  1F6B                     	;# 
  2985  1FE4                     	;# 
  2986  1FE5                     	;# 
  2987  1FE6                     	;# 
  2988  1FE7                     	;# 
  2989  1FE8                     	;# 
  2990  1FE8                     	;# 
  2991  1FE9                     	;# 
  2992  1FEA                     	;# 
  2993  1FEB                     	;# 
  2994  1FED                     	;# 
  2995  1FEE                     	;# 
  2996  1FEF                     	;# 
  2997  0000                     	;# 
  2998  0001                     	;# 
  2999  0002                     	;# 
  3000  0003                     	;# 
  3001  0004                     	;# 
  3002  0005                     	;# 
  3003  0006                     	;# 
  3004  0007                     	;# 
  3005  0008                     	;# 
  3006  0009                     	;# 
  3007  000A                     	;# 
  3008  000B                     	;# 
  3009  000C                     	;# 
  3010  000D                     	;# 
  3011  000E                     	;# 
  3012  000F                     	;# 
  3013  0010                     	;# 
  3014  0012                     	;# 
  3015  0013                     	;# 
  3016  0014                     	;# 
  3017  0015                     	;# 
  3018  0016                     	;# 
  3019  0018                     	;# 
  3020  0019                     	;# 
  3021  001A                     	;# 
  3022  001B                     	;# 
  3023  001C                     	;# 
  3024  009B                     	;# 
  3025  009B                     	;# 
  3026  009C                     	;# 
  3027  009D                     	;# 
  3028  009E                     	;# 
  3029  009F                     	;# 
  3030  0119                     	;# 
  3031  0119                     	;# 
  3032  0119                     	;# 
  3033  011A                     	;# 
  3034  011A                     	;# 
  3035  011A                     	;# 
  3036  011B                     	;# 
  3037  011B                     	;# 
  3038  011B                     	;# 
  3039  011B                     	;# 
  3040  011B                     	;# 
  3041  011C                     	;# 
  3042  011C                     	;# 
  3043  011C                     	;# 
  3044  011D                     	;# 
  3045  011D                     	;# 
  3046  011D                     	;# 
  3047  011E                     	;# 
  3048  011E                     	;# 
  3049  011E                     	;# 
  3050  011F                     	;# 
  3051  011F                     	;# 
  3052  011F                     	;# 
  3053  011F                     	;# 
  3054  011F                     	;# 
  3055  018C                     	;# 
  3056  018D                     	;# 
  3057  018E                     	;# 
  3058  018F                     	;# 
  3059  0190                     	;# 
  3060  0191                     	;# 
  3061  0192                     	;# 
  3062  0196                     	;# 
  3063  0197                     	;# 
  3064  0198                     	;# 
  3065  0199                     	;# 
  3066  019A                     	;# 
  3067  019B                     	;# 
  3068  019C                     	;# 
  3069  020C                     	;# 
  3070  020C                     	;# 
  3071  020D                     	;# 
  3072  020E                     	;# 
  3073  020F                     	;# 
  3074  020F                     	;# 
  3075  0210                     	;# 
  3076  0210                     	;# 
  3077  0211                     	;# 
  3078  0211                     	;# 
  3079  028C                     	;# 
  3080  028C                     	;# 
  3081  028D                     	;# 
  3082  028D                     	;# 
  3083  028E                     	;# 
  3084  028F                     	;# 
  3085  0290                     	;# 
  3086  0291                     	;# 
  3087  030C                     	;# 
  3088  030C                     	;# 
  3089  030D                     	;# 
  3090  030E                     	;# 
  3091  030F                     	;# 
  3092  0310                     	;# 
  3093  0310                     	;# 
  3094  0311                     	;# 
  3095  0312                     	;# 
  3096  0313                     	;# 
  3097  0314                     	;# 
  3098  0315                     	;# 
  3099  0316                     	;# 
  3100  0318                     	;# 
  3101  0319                     	;# 
  3102  031A                     	;# 
  3103  031C                     	;# 
  3104  031D                     	;# 
  3105  031E                     	;# 
  3106  038C                     	;# 
  3107  038D                     	;# 
  3108  038E                     	;# 
  3109  058C                     	;# 
  3110  058C                     	;# 
  3111  058D                     	;# 
  3112  058E                     	;# 
  3113  058F                     	;# 
  3114  058F                     	;# 
  3115  0590                     	;# 
  3116  0591                     	;# 
  3117  0592                     	;# 
  3118  0593                     	;# 
  3119  059C                     	;# 
  3120  059C                     	;# 
  3121  059D                     	;# 
  3122  059D                     	;# 
  3123  059E                     	;# 
  3124  059F                     	;# 
  3125  060C                     	;# 
  3126  060D                     	;# 
  3127  060E                     	;# 
  3128  060F                     	;# 
  3129  0610                     	;# 
  3130  0611                     	;# 
  3131  0612                     	;# 
  3132  0613                     	;# 
  3133  0614                     	;# 
  3134  070C                     	;# 
  3135  070D                     	;# 
  3136  070E                     	;# 
  3137  070F                     	;# 
  3138  0710                     	;# 
  3139  0711                     	;# 
  3140  0712                     	;# 
  3141  0713                     	;# 
  3142  0716                     	;# 
  3143  0717                     	;# 
  3144  0718                     	;# 
  3145  0719                     	;# 
  3146  071A                     	;# 
  3147  071B                     	;# 
  3148  071C                     	;# 
  3149  071D                     	;# 
  3150  0796                     	;# 
  3151  0797                     	;# 
  3152  0798                     	;# 
  3153  0799                     	;# 
  3154  079A                     	;# 
  3155  079B                     	;# 
  3156  080C                     	;# 
  3157  080D                     	;# 
  3158  080E                     	;# 
  3159  080F                     	;# 
  3160  0810                     	;# 
  3161  0811                     	;# 
  3162  0812                     	;# 
  3163  0813                     	;# 
  3164  0814                     	;# 
  3165  081A                     	;# 
  3166  081A                     	;# 
  3167  081B                     	;# 
  3168  081C                     	;# 
  3169  081C                     	;# 
  3170  081D                     	;# 
  3171  081E                     	;# 
  3172  081F                     	;# 
  3173  088C                     	;# 
  3174  088D                     	;# 
  3175  088E                     	;# 
  3176  088F                     	;# 
  3177  0890                     	;# 
  3178  0891                     	;# 
  3179  0892                     	;# 
  3180  0893                     	;# 
  3181  0895                     	;# 
  3182  0896                     	;# 
  3183  090C                     	;# 
  3184  090E                     	;# 
  3185  090F                     	;# 
  3186  091F                     	;# 
  3187  098F                     	;# 
  3188  098F                     	;# 
  3189  0990                     	;# 
  3190  0991                     	;# 
  3191  0992                     	;# 
  3192  0993                     	;# 
  3193  0994                     	;# 
  3194  0995                     	;# 
  3195  0996                     	;# 
  3196  0997                     	;# 
  3197  0A19                     	;# 
  3198  0A19                     	;# 
  3199  0A1A                     	;# 
  3200  0A1A                     	;# 
  3201  0A1B                     	;# 
  3202  0A1B                     	;# 
  3203  0A1B                     	;# 
  3204  0A1C                     	;# 
  3205  0A1C                     	;# 
  3206  0A1D                     	;# 
  3207  0A1D                     	;# 
  3208  0A1E                     	;# 
  3209  0A1E                     	;# 
  3210  0A1F                     	;# 
  3211  0A1F                     	;# 
  3212  0A1F                     	;# 
  3213  1E0F                     	;# 
  3214  1E10                     	;# 
  3215  1E11                     	;# 
  3216  1E12                     	;# 
  3217  1E13                     	;# 
  3218  1E14                     	;# 
  3219  1E15                     	;# 
  3220  1E16                     	;# 
  3221  1E17                     	;# 
  3222  1E18                     	;# 
  3223  1E19                     	;# 
  3224  1E1A                     	;# 
  3225  1E1B                     	;# 
  3226  1E1C                     	;# 
  3227  1E1D                     	;# 
  3228  1E1E                     	;# 
  3229  1E1F                     	;# 
  3230  1E20                     	;# 
  3231  1E21                     	;# 
  3232  1E22                     	;# 
  3233  1E23                     	;# 
  3234  1E24                     	;# 
  3235  1E25                     	;# 
  3236  1E26                     	;# 
  3237  1E27                     	;# 
  3238  1E28                     	;# 
  3239  1E29                     	;# 
  3240  1E2A                     	;# 
  3241  1E2B                     	;# 
  3242  1E2C                     	;# 
  3243  1E2D                     	;# 
  3244  1E2E                     	;# 
  3245  1E2F                     	;# 
  3246  1E30                     	;# 
  3247  1E31                     	;# 
  3248  1E32                     	;# 
  3249  1E33                     	;# 
  3250  1E34                     	;# 
  3251  1E35                     	;# 
  3252  1E36                     	;# 
  3253  1E37                     	;# 
  3254  1E8F                     	;# 
  3255  1E90                     	;# 
  3256  1E91                     	;# 
  3257  1E92                     	;# 
  3258  1E93                     	;# 
  3259  1E9C                     	;# 
  3260  1EA1                     	;# 
  3261  1EA2                     	;# 
  3262  1EB1                     	;# 
  3263  1EBB                     	;# 
  3264  1EBC                     	;# 
  3265  1EBD                     	;# 
  3266  1EBE                     	;# 
  3267  1EC3                     	;# 
  3268  1EC5                     	;# 
  3269  1EC6                     	;# 
  3270  1EC7                     	;# 
  3271  1EC8                     	;# 
  3272  1EC9                     	;# 
  3273  1ECA                     	;# 
  3274  1ECB                     	;# 
  3275  1ECC                     	;# 
  3276  1ECD                     	;# 
  3277  1ECE                     	;# 
  3278  1F10                     	;# 
  3279  1F11                     	;# 
  3280  1F12                     	;# 
  3281  1F13                     	;# 
  3282  1F14                     	;# 
  3283  1F15                     	;# 
  3284  1F16                     	;# 
  3285  1F17                     	;# 
  3286  1F18                     	;# 
  3287  1F19                     	;# 
  3288  1F1A                     	;# 
  3289  1F1B                     	;# 
  3290  1F1C                     	;# 
  3291  1F1D                     	;# 
  3292  1F1E                     	;# 
  3293  1F1F                     	;# 
  3294  1F20                     	;# 
  3295  1F21                     	;# 
  3296  1F22                     	;# 
  3297  1F23                     	;# 
  3298  1F24                     	;# 
  3299  1F25                     	;# 
  3300  1F26                     	;# 
  3301  1F27                     	;# 
  3302  1F28                     	;# 
  3303  1F29                     	;# 
  3304  1F2A                     	;# 
  3305  1F2B                     	;# 
  3306  1F2C                     	;# 
  3307  1F2D                     	;# 
  3308  1F2E                     	;# 
  3309  1F2F                     	;# 
  3310  1F30                     	;# 
  3311  1F31                     	;# 
  3312  1F32                     	;# 
  3313  1F38                     	;# 
  3314  1F39                     	;# 
  3315  1F3A                     	;# 
  3316  1F3B                     	;# 
  3317  1F3C                     	;# 
  3318  1F3D                     	;# 
  3319  1F3E                     	;# 
  3320  1F3F                     	;# 
  3321  1F43                     	;# 
  3322  1F44                     	;# 
  3323  1F45                     	;# 
  3324  1F46                     	;# 
  3325  1F47                     	;# 
  3326  1F48                     	;# 
  3327  1F49                     	;# 
  3328  1F4A                     	;# 
  3329  1F4E                     	;# 
  3330  1F4F                     	;# 
  3331  1F50                     	;# 
  3332  1F51                     	;# 
  3333  1F52                     	;# 
  3334  1F53                     	;# 
  3335  1F54                     	;# 
  3336  1F55                     	;# 
  3337  1F59                     	;# 
  3338  1F5A                     	;# 
  3339  1F5B                     	;# 
  3340  1F5C                     	;# 
  3341  1F5D                     	;# 
  3342  1F64                     	;# 
  3343  1F65                     	;# 
  3344  1F66                     	;# 
  3345  1F67                     	;# 
  3346  1F68                     	;# 
  3347  1F69                     	;# 
  3348  1F6A                     	;# 
  3349  1F6B                     	;# 
  3350  1FE4                     	;# 
  3351  1FE5                     	;# 
  3352  1FE6                     	;# 
  3353  1FE7                     	;# 
  3354  1FE8                     	;# 
  3355  1FE8                     	;# 
  3356  1FE9                     	;# 
  3357  1FEA                     	;# 
  3358  1FEB                     	;# 
  3359  1FED                     	;# 
  3360  1FEE                     	;# 
  3361  1FEF                     	;# 
  3362  0000                     	;# 
  3363  0001                     	;# 
  3364  0002                     	;# 
  3365  0003                     	;# 
  3366  0004                     	;# 
  3367  0005                     	;# 
  3368  0006                     	;# 
  3369  0007                     	;# 
  3370  0008                     	;# 
  3371  0009                     	;# 
  3372  000A                     	;# 
  3373  000B                     	;# 
  3374  000C                     	;# 
  3375  000D                     	;# 
  3376  000E                     	;# 
  3377  000F                     	;# 
  3378  0010                     	;# 
  3379  0012                     	;# 
  3380  0013                     	;# 
  3381  0014                     	;# 
  3382  0015                     	;# 
  3383  0016                     	;# 
  3384  0018                     	;# 
  3385  0019                     	;# 
  3386  001A                     	;# 
  3387  001B                     	;# 
  3388  001C                     	;# 
  3389  009B                     	;# 
  3390  009B                     	;# 
  3391  009C                     	;# 
  3392  009D                     	;# 
  3393  009E                     	;# 
  3394  009F                     	;# 
  3395  0119                     	;# 
  3396  0119                     	;# 
  3397  0119                     	;# 
  3398  011A                     	;# 
  3399  011A                     	;# 
  3400  011A                     	;# 
  3401  011B                     	;# 
  3402  011B                     	;# 
  3403  011B                     	;# 
  3404  011B                     	;# 
  3405  011B                     	;# 
  3406  011C                     	;# 
  3407  011C                     	;# 
  3408  011C                     	;# 
  3409  011D                     	;# 
  3410  011D                     	;# 
  3411  011D                     	;# 
  3412  011E                     	;# 
  3413  011E                     	;# 
  3414  011E                     	;# 
  3415  011F                     	;# 
  3416  011F                     	;# 
  3417  011F                     	;# 
  3418  011F                     	;# 
  3419  011F                     	;# 
  3420  018C                     	;# 
  3421  018D                     	;# 
  3422  018E                     	;# 
  3423  018F                     	;# 
  3424  0190                     	;# 
  3425  0191                     	;# 
  3426  0192                     	;# 
  3427  0196                     	;# 
  3428  0197                     	;# 
  3429  0198                     	;# 
  3430  0199                     	;# 
  3431  019A                     	;# 
  3432  019B                     	;# 
  3433  019C                     	;# 
  3434  020C                     	;# 
  3435  020C                     	;# 
  3436  020D                     	;# 
  3437  020E                     	;# 
  3438  020F                     	;# 
  3439  020F                     	;# 
  3440  0210                     	;# 
  3441  0210                     	;# 
  3442  0211                     	;# 
  3443  0211                     	;# 
  3444  028C                     	;# 
  3445  028C                     	;# 
  3446  028D                     	;# 
  3447  028D                     	;# 
  3448  028E                     	;# 
  3449  028F                     	;# 
  3450  0290                     	;# 
  3451  0291                     	;# 
  3452  030C                     	;# 
  3453  030C                     	;# 
  3454  030D                     	;# 
  3455  030E                     	;# 
  3456  030F                     	;# 
  3457  0310                     	;# 
  3458  0310                     	;# 
  3459  0311                     	;# 
  3460  0312                     	;# 
  3461  0313                     	;# 
  3462  0314                     	;# 
  3463  0315                     	;# 
  3464  0316                     	;# 
  3465  0318                     	;# 
  3466  0319                     	;# 
  3467  031A                     	;# 
  3468  031C                     	;# 
  3469  031D                     	;# 
  3470  031E                     	;# 
  3471  038C                     	;# 
  3472  038D                     	;# 
  3473  038E                     	;# 
  3474  058C                     	;# 
  3475  058C                     	;# 
  3476  058D                     	;# 
  3477  058E                     	;# 
  3478  058F                     	;# 
  3479  058F                     	;# 
  3480  0590                     	;# 
  3481  0591                     	;# 
  3482  0592                     	;# 
  3483  0593                     	;# 
  3484  059C                     	;# 
  3485  059C                     	;# 
  3486  059D                     	;# 
  3487  059D                     	;# 
  3488  059E                     	;# 
  3489  059F                     	;# 
  3490  060C                     	;# 
  3491  060D                     	;# 
  3492  060E                     	;# 
  3493  060F                     	;# 
  3494  0610                     	;# 
  3495  0611                     	;# 
  3496  0612                     	;# 
  3497  0613                     	;# 
  3498  0614                     	;# 
  3499  070C                     	;# 
  3500  070D                     	;# 
  3501  070E                     	;# 
  3502  070F                     	;# 
  3503  0710                     	;# 
  3504  0711                     	;# 
  3505  0712                     	;# 
  3506  0713                     	;# 
  3507  0716                     	;# 
  3508  0717                     	;# 
  3509  0718                     	;# 
  3510  0719                     	;# 
  3511  071A                     	;# 
  3512  071B                     	;# 
  3513  071C                     	;# 
  3514  071D                     	;# 
  3515  0796                     	;# 
  3516  0797                     	;# 
  3517  0798                     	;# 
  3518  0799                     	;# 
  3519  079A                     	;# 
  3520  079B                     	;# 
  3521  080C                     	;# 
  3522  080D                     	;# 
  3523  080E                     	;# 
  3524  080F                     	;# 
  3525  0810                     	;# 
  3526  0811                     	;# 
  3527  0812                     	;# 
  3528  0813                     	;# 
  3529  0814                     	;# 
  3530  081A                     	;# 
  3531  081A                     	;# 
  3532  081B                     	;# 
  3533  081C                     	;# 
  3534  081C                     	;# 
  3535  081D                     	;# 
  3536  081E                     	;# 
  3537  081F                     	;# 
  3538  088C                     	;# 
  3539  088D                     	;# 
  3540  088E                     	;# 
  3541  088F                     	;# 
  3542  0890                     	;# 
  3543  0891                     	;# 
  3544  0892                     	;# 
  3545  0893                     	;# 
  3546  0895                     	;# 
  3547  0896                     	;# 
  3548  090C                     	;# 
  3549  090E                     	;# 
  3550  090F                     	;# 
  3551  091F                     	;# 
  3552  098F                     	;# 
  3553  098F                     	;# 
  3554  0990                     	;# 
  3555  0991                     	;# 
  3556  0992                     	;# 
  3557  0993                     	;# 
  3558  0994                     	;# 
  3559  0995                     	;# 
  3560  0996                     	;# 
  3561  0997                     	;# 
  3562  0A19                     	;# 
  3563  0A19                     	;# 
  3564  0A1A                     	;# 
  3565  0A1A                     	;# 
  3566  0A1B                     	;# 
  3567  0A1B                     	;# 
  3568  0A1B                     	;# 
  3569  0A1C                     	;# 
  3570  0A1C                     	;# 
  3571  0A1D                     	;# 
  3572  0A1D                     	;# 
  3573  0A1E                     	;# 
  3574  0A1E                     	;# 
  3575  0A1F                     	;# 
  3576  0A1F                     	;# 
  3577  0A1F                     	;# 
  3578  1E0F                     	;# 
  3579  1E10                     	;# 
  3580  1E11                     	;# 
  3581  1E12                     	;# 
  3582  1E13                     	;# 
  3583  1E14                     	;# 
  3584  1E15                     	;# 
  3585  1E16                     	;# 
  3586  1E17                     	;# 
  3587  1E18                     	;# 
  3588  1E19                     	;# 
  3589  1E1A                     	;# 
  3590  1E1B                     	;# 
  3591  1E1C                     	;# 
  3592  1E1D                     	;# 
  3593  1E1E                     	;# 
  3594  1E1F                     	;# 
  3595  1E20                     	;# 
  3596  1E21                     	;# 
  3597  1E22                     	;# 
  3598  1E23                     	;# 
  3599  1E24                     	;# 
  3600  1E25                     	;# 
  3601  1E26                     	;# 
  3602  1E27                     	;# 
  3603  1E28                     	;# 
  3604  1E29                     	;# 
  3605  1E2A                     	;# 
  3606  1E2B                     	;# 
  3607  1E2C                     	;# 
  3608  1E2D                     	;# 
  3609  1E2E                     	;# 
  3610  1E2F                     	;# 
  3611  1E30                     	;# 
  3612  1E31                     	;# 
  3613  1E32                     	;# 
  3614  1E33                     	;# 
  3615  1E34                     	;# 
  3616  1E35                     	;# 
  3617  1E36                     	;# 
  3618  1E37                     	;# 
  3619  1E8F                     	;# 
  3620  1E90                     	;# 
  3621  1E91                     	;# 
  3622  1E92                     	;# 
  3623  1E93                     	;# 
  3624  1E9C                     	;# 
  3625  1EA1                     	;# 
  3626  1EA2                     	;# 
  3627  1EB1                     	;# 
  3628  1EBB                     	;# 
  3629  1EBC                     	;# 
  3630  1EBD                     	;# 
  3631  1EBE                     	;# 
  3632  1EC3                     	;# 
  3633  1EC5                     	;# 
  3634  1EC6                     	;# 
  3635  1EC7                     	;# 
  3636  1EC8                     	;# 
  3637  1EC9                     	;# 
  3638  1ECA                     	;# 
  3639  1ECB                     	;# 
  3640  1ECC                     	;# 
  3641  1ECD                     	;# 
  3642  1ECE                     	;# 
  3643  1F10                     	;# 
  3644  1F11                     	;# 
  3645  1F12                     	;# 
  3646  1F13                     	;# 
  3647  1F14                     	;# 
  3648  1F15                     	;# 
  3649  1F16                     	;# 
  3650  1F17                     	;# 
  3651  1F18                     	;# 
  3652  1F19                     	;# 
  3653  1F1A                     	;# 
  3654  1F1B                     	;# 
  3655  1F1C                     	;# 
  3656  1F1D                     	;# 
  3657  1F1E                     	;# 
  3658  1F1F                     	;# 
  3659  1F20                     	;# 
  3660  1F21                     	;# 
  3661  1F22                     	;# 
  3662  1F23                     	;# 
  3663  1F24                     	;# 
  3664  1F25                     	;# 
  3665  1F26                     	;# 
  3666  1F27                     	;# 
  3667  1F28                     	;# 
  3668  1F29                     	;# 
  3669  1F2A                     	;# 
  3670  1F2B                     	;# 
  3671  1F2C                     	;# 
  3672  1F2D                     	;# 
  3673  1F2E                     	;# 
  3674  1F2F                     	;# 
  3675  1F30                     	;# 
  3676  1F31                     	;# 
  3677  1F32                     	;# 
  3678  1F38                     	;# 
  3679  1F39                     	;# 
  3680  1F3A                     	;# 
  3681  1F3B                     	;# 
  3682  1F3C                     	;# 
  3683  1F3D                     	;# 
  3684  1F3E                     	;# 
  3685  1F3F                     	;# 
  3686  1F43                     	;# 
  3687  1F44                     	;# 
  3688  1F45                     	;# 
  3689  1F46                     	;# 
  3690  1F47                     	;# 
  3691  1F48                     	;# 
  3692  1F49                     	;# 
  3693  1F4A                     	;# 
  3694  1F4E                     	;# 
  3695  1F4F                     	;# 
  3696  1F50                     	;# 
  3697  1F51                     	;# 
  3698  1F52                     	;# 
  3699  1F53                     	;# 
  3700  1F54                     	;# 
  3701  1F55                     	;# 
  3702  1F59                     	;# 
  3703  1F5A                     	;# 
  3704  1F5B                     	;# 
  3705  1F5C                     	;# 
  3706  1F5D                     	;# 
  3707  1F64                     	;# 
  3708  1F65                     	;# 
  3709  1F66                     	;# 
  3710  1F67                     	;# 
  3711  1F68                     	;# 
  3712  1F69                     	;# 
  3713  1F6A                     	;# 
  3714  1F6B                     	;# 
  3715  1FE4                     	;# 
  3716  1FE5                     	;# 
  3717  1FE6                     	;# 
  3718  1FE7                     	;# 
  3719  1FE8                     	;# 
  3720  1FE8                     	;# 
  3721  1FE9                     	;# 
  3722  1FEA                     	;# 
  3723  1FEB                     	;# 
  3724  1FED                     	;# 
  3725  1FEE                     	;# 
  3726  1FEF                     	;# 
  3727  0000                     	;# 
  3728  0001                     	;# 
  3729  0002                     	;# 
  3730  0003                     	;# 
  3731  0004                     	;# 
  3732  0005                     	;# 
  3733  0006                     	;# 
  3734  0007                     	;# 
  3735  0008                     	;# 
  3736  0009                     	;# 
  3737  000A                     	;# 
  3738  000B                     	;# 
  3739  000C                     	;# 
  3740  000D                     	;# 
  3741  000E                     	;# 
  3742  000F                     	;# 
  3743  0010                     	;# 
  3744  0012                     	;# 
  3745  0013                     	;# 
  3746  0014                     	;# 
  3747  0015                     	;# 
  3748  0016                     	;# 
  3749  0018                     	;# 
  3750  0019                     	;# 
  3751  001A                     	;# 
  3752  001B                     	;# 
  3753  001C                     	;# 
  3754  009B                     	;# 
  3755  009B                     	;# 
  3756  009C                     	;# 
  3757  009D                     	;# 
  3758  009E                     	;# 
  3759  009F                     	;# 
  3760  0119                     	;# 
  3761  0119                     	;# 
  3762  0119                     	;# 
  3763  011A                     	;# 
  3764  011A                     	;# 
  3765  011A                     	;# 
  3766  011B                     	;# 
  3767  011B                     	;# 
  3768  011B                     	;# 
  3769  011B                     	;# 
  3770  011B                     	;# 
  3771  011C                     	;# 
  3772  011C                     	;# 
  3773  011C                     	;# 
  3774  011D                     	;# 
  3775  011D                     	;# 
  3776  011D                     	;# 
  3777  011E                     	;# 
  3778  011E                     	;# 
  3779  011E                     	;# 
  3780  011F                     	;# 
  3781  011F                     	;# 
  3782  011F                     	;# 
  3783  011F                     	;# 
  3784  011F                     	;# 
  3785  018C                     	;# 
  3786  018D                     	;# 
  3787  018E                     	;# 
  3788  018F                     	;# 
  3789  0190                     	;# 
  3790  0191                     	;# 
  3791  0192                     	;# 
  3792  0196                     	;# 
  3793  0197                     	;# 
  3794  0198                     	;# 
  3795  0199                     	;# 
  3796  019A                     	;# 
  3797  019B                     	;# 
  3798  019C                     	;# 
  3799  020C                     	;# 
  3800  020C                     	;# 
  3801  020D                     	;# 
  3802  020E                     	;# 
  3803  020F                     	;# 
  3804  020F                     	;# 
  3805  0210                     	;# 
  3806  0210                     	;# 
  3807  0211                     	;# 
  3808  0211                     	;# 
  3809  028C                     	;# 
  3810  028C                     	;# 
  3811  028D                     	;# 
  3812  028D                     	;# 
  3813  028E                     	;# 
  3814  028F                     	;# 
  3815  0290                     	;# 
  3816  0291                     	;# 
  3817  030C                     	;# 
  3818  030C                     	;# 
  3819  030D                     	;# 
  3820  030E                     	;# 
  3821  030F                     	;# 
  3822  0310                     	;# 
  3823  0310                     	;# 
  3824  0311                     	;# 
  3825  0312                     	;# 
  3826  0313                     	;# 
  3827  0314                     	;# 
  3828  0315                     	;# 
  3829  0316                     	;# 
  3830  0318                     	;# 
  3831  0319                     	;# 
  3832  031A                     	;# 
  3833  031C                     	;# 
  3834  031D                     	;# 
  3835  031E                     	;# 
  3836  038C                     	;# 
  3837  038D                     	;# 
  3838  038E                     	;# 
  3839  058C                     	;# 
  3840  058C                     	;# 
  3841  058D                     	;# 
  3842  058E                     	;# 
  3843  058F                     	;# 
  3844  058F                     	;# 
  3845  0590                     	;# 
  3846  0591                     	;# 
  3847  0592                     	;# 
  3848  0593                     	;# 
  3849  059C                     	;# 
  3850  059C                     	;# 
  3851  059D                     	;# 
  3852  059D                     	;# 
  3853  059E                     	;# 
  3854  059F                     	;# 
  3855  060C                     	;# 
  3856  060D                     	;# 
  3857  060E                     	;# 
  3858  060F                     	;# 
  3859  0610                     	;# 
  3860  0611                     	;# 
  3861  0612                     	;# 
  3862  0613                     	;# 
  3863  0614                     	;# 
  3864  070C                     	;# 
  3865  070D                     	;# 
  3866  070E                     	;# 
  3867  070F                     	;# 
  3868  0710                     	;# 
  3869  0711                     	;# 
  3870  0712                     	;# 
  3871  0713                     	;# 
  3872  0716                     	;# 
  3873  0717                     	;# 
  3874  0718                     	;# 
  3875  0719                     	;# 
  3876  071A                     	;# 
  3877  071B                     	;# 
  3878  071C                     	;# 
  3879  071D                     	;# 
  3880  0796                     	;# 
  3881  0797                     	;# 
  3882  0798                     	;# 
  3883  0799                     	;# 
  3884  079A                     	;# 
  3885  079B                     	;# 
  3886  080C                     	;# 
  3887  080D                     	;# 
  3888  080E                     	;# 
  3889  080F                     	;# 
  3890  0810                     	;# 
  3891  0811                     	;# 
  3892  0812                     	;# 
  3893  0813                     	;# 
  3894  0814                     	;# 
  3895  081A                     	;# 
  3896  081A                     	;# 
  3897  081B                     	;# 
  3898  081C                     	;# 
  3899  081C                     	;# 
  3900  081D                     	;# 
  3901  081E                     	;# 
  3902  081F                     	;# 
  3903  088C                     	;# 
  3904  088D                     	;# 
  3905  088E                     	;# 
  3906  088F                     	;# 
  3907  0890                     	;# 
  3908  0891                     	;# 
  3909  0892                     	;# 
  3910  0893                     	;# 
  3911  0895                     	;# 
  3912  0896                     	;# 
  3913  090C                     	;# 
  3914  090E                     	;# 
  3915  090F                     	;# 
  3916  091F                     	;# 
  3917  098F                     	;# 
  3918  098F                     	;# 
  3919  0990                     	;# 
  3920  0991                     	;# 
  3921  0992                     	;# 
  3922  0993                     	;# 
  3923  0994                     	;# 
  3924  0995                     	;# 
  3925  0996                     	;# 
  3926  0997                     	;# 
  3927  0A19                     	;# 
  3928  0A19                     	;# 
  3929  0A1A                     	;# 
  3930  0A1A                     	;# 
  3931  0A1B                     	;# 
  3932  0A1B                     	;# 
  3933  0A1B                     	;# 
  3934  0A1C                     	;# 
  3935  0A1C                     	;# 
  3936  0A1D                     	;# 
  3937  0A1D                     	;# 
  3938  0A1E                     	;# 
  3939  0A1E                     	;# 
  3940  0A1F                     	;# 
  3941  0A1F                     	;# 
  3942  0A1F                     	;# 
  3943  1E0F                     	;# 
  3944  1E10                     	;# 
  3945  1E11                     	;# 
  3946  1E12                     	;# 
  3947  1E13                     	;# 
  3948  1E14                     	;# 
  3949  1E15                     	;# 
  3950  1E16                     	;# 
  3951  1E17                     	;# 
  3952  1E18                     	;# 
  3953  1E19                     	;# 
  3954  1E1A                     	;# 
  3955  1E1B                     	;# 
  3956  1E1C                     	;# 
  3957  1E1D                     	;# 
  3958  1E1E                     	;# 
  3959  1E1F                     	;# 
  3960  1E20                     	;# 
  3961  1E21                     	;# 
  3962  1E22                     	;# 
  3963  1E23                     	;# 
  3964  1E24                     	;# 
  3965  1E25                     	;# 
  3966  1E26                     	;# 
  3967  1E27                     	;# 
  3968  1E28                     	;# 
  3969  1E29                     	;# 
  3970  1E2A                     	;# 
  3971  1E2B                     	;# 
  3972  1E2C                     	;# 
  3973  1E2D                     	;# 
  3974  1E2E                     	;# 
  3975  1E2F                     	;# 
  3976  1E30                     	;# 
  3977  1E31                     	;# 
  3978  1E32                     	;# 
  3979  1E33                     	;# 
  3980  1E34                     	;# 
  3981  1E35                     	;# 
  3982  1E36                     	;# 
  3983  1E37                     	;# 
  3984  1E8F                     	;# 
  3985  1E90                     	;# 
  3986  1E91                     	;# 
  3987  1E92                     	;# 
  3988  1E93                     	;# 
  3989  1E9C                     	;# 
  3990  1EA1                     	;# 
  3991  1EA2                     	;# 
  3992  1EB1                     	;# 
  3993  1EBB                     	;# 
  3994  1EBC                     	;# 
  3995  1EBD                     	;# 
  3996  1EBE                     	;# 
  3997  1EC3                     	;# 
  3998  1EC5                     	;# 
  3999  1EC6                     	;# 
  4000  1EC7                     	;# 
  4001  1EC8                     	;# 
  4002  1EC9                     	;# 
  4003  1ECA                     	;# 
  4004  1ECB                     	;# 
  4005  1ECC                     	;# 
  4006  1ECD                     	;# 
  4007  1ECE                     	;# 
  4008  1F10                     	;# 
  4009  1F11                     	;# 
  4010  1F12                     	;# 
  4011  1F13                     	;# 
  4012  1F14                     	;# 
  4013  1F15                     	;# 
  4014  1F16                     	;# 
  4015  1F17                     	;# 
  4016  1F18                     	;# 
  4017  1F19                     	;# 
  4018  1F1A                     	;# 
  4019  1F1B                     	;# 
  4020  1F1C                     	;# 
  4021  1F1D                     	;# 
  4022  1F1E                     	;# 
  4023  1F1F                     	;# 
  4024  1F20                     	;# 
  4025  1F21                     	;# 
  4026  1F22                     	;# 
  4027  1F23                     	;# 
  4028  1F24                     	;# 
  4029  1F25                     	;# 
  4030  1F26                     	;# 
  4031  1F27                     	;# 
  4032  1F28                     	;# 
  4033  1F29                     	;# 
  4034  1F2A                     	;# 
  4035  1F2B                     	;# 
  4036  1F2C                     	;# 
  4037  1F2D                     	;# 
  4038  1F2E                     	;# 
  4039  1F2F                     	;# 
  4040  1F30                     	;# 
  4041  1F31                     	;# 
  4042  1F32                     	;# 
  4043  1F38                     	;# 
  4044  1F39                     	;# 
  4045  1F3A                     	;# 
  4046  1F3B                     	;# 
  4047  1F3C                     	;# 
  4048  1F3D                     	;# 
  4049  1F3E                     	;# 
  4050  1F3F                     	;# 
  4051  1F43                     	;# 
  4052  1F44                     	;# 
  4053  1F45                     	;# 
  4054  1F46                     	;# 
  4055  1F47                     	;# 
  4056  1F48                     	;# 
  4057  1F49                     	;# 
  4058  1F4A                     	;# 
  4059  1F4E                     	;# 
  4060  1F4F                     	;# 
  4061  1F50                     	;# 
  4062  1F51                     	;# 
  4063  1F52                     	;# 
  4064  1F53                     	;# 
  4065  1F54                     	;# 
  4066  1F55                     	;# 
  4067  1F59                     	;# 
  4068  1F5A                     	;# 
  4069  1F5B                     	;# 
  4070  1F5C                     	;# 
  4071  1F5D                     	;# 
  4072  1F64                     	;# 
  4073  1F65                     	;# 
  4074  1F66                     	;# 
  4075  1F67                     	;# 
  4076  1F68                     	;# 
  4077  1F69                     	;# 
  4078  1F6A                     	;# 
  4079  1F6B                     	;# 
  4080  1FE4                     	;# 
  4081  1FE5                     	;# 
  4082  1FE6                     	;# 
  4083  1FE7                     	;# 
  4084  1FE8                     	;# 
  4085  1FE8                     	;# 
  4086  1FE9                     	;# 
  4087  1FEA                     	;# 
  4088  1FEB                     	;# 
  4089  1FED                     	;# 
  4090  1FEE                     	;# 
  4091  1FEF                     	;# 
  4092  0000                     	;# 
  4093  0001                     	;# 
  4094  0002                     	;# 
  4095  0003                     	;# 
  4096  0004                     	;# 
  4097  0005                     	;# 
  4098  0006                     	;# 
  4099  0007                     	;# 
  4100  0008                     	;# 
  4101  0009                     	;# 
  4102  000A                     	;# 
  4103  000B                     	;# 
  4104  000C                     	;# 
  4105  000D                     	;# 
  4106  000E                     	;# 
  4107  000F                     	;# 
  4108  0010                     	;# 
  4109  0012                     	;# 
  4110  0013                     	;# 
  4111  0014                     	;# 
  4112  0015                     	;# 
  4113  0016                     	;# 
  4114  0018                     	;# 
  4115  0019                     	;# 
  4116  001A                     	;# 
  4117  001B                     	;# 
  4118  001C                     	;# 
  4119  009B                     	;# 
  4120  009B                     	;# 
  4121  009C                     	;# 
  4122  009D                     	;# 
  4123  009E                     	;# 
  4124  009F                     	;# 
  4125  0119                     	;# 
  4126  0119                     	;# 
  4127  0119                     	;# 
  4128  011A                     	;# 
  4129  011A                     	;# 
  4130  011A                     	;# 
  4131  011B                     	;# 
  4132  011B                     	;# 
  4133  011B                     	;# 
  4134  011B                     	;# 
  4135  011B                     	;# 
  4136  011C                     	;# 
  4137  011C                     	;# 
  4138  011C                     	;# 
  4139  011D                     	;# 
  4140  011D                     	;# 
  4141  011D                     	;# 
  4142  011E                     	;# 
  4143  011E                     	;# 
  4144  011E                     	;# 
  4145  011F                     	;# 
  4146  011F                     	;# 
  4147  011F                     	;# 
  4148  011F                     	;# 
  4149  011F                     	;# 
  4150  018C                     	;# 
  4151  018D                     	;# 
  4152  018E                     	;# 
  4153  018F                     	;# 
  4154  0190                     	;# 
  4155  0191                     	;# 
  4156  0192                     	;# 
  4157  0196                     	;# 
  4158  0197                     	;# 
  4159  0198                     	;# 
  4160  0199                     	;# 
  4161  019A                     	;# 
  4162  019B                     	;# 
  4163  019C                     	;# 
  4164  020C                     	;# 
  4165  020C                     	;# 
  4166  020D                     	;# 
  4167  020E                     	;# 
  4168  020F                     	;# 
  4169  020F                     	;# 
  4170  0210                     	;# 
  4171  0210                     	;# 
  4172  0211                     	;# 
  4173  0211                     	;# 
  4174  028C                     	;# 
  4175  028C                     	;# 
  4176  028D                     	;# 
  4177  028D                     	;# 
  4178  028E                     	;# 
  4179  028F                     	;# 
  4180  0290                     	;# 
  4181  0291                     	;# 
  4182  030C                     	;# 
  4183  030C                     	;# 
  4184  030D                     	;# 
  4185  030E                     	;# 
  4186  030F                     	;# 
  4187  0310                     	;# 
  4188  0310                     	;# 
  4189  0311                     	;# 
  4190  0312                     	;# 
  4191  0313                     	;# 
  4192  0314                     	;# 
  4193  0315                     	;# 
  4194  0316                     	;# 
  4195  0318                     	;# 
  4196  0319                     	;# 
  4197  031A                     	;# 
  4198  031C                     	;# 
  4199  031D                     	;# 
  4200  031E                     	;# 
  4201  038C                     	;# 
  4202  038D                     	;# 
  4203  038E                     	;# 
  4204  058C                     	;# 
  4205  058C                     	;# 
  4206  058D                     	;# 
  4207  058E                     	;# 
  4208  058F                     	;# 
  4209  058F                     	;# 
  4210  0590                     	;# 
  4211  0591                     	;# 
  4212  0592                     	;# 
  4213  0593                     	;# 
  4214  059C                     	;# 
  4215  059C                     	;# 
  4216  059D                     	;# 
  4217  059D                     	;# 
  4218  059E                     	;# 
  4219  059F                     	;# 
  4220  060C                     	;# 
  4221  060D                     	;# 
  4222  060E                     	;# 
  4223  060F                     	;# 
  4224  0610                     	;# 
  4225  0611                     	;# 
  4226  0612                     	;# 
  4227  0613                     	;# 
  4228  0614                     	;# 
  4229  070C                     	;# 
  4230  070D                     	;# 
  4231  070E                     	;# 
  4232  070F                     	;# 
  4233  0710                     	;# 
  4234  0711                     	;# 
  4235  0712                     	;# 
  4236  0713                     	;# 
  4237  0716                     	;# 
  4238  0717                     	;# 
  4239  0718                     	;# 
  4240  0719                     	;# 
  4241  071A                     	;# 
  4242  071B                     	;# 
  4243  071C                     	;# 
  4244  071D                     	;# 
  4245  0796                     	;# 
  4246  0797                     	;# 
  4247  0798                     	;# 
  4248  0799                     	;# 
  4249  079A                     	;# 
  4250  079B                     	;# 
  4251  080C                     	;# 
  4252  080D                     	;# 
  4253  080E                     	;# 
  4254  080F                     	;# 
  4255  0810                     	;# 
  4256  0811                     	;# 
  4257  0812                     	;# 
  4258  0813                     	;# 
  4259  0814                     	;# 
  4260  081A                     	;# 
  4261  081A                     	;# 
  4262  081B                     	;# 
  4263  081C                     	;# 
  4264  081C                     	;# 
  4265  081D                     	;# 
  4266  081E                     	;# 
  4267  081F                     	;# 
  4268  088C                     	;# 
  4269  088D                     	;# 
  4270  088E                     	;# 
  4271  088F                     	;# 
  4272  0890                     	;# 
  4273  0891                     	;# 
  4274  0892                     	;# 
  4275  0893                     	;# 
  4276  0895                     	;# 
  4277  0896                     	;# 
  4278  090C                     	;# 
  4279  090E                     	;# 
  4280  090F                     	;# 
  4281  091F                     	;# 
  4282  098F                     	;# 
  4283  098F                     	;# 
  4284  0990                     	;# 
  4285  0991                     	;# 
  4286  0992                     	;# 
  4287  0993                     	;# 
  4288  0994                     	;# 
  4289  0995                     	;# 
  4290  0996                     	;# 
  4291  0997                     	;# 
  4292  0A19                     	;# 
  4293  0A19                     	;# 
  4294  0A1A                     	;# 
  4295  0A1A                     	;# 
  4296  0A1B                     	;# 
  4297  0A1B                     	;# 
  4298  0A1B                     	;# 
  4299  0A1C                     	;# 
  4300  0A1C                     	;# 
  4301  0A1D                     	;# 
  4302  0A1D                     	;# 
  4303  0A1E                     	;# 
  4304  0A1E                     	;# 
  4305  0A1F                     	;# 
  4306  0A1F                     	;# 
  4307  0A1F                     	;# 
  4308  1E0F                     	;# 
  4309  1E10                     	;# 
  4310  1E11                     	;# 
  4311  1E12                     	;# 
  4312  1E13                     	;# 
  4313  1E14                     	;# 
  4314  1E15                     	;# 
  4315  1E16                     	;# 
  4316  1E17                     	;# 
  4317  1E18                     	;# 
  4318  1E19                     	;# 
  4319  1E1A                     	;# 
  4320  1E1B                     	;# 
  4321  1E1C                     	;# 
  4322  1E1D                     	;# 
  4323  1E1E                     	;# 
  4324  1E1F                     	;# 
  4325  1E20                     	;# 
  4326  1E21                     	;# 
  4327  1E22                     	;# 
  4328  1E23                     	;# 
  4329  1E24                     	;# 
  4330  1E25                     	;# 
  4331  1E26                     	;# 
  4332  1E27                     	;# 
  4333  1E28                     	;# 
  4334  1E29                     	;# 
  4335  1E2A                     	;# 
  4336  1E2B                     	;# 
  4337  1E2C                     	;# 
  4338  1E2D                     	;# 
  4339  1E2E                     	;# 
  4340  1E2F                     	;# 
  4341  1E30                     	;# 
  4342  1E31                     	;# 
  4343  1E32                     	;# 
  4344  1E33                     	;# 
  4345  1E34                     	;# 
  4346  1E35                     	;# 
  4347  1E36                     	;# 
  4348  1E37                     	;# 
  4349  1E8F                     	;# 
  4350  1E90                     	;# 
  4351  1E91                     	;# 
  4352  1E92                     	;# 
  4353  1E93                     	;# 
  4354  1E9C                     	;# 
  4355  1EA1                     	;# 
  4356  1EA2                     	;# 
  4357  1EB1                     	;# 
  4358  1EBB                     	;# 
  4359  1EBC                     	;# 
  4360  1EBD                     	;# 
  4361  1EBE                     	;# 
  4362  1EC3                     	;# 
  4363  1EC5                     	;# 
  4364  1EC6                     	;# 
  4365  1EC7                     	;# 
  4366  1EC8                     	;# 
  4367  1EC9                     	;# 
  4368  1ECA                     	;# 
  4369  1ECB                     	;# 
  4370  1ECC                     	;# 
  4371  1ECD                     	;# 
  4372  1ECE                     	;# 
  4373  1F10                     	;# 
  4374  1F11                     	;# 
  4375  1F12                     	;# 
  4376  1F13                     	;# 
  4377  1F14                     	;# 
  4378  1F15                     	;# 
  4379  1F16                     	;# 
  4380  1F17                     	;# 
  4381  1F18                     	;# 
  4382  1F19                     	;# 
  4383  1F1A                     	;# 
  4384  1F1B                     	;# 
  4385  1F1C                     	;# 
  4386  1F1D                     	;# 
  4387  1F1E                     	;# 
  4388  1F1F                     	;# 
  4389  1F20                     	;# 
  4390  1F21                     	;# 
  4391  1F22                     	;# 
  4392  1F23                     	;# 
  4393  1F24                     	;# 
  4394  1F25                     	;# 
  4395  1F26                     	;# 
  4396  1F27                     	;# 
  4397  1F28                     	;# 
  4398  1F29                     	;# 
  4399  1F2A                     	;# 
  4400  1F2B                     	;# 
  4401  1F2C                     	;# 
  4402  1F2D                     	;# 
  4403  1F2E                     	;# 
  4404  1F2F                     	;# 
  4405  1F30                     	;# 
  4406  1F31                     	;# 
  4407  1F32                     	;# 
  4408  1F38                     	;# 
  4409  1F39                     	;# 
  4410  1F3A                     	;# 
  4411  1F3B                     	;# 
  4412  1F3C                     	;# 
  4413  1F3D                     	;# 
  4414  1F3E                     	;# 
  4415  1F3F                     	;# 
  4416  1F43                     	;# 
  4417  1F44                     	;# 
  4418  1F45                     	;# 
  4419  1F46                     	;# 
  4420  1F47                     	;# 
  4421  1F48                     	;# 
  4422  1F49                     	;# 
  4423  1F4A                     	;# 
  4424  1F4E                     	;# 
  4425  1F4F                     	;# 
  4426  1F50                     	;# 
  4427  1F51                     	;# 
  4428  1F52                     	;# 
  4429  1F53                     	;# 
  4430  1F54                     	;# 
  4431  1F55                     	;# 
  4432  1F59                     	;# 
  4433  1F5A                     	;# 
  4434  1F5B                     	;# 
  4435  1F5C                     	;# 
  4436  1F5D                     	;# 
  4437  1F64                     	;# 
  4438  1F65                     	;# 
  4439  1F66                     	;# 
  4440  1F67                     	;# 
  4441  1F68                     	;# 
  4442  1F69                     	;# 
  4443  1F6A                     	;# 
  4444  1F6B                     	;# 
  4445  1FE4                     	;# 
  4446  1FE5                     	;# 
  4447  1FE6                     	;# 
  4448  1FE7                     	;# 
  4449  1FE8                     	;# 
  4450  1FE8                     	;# 
  4451  1FE9                     	;# 
  4452  1FEA                     	;# 
  4453  1FEB                     	;# 
  4454  1FED                     	;# 
  4455  1FEE                     	;# 
  4456  1FEF                     	;_sb_data
  4457                           
  4458                           	psect	idataBANK0
  4459  0000                     __pidataBANK0:	
  4460                           
  4461                           	psect	stringtext1
  4462  1066                     __pstringtext1:	
  4463  1066                     _dpowers:	
  4464  1066  3401               	retlw	1
  4465  1067  3400               	retlw	0
  4466  1068  340A               	retlw	10
  4467  1069  3400               	retlw	0
  4468  106A  3464               	retlw	100
  4469  106B  3400               	retlw	0
  4470  106C  34E8               	retlw	232
  4471  106D  3403               	retlw	3
  4472  106E  3410               	retlw	16
  4473  106F  3427               	retlw	39
  4474  1070                     __end_of_dpowers:	
  4475                           
  4476                           	psect	nvBANK1
  4477  00D9                     __pnvBANK1:	
  4478  00D9                     _TMR2_InterruptHandler:	
  4479  00D9                     	ds	2
  4480  00DB                     _EUSART2_RxDefaultInterruptHandler:	
  4481  00DB                     	ds	2
  4482  00DD                     _EUSART2_TxDefaultInterruptHandler:	
  4483  00DD                     	ds	2
  4484  00DF                     _EUSART1_RxDefaultInterruptHandler:	
  4485  00DF                     	ds	2
  4486  00E1                     _EUSART1_TxDefaultInterruptHandler:	
  4487  00E1                     	ds	2
  4488  00E3                     _eusart2TxBufferRemaining:	
  4489  00E3                     	ds	1
  4490  00E4                     _eusart1TxBufferRemaining:	
  4491  00E4                     	ds	1
  4492  000E                     _PORTCbits	set	14
  4493  000D                     _PORTBbits	set	13
  4494  0018                     _LATAbits	set	24
  4495  000B                     _INTCONbits	set	11
  4496  0015                     _TRISD	set	21
  4497  0014                     _TRISC	set	20
  4498  0013                     _TRISB	set	19
  4499  0012                     _TRISA	set	18
  4500  0016                     _TRISE	set	22
  4501  001A                     _LATC	set	26
  4502  0019                     _LATB	set	25
  4503  0018                     _LATA	set	24
  4504  001B                     _LATD	set	27
  4505  001C                     _LATE	set	28
  4506  009D                     _ADCON0bits	set	157
  4507  009C                     _ADRESH	set	156
  4508  009B                     _ADRESL	set	155
  4509  009E                     _ADCON1	set	158
  4510  009D                     _ADCON0	set	157
  4511  0119                     _RC1REG	set	281
  4512  011D                     _RC1STAbits	set	285
  4513  011A                     _TX1REG	set	282
  4514  011C                     _SP1BRGH	set	284
  4515  011B                     _SP1BRGL	set	283
  4516  011E                     _TX1STA	set	286
  4517  011D                     _RC1STA	set	285
  4518  011F                     _BAUD1CON	set	287
  4519  028E                     _T2CONbits	set	654
  4520  028E                     _T2CON	set	654
  4521  028C                     _T2TMR	set	652
  4522  028D                     _T2PR	set	653
  4523  0291                     _T2RST	set	657
  4524  028F                     _T2HLT	set	655
  4525  0290                     _T2CLKCON	set	656
  4526  0710                     _PIR4bits	set	1808
  4527  071A                     _PIE4bits	set	1818
  4528  070F                     _PIR3bits	set	1807
  4529  0719                     _PIE3bits	set	1817
  4530  079B                     _PMD5	set	1947
  4531  079A                     _PMD4	set	1946
  4532  0799                     _PMD3	set	1945
  4533  0798                     _PMD2	set	1944
  4534  0797                     _PMD1	set	1943
  4535  0796                     _PMD0	set	1942
  4536  0892                     _OSCTUNE	set	2194
  4537  0890                     _OSCSTAT	set	2192
  4538  0893                     _OSCFRQ	set	2195
  4539  0891                     _OSCEN	set	2193
  4540  088F                     _OSCCON3	set	2191
  4541  088D                     _OSCCON1	set	2189
  4542  0A19                     _RC2REG	set	2585
  4543  0A1D                     _RC2STAbits	set	2589
  4544  0A1A                     _TX2REG	set	2586
  4545  0A1C                     _SP2BRGH	set	2588
  4546  0A1B                     _SP2BRGL	set	2587
  4547  0A1E                     _TX2STA	set	2590
  4548  0A1D                     _RC2STA	set	2589
  4549  0A1F                     _BAUD2CON	set	2591
  4550  1E9C                     _T2INPPSbits	set	7836
  4551  1ECB                     _RX1DTPPSbits	set	7883
  4552  1F26                     _RC6PPS	set	7974
  4553  1F1E                     _RB6PPS	set	7966
  4554  1F5B                     _ODCOND	set	8027
  4555  1F50                     _ODCONC	set	8016
  4556  1F45                     _ODCONB	set	8005
  4557  1F3A                     _ODCONA	set	7994
  4558  1F66                     _ODCONE	set	8038
  4559  1F4F                     _WPUC	set	8015
  4560  1F39                     _WPUA	set	7993
  4561  1F44                     _WPUB	set	8004
  4562  1F65                     _WPUE	set	8037
  4563  1F5A                     _WPUD	set	8026
  4564  1F38                     _ANSELA	set	7992
  4565  1F64                     _ANSELE	set	8036
  4566  1F43                     _ANSELB	set	8003
  4567  1F4E                     _ANSELC	set	8014
  4568  1F59                     _ANSELD	set	8025
  4569                           
  4570                           	psect	stringtext2
  4571  1000                     __pstringtext2:	
  4572  1000                     STR_3:	
  4573  1000  3423               	retlw	35	;'#'
  4574  1001  3431               	retlw	49	;'1'
  4575  1002  3420               	retlw	32	;' '
  4576  1003  3450               	retlw	80	;'P'
  4577  1004  3431               	retlw	49	;'1'
  4578  1005  3430               	retlw	48	;'0'
  4579  1006  3430               	retlw	48	;'0'
  4580  1007  3430               	retlw	48	;'0'
  4581  1008  3420               	retlw	32	;' '
  4582  1009  3423               	retlw	35	;'#'
  4583  100A  3432               	retlw	50	;'2'
  4584  100B  3420               	retlw	32	;' '
  4585  100C  3450               	retlw	80	;'P'
  4586  100D  3431               	retlw	49	;'1'
  4587  100E  3430               	retlw	48	;'0'
  4588  100F  3430               	retlw	48	;'0'
  4589  1010  3430               	retlw	48	;'0'
  4590  1011  3420               	retlw	32	;' '
  4591  1012  3423               	retlw	35	;'#'
  4592  1013  3433               	retlw	51	;'3'
  4593  1014  3420               	retlw	32	;' '
  4594  1015  3450               	retlw	80	;'P'
  4595  1016  3431               	retlw	49	;'1'
  4596  1017  3430               	retlw	48	;'0'
  4597  1018  3430               	retlw	48	;'0'
  4598  1019  3430               	retlw	48	;'0'
  4599  101A  3420               	retlw	32	;' '
  4600  101B  3423               	retlw	35	;'#'
  4601  101C  3434               	retlw	52	;'4'
  4602  101D  3420               	retlw	32	;' '
  4603  101E  3450               	retlw	80	;'P'
  4604  101F  3431               	retlw	49	;'1'
  4605  1020  3430               	retlw	48	;'0'
  4606  1021  3430               	retlw	48	;'0'
  4607  1022  3430               	retlw	48	;'0'
  4608  1023  3420               	retlw	32	;' '
  4609  1024  3423               	retlw	35	;'#'
  4610  1025  3435               	retlw	53	;'5'
  4611  1026  3420               	retlw	32	;' '
  4612  1027  3450               	retlw	80	;'P'
  4613  1028  3431               	retlw	49	;'1'
  4614  1029  3430               	retlw	48	;'0'
  4615  102A  3430               	retlw	48	;'0'
  4616  102B  3430               	retlw	48	;'0'
  4617  102C  3420               	retlw	32	;' '
  4618  102D  3454               	retlw	84	;'T'
  4619  102E  3438               	retlw	56	;'8'
  4620  102F  3430               	retlw	48	;'0'
  4621  1030  3430               	retlw	48	;'0'
  4622  1031  340D               	retlw	13
  4623  1032  3400               	retlw	0
  4624                           
  4625                           	psect	stringtext3
  4626  1033                     __pstringtext3:	
  4627  1033                     STR_4:	
  4628  1033  3423               	retlw	35	;'#'
  4629  1034  3431               	retlw	49	;'1'
  4630  1035  3420               	retlw	32	;' '
  4631  1036  3450               	retlw	80	;'P'
  4632  1037  3432               	retlw	50	;'2'
  4633  1038  3430               	retlw	48	;'0'
  4634  1039  3430               	retlw	48	;'0'
  4635  103A  3430               	retlw	48	;'0'
  4636  103B  3420               	retlw	32	;' '
  4637  103C  3423               	retlw	35	;'#'
  4638  103D  3432               	retlw	50	;'2'
  4639  103E  3420               	retlw	32	;' '
  4640  103F  3450               	retlw	80	;'P'
  4641  1040  3432               	retlw	50	;'2'
  4642  1041  3430               	retlw	48	;'0'
  4643  1042  3430               	retlw	48	;'0'
  4644  1043  3430               	retlw	48	;'0'
  4645  1044  3420               	retlw	32	;' '
  4646  1045  3423               	retlw	35	;'#'
  4647  1046  3433               	retlw	51	;'3'
  4648  1047  3420               	retlw	32	;' '
  4649  1048  3450               	retlw	80	;'P'
  4650  1049  3432               	retlw	50	;'2'
  4651  104A  3430               	retlw	48	;'0'
  4652  104B  3430               	retlw	48	;'0'
  4653  104C  3430               	retlw	48	;'0'
  4654  104D  3420               	retlw	32	;' '
  4655  104E  3423               	retlw	35	;'#'
  4656  104F  3434               	retlw	52	;'4'
  4657  1050  3420               	retlw	32	;' '
  4658  1051  3450               	retlw	80	;'P'
  4659  1052  3432               	retlw	50	;'2'
  4660  1053  3430               	retlw	48	;'0'
  4661  1054  3430               	retlw	48	;'0'
  4662  1055  3430               	retlw	48	;'0'
  4663  1056  3420               	retlw	32	;' '
  4664  1057  3423               	retlw	35	;'#'
  4665  1058  3435               	retlw	53	;'5'
  4666  1059  3420               	retlw	32	;' '
  4667  105A  3450               	retlw	80	;'P'
  4668  105B  3432               	retlw	50	;'2'
  4669  105C  3430               	retlw	48	;'0'
  4670  105D  3430               	retlw	48	;'0'
  4671  105E  3430               	retlw	48	;'0'
  4672  105F  3420               	retlw	32	;' '
  4673  1060  3454               	retlw	84	;'T'
  4674  1061  3438               	retlw	56	;'8'
  4675  1062  3430               	retlw	48	;'0'
  4676  1063  3430               	retlw	48	;'0'
  4677  1064  340D               	retlw	13
  4678  1065  3400               	retlw	0
  4679                           
  4680                           	psect	stringtext4
  4681  1070                     __pstringtext4:	
  4682  1070                     STR_1:	
  4683  1070  3453               	retlw	83	;'S'
  4684  1071  3454               	retlw	84	;'T'
  4685  1072  3441               	retlw	65	;'A'
  4686  1073  3452               	retlw	82	;'R'
  4687  1074  3454               	retlw	84	;'T'
  4688  1075  340D               	retlw	13
  4689  1076  340A               	retlw	10
  4690  1077  3400               	retlw	0
  4691                           
  4692                           	psect	stringtext5
  4693  1078                     __pstringtext5:	
  4694  1078                     STR_2:	
  4695  1078  3425               	retlw	37	;'%'
  4696  1079  3464               	retlw	100	;'d'
  4697  107A  340D               	retlw	13
  4698  107B  340A               	retlw	10
  4699  107C  3400               	retlw	0
  4700                           
  4701                           	psect	stringtext6
  4702  0000                     __pstringtext6:	
  4703  1000                     
  4704                           ; #config settings
  4705  0000                     
  4706                           	psect	cinit
  4707  003A                     start_initialization:	
  4708  003A                     __initialization:		;BIGRAM
  4709                           
  4710                           ;initializer for _ma_rear
  4711  003A  30FF               	movlw	-1
  4712  003B  00CD               	movwf	__pdataBANK0& (0+127)
  4713                           
  4714                           ;initializer for _ma_front
  4715  003C  00CE               	movwf	(__pdataBANK0+1)& (0+127)
  4716                           
  4717                           ;initializer for _pk_rear
  4718  003D  00CF               	movwf	(__pdataBANK0+2)& (0+127)
  4719                           
  4720                           ;initializer for _pk_front
  4721  003E  00D0               	movwf	(__pdataBANK0+3)& (0+127)
  4722                           
  4723                           ;initializer for _sb_rear
  4724  003F  00D1               	movwf	(__pdataBANK0+4)& (0+127)
  4725                           
  4726                           ;initializer for _sb_front
  4727  0040  00D2               	movwf	(__pdataBANK0+5)& (0+127)
  4728                           
  4729                           ; Clear objects allocated to BIGRAM
  4730  0041  308C               	movlw	140
  4731  0042  0084               	movwf	4
  4732  0043  3023               	movlw	35
  4733  0044  0085               	movwf	5
  4734  0045  3064               	movlw	100
  4735  0046  00FE               	movwf	126
  4736  0047  01FF               	clrf	127
  4737  0048  318E  262A  3180   	fcall	clear_ram0
  4738  004B  30A0               	movlw	low __pbssBANK1
  4739                           
  4740                           ; Clear objects allocated to COMMON
  4741  004C  01FD               	clrf	__pbssCOMMON& (0+127)
  4742                           
  4743                           ; Clear objects allocated to BANK1
  4744  004D  0084               	movwf	4
  4745  004E  3000               	movlw	high __pbssBANK1
  4746  004F  0085               	movwf	5
  4747  0050  3039               	movlw	57
  4748  0051  00FE               	movwf	126
  4749  0052  3000               	movlw	0
  4750  0053  00FF               	movwf	127
  4751  0054  318E  262A  3180   	fcall	clear_ram0
  4752                           
  4753                           ; Clear objects allocated to BANK2
  4754  0057  3020               	movlw	low __pbssBANK2
  4755  0058  0084               	movwf	4
  4756  0059  3001               	movlw	high __pbssBANK2
  4757  005A  0085               	movwf	5
  4758  005B  3032               	movlw	50
  4759  005C  00FE               	movwf	126
  4760  005D  3000               	movlw	0
  4761  005E  00FF               	movwf	127
  4762  005F  318E  262A  3180   	fcall	clear_ram0
  4763  0062                     end_of_initialization:	
  4764                           ;End of C runtime variable initialization code
  4765                           
  4766  0062                     __end_of__initialization:	
  4767  0062  107E               	bcf	126,0	;clear compiler interrupt flag (level 1)
  4768  0063  0140               	movlb	0
  4769  0064  2865               	ljmp	_main	;jump to C main() function
  4770  0065                     __pmaintext:	
  4771 ;;
  4772 ;;Main: autosize = 0, tempsize = 4, incstack = 0, save=0
  4773 ;;
  4774 ;; *************** function _main *****************
  4775 ;; Defined at:
  4776 ;;		line 102 in file "main.c"
  4777 ;; Parameters:    Size  Location     Type
  4778 ;;		None
  4779 ;; Auto vars:     Size  Location     Type
  4780 ;;  send_data      10    0[BANK2 ] unsigned char [10]
  4781 ;;  time_elapsed    4   10[BANK2 ] unsigned char [10]
  4782 ;;  j               2   27[BANK2 ] int 
  4783 ;;  result          2   25[BANK2 ] unsigned int 
  4784 ;;  num_bytes       2   22[BANK2 ] int 
  4785 ;;  datapoint       2   20[BANK2 ] unsigned int 
  4786 ;;  count           2   17[BANK2 ] int 
  4787 ;;  neutral_data    2   14[BANK2 ] unsigned int 
  4788 ;;  flex_flag       1   24[BANK2 ] unsigned char 
  4789 ;;  motor_starte    1   19[BANK2 ] unsigned char 
  4790 ;;  mode            1   16[BANK2 ] unsigned char 
  4791 ;; Return value:  Size  Location     Type
  4792 ;;                  1    wreg      void 
  4793 ;; Registers used:
  4794 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4795 ;; Tracked objects:
  4796 ;;		On entry : B3F/0
  4797 ;;		On exit  : 3F/2
  4798 ;;		Unchanged: 0/0
  4799 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4800 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4801 ;;      Locals:         0       0       0      29       0       0       0       0       0       0       0       0       
      +0       0
  4802 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4803 ;;      Totals:         0       4       0      29       0       0       0       0       0       0       0       0       
      +0       0
  4804 ;;Total ram usage:       33 bytes
  4805 ;; Hardware stack levels required when called:    9
  4806 ;; This function calls:
  4807 ;;		_EUSART2_Write
  4808 ;;		_SYSTEM_Initialize
  4809 ;;		_TMR2_SetInterruptHandler
  4810 ;;		_TMR2_Start
  4811 ;;		___awmod
  4812 ;;		___fladd
  4813 ;;		___fltol
  4814 ;;		_abs
  4815 ;;		_get_moving_average
  4816 ;;		_get_neutral_peaktopeak
  4817 ;;		_memset
  4818 ;;		_printf
  4819 ;;		_sbuf_peek
  4820 ;;		_sbuf_remove
  4821 ;;		_sprintf
  4822 ;; This function is called by:
  4823 ;;		Startup code after reset
  4824 ;; This function uses a non-reentrant model
  4825 ;;
  4826                           
  4827                           
  4828                           ;psect for function _main
  4829  0065                     _main:	
  4830                           
  4831                           ;main.c: 105: SYSTEM_Initialize();
  4832                           
  4833                           ;incstack = 0
  4834                           ; Regs used in _main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  4835  0065  2237  3180         	fcall	_SYSTEM_Initialize
  4836                           
  4837                           ;main.c: 112: (INTCONbits.GIE = 1);
  4838  0067  178B               	bsf	11,7	;volatile
  4839                           
  4840                           ;main.c: 115: (INTCONbits.PEIE = 1);
  4841  0068  170B               	bsf	11,6	;volatile
  4842                           
  4843                           ;main.c: 124: TMR2_SetInterruptHandler(TMR2_EMG_InterruptHandler);
  4844  0069  3029               	movlw	low _TMR2_EMG_InterruptHandler
  4845  006A  0140               	movlb	0	; select bank0
  4846  006B  00A2               	movwf	TMR2_SetInterruptHandler@InterruptHandler
  4847  006C  300F               	movlw	high _TMR2_EMG_InterruptHandler
  4848  006D  00A3               	movwf	TMR2_SetInterruptHandler@InterruptHandler+1
  4849  006E  222F  3180         	fcall	_TMR2_SetInterruptHandler
  4850                           
  4851                           ;main.c: 125: TMR2_Start();
  4852  0070  22A6  3180         	fcall	_TMR2_Start
  4853                           
  4854                           ;main.c: 130: int count = 0;
  4855  0072  0142               	movlb	2	; select bank2
  4856  0073  01E3               	clrf	main@count^(0+256)
  4857  0074  01E4               	clrf	(main@count+1)^(0+256)
  4858                           
  4859                           ;main.c: 131: uint16_t datapoint;
  4860                           ;main.c: 132: uint16_t neutral_datapoint, result;
  4861                           ;main.c: 133: uint8_t mode = 0;
  4862  0075  01E2               	clrf	main@mode^(0+256)
  4863                           
  4864                           ;main.c: 141: flex_flag = 0;
  4865  0076  01EA               	clrf	main@flex_flag^(0+256)
  4866                           
  4867                           ;main.c: 142: motor_started = 0;
  4868  0077  01E5               	clrf	main@motor_started^(0+256)
  4869  0078  0140               	movlb	0	; select bank0
  4870  0079  1398               	bcf	24,7	;volatile
  4871  007A                     l5146:	
  4872                           
  4873                           ;main.c: 150: {
  4874                           ;main.c: 152: if (PORTBbits.RB4 == 0)
  4875  007A  0140               	movlb	0	; select bank0
  4876  007B  1A0D               	btfsc	13,4	;volatile
  4877  007C  288F               	goto	l5154
  4878                           
  4879                           ;main.c: 153: {
  4880                           ;main.c: 154: mode ^= 1;
  4881  007D  3001               	movlw	1
  4882  007E  0142               	movlb	2	; select bank2
  4883  007F  06E2               	xorwf	main@mode^(0+256),f
  4884  0080  3080               	movlw	128
  4885  0081  0140               	movlb	0	; select bank0
  4886  0082  0698               	xorwf	24,f	;volatile
  4887                           
  4888                           ;main.c: 156: _delay((unsigned long)((700)*(16000000/4000.0)));
  4889  0083  300F               	movlw	15
  4890  0084  0140               	movlb	0	; select bank0
  4891  0085  00CA               	movwf	??_main+1
  4892  0086  3035               	movlw	53
  4893  0087  00C9               	movwf	??_main
  4894  0088  3051               	movlw	81
  4895  0089                     u6117:	
  4896  0089  0B89               	decfsz	9,f
  4897  008A  2889               	goto	u6117
  4898  008B  0BC9               	decfsz	??_main,f
  4899  008C  2889               	goto	u6117
  4900  008D  0BCA               	decfsz	??_main+1,f
  4901  008E  2889               	goto	u6117
  4902  008F                     l5154:	
  4903                           
  4904                           ;main.c: 157: }
  4905                           ;main.c: 160: if (PORTCbits.RC5 == 0 && start_flag == 0)
  4906  008F  0140               	movlb	0	; select bank0
  4907  0090  1A8E               	btfsc	14,5	;volatile
  4908  0091  287A               	goto	l5146
  4909  0092  0141               	movlb	1	; select bank1
  4910  0093  084F               	movf	_start_flag^(0+128),w
  4911  0094  1D03               	btfss	3,2
  4912  0095  287A               	goto	l5146
  4913                           
  4914                           ;main.c: 161: {
  4915                           ;main.c: 165: num_bytes = sprintf(send_data, "START\r\n");
  4916  0096  3070               	movlw	low (STR_1| (0+32768))
  4917  0097  0140               	movlb	0	; select bank0
  4918  0098  00BD               	movwf	sprintf@f
  4919  0099  3090               	movlw	high (STR_1| (0+32768))
  4920  009A  00BE               	movwf	sprintf@f+1
  4921  009B  3052               	movlw	(low (main@send_data| (0+256)))& (0+255)
  4922  009C  2214  3180         	fcall	_sprintf
  4923                           
  4924                           ;main.c: 166: j=0;
  4925  009E  23EF  3180         	fcall	PL12	;call to abstracted procedure
  4926  00A0                     l5166:	
  4927                           ;main.c: 167: while (j<num_bytes)
  4928                           
  4929  00A0  23E0  3180         	fcall	PL2	;call to abstracted procedure
  4930  00A2  1803               	btfsc	3,0
  4931  00A3  28AD               	goto	l569
  4932                           
  4933                           ;main.c: 168: {
  4934                           ;main.c: 169: EUSART2_Write(send_data[j]);
  4935  00A4  2402  3180         	fcall	PL20	;call to abstracted procedure
  4936  00A6  21F3  3180         	fcall	_EUSART2_Write
  4937                           
  4938                           ;main.c: 170: j++;
  4939  00A8  0142               	movlb	2	; select bank2
  4940  00A9  0AED               	incf	main@j^(0+256),f
  4941  00AA  1903               	skipnz
  4942  00AB  0AEE               	incf	(main@j+1)^(0+256),f
  4943  00AC  28A0               	goto	l5166
  4944  00AD                     l569:	
  4945                           
  4946                           ;main.c: 171: }
  4947                           ;main.c: 172: start_flag = 1;
  4948  00AD  0141               	movlb	1	; select bank1
  4949  00AE  300F               	movlw	15
  4950  00AF  01CF               	clrf	_start_flag^(0+128)
  4951  00B0  0ACF               	incf	_start_flag^(0+128),f
  4952                           
  4953                           ;main.c: 173: _delay((unsigned long)((700)*(16000000/4000.0)));
  4954  00B1  0140               	movlb	0	; select bank0
  4955  00B2  00CA               	movwf	??_main+1
  4956  00B3  3035               	movlw	53
  4957  00B4  00C9               	movwf	??_main
  4958  00B5  3051               	movlw	81
  4959  00B6                     u6127:	
  4960  00B6  0B89               	decfsz	9,f
  4961  00B7  28B6               	goto	u6127
  4962  00B8  0BC9               	decfsz	??_main,f
  4963  00B9  28B6               	goto	u6127
  4964  00BA  0BCA               	decfsz	??_main+1,f
  4965  00BB  28B6               	goto	u6127
  4966  00BC                     l5170:	
  4967                           ;main.c: 174: break;
  4968                           
  4969                           
  4970                           ;main.c: 180: {
  4971                           ;main.c: 182: if(start_flag == 1)
  4972  00BC  0141               	movlb	1	; select bank1
  4973  00BD  0B4F               	decfsz	_start_flag^(0+128),w
  4974  00BE  28BC               	goto	l5170
  4975                           
  4976                           ;main.c: 183: {
  4977                           ;main.c: 187: for (i = sb_front; i != sb_rear; i = (i + 1) % 50) {
  4978  00BF  0140               	movlb	0	; select bank0
  4979  00C0  0852               	movf	_sb_front,w
  4980  00C1                     L1:	
  4981  00C1  0141               	movlb	1	; select bank1
  4982  00C2  00CE               	movwf	_i^(0+128)
  4983  00C3  0140               	movlb	0	; select bank0
  4984  00C4  0851               	movf	_sb_rear,w
  4985  00C5  00C9               	movwf	??_main
  4986  00C6  01CA               	clrf	??_main+1
  4987  00C7  1BC9               	btfsc	??_main,7
  4988  00C8  03CA               	decf	??_main+1,f
  4989  00C9  0141               	movlb	1	; select bank1
  4990  00CA  084E               	movf	_i^(0+128),w
  4991  00CB  0140               	movlb	0	; select bank0
  4992  00CC  00CB               	movwf	??_main+2
  4993  00CD  01CC               	clrf	??_main+3
  4994  00CE  084A               	movf	??_main+1,w
  4995  00CF  064C               	xorwf	??_main+3,w
  4996  00D0  1D03               	skipz
  4997  00D1  28D4               	goto	u5985
  4998  00D2  0849               	movf	??_main,w
  4999  00D3  064B               	xorwf	??_main+2,w
  5000  00D4                     u5985:	
  5001  00D4  1903               	btfsc	3,2
  5002  00D5  28E7               	goto	l5180
  5003                           
  5004                           ;main.c: 188: count++;
  5005  00D6  0142               	movlb	2	; select bank2
  5006  00D7  0AE3               	incf	main@count^(0+256),f
  5007  00D8  1903               	skipnz
  5008  00D9  0AE4               	incf	(main@count+1)^(0+256),f
  5009  00DA  0141               	movlb	1	; select bank1
  5010  00DB  084E               	movf	_i^(0+128),w
  5011  00DC  0140               	movlb	0	; select bank0
  5012  00DD  00A4               	movwf	___awmod@dividend
  5013  00DE  01A5               	clrf	___awmod@dividend+1
  5014  00DF  0AA4               	incf	___awmod@dividend,f
  5015  00E0  3186  269A  3180   	fcall	PL36	;call to abstracted procedure
  5016  00E3  22FE  3180         	fcall	___awmod
  5017  00E5  0822               	movf	?___awmod,w
  5018  00E6  28C1               	goto	L1
  5019  00E7                     l5180:	
  5020                           
  5021                           ;main.c: 189: }
  5022                           ;main.c: 191: if(count>0)
  5023  00E7  0142               	movlb	2	; select bank2
  5024  00E8  0864               	movf	(main@count+1)^(0+256),w
  5025  00E9  3A80               	xorlw	128
  5026  00EA  0140               	movlb	0	; select bank0
  5027  00EB  00C9               	movwf	??_main
  5028  00EC  3080               	movlw	128
  5029  00ED  0249               	subwf	??_main,w
  5030  00EE  1D03               	skipz
  5031  00EF  28F3               	goto	u5995
  5032  00F0  3001               	movlw	1
  5033  00F1  0142               	movlb	2	; select bank2
  5034  00F2  0263               	subwf	main@count^(0+256),w
  5035  00F3                     u5995:	
  5036  00F3  1C03               	skipc
  5037  00F4  29DF               	goto	l5240
  5038                           
  5039                           ;main.c: 192: {
  5040                           ;main.c: 194: datapoint = sbuf_peek();
  5041  00F5  318E  2673  3180   	fcall	_sbuf_peek
  5042  00F8  0823               	movf	?_sbuf_peek+1,w
  5043  00F9  0142               	movlb	2	; select bank2
  5044  00FA  00E7               	movwf	(main@datapoint+1)^(0+256)
  5045  00FB  0140               	movlb	0	; select bank0
  5046  00FC  0822               	movf	?_sbuf_peek,w
  5047  00FD  0142               	movlb	2	; select bank2
  5048  00FE  00E6               	movwf	main@datapoint^(0+256)
  5049                           
  5050                           ;main.c: 197: neutral_datapoint = get_neutral_peaktopeak(datapoint);
  5051  00FF  0867               	movf	(main@datapoint+1)^(0+256),w
  5052  0100  0140               	movlb	0	; select bank0
  5053  0101  00AB               	movwf	get_neutral_peaktopeak@datapoint+1
  5054  0102  0142               	movlb	2	; select bank2
  5055  0103  0866               	movf	main@datapoint^(0+256),w
  5056  0104  0140               	movlb	0	; select bank0
  5057  0105  00AA               	movwf	get_neutral_peaktopeak@datapoint
  5058  0106  3186  26A0  3180   	fcall	_get_neutral_peaktopeak
  5059  0109  082B               	movf	?_get_neutral_peaktopeak+1,w
  5060  010A  0142               	movlb	2	; select bank2
  5061  010B  00E1               	movwf	(main@neutral_datapoint+1)^(0+256)
  5062  010C  0140               	movlb	0	; select bank0
  5063  010D  082A               	movf	?_get_neutral_peaktopeak,w
  5064  010E  0142               	movlb	2	; select bank2
  5065  010F  00E0               	movwf	main@neutral_datapoint^(0+256)
  5066                           
  5067                           ;main.c: 202: result = get_moving_average(abs(datapoint - neutral_datapoint));
  5068  0110  0867               	movf	(main@datapoint+1)^(0+256),w
  5069  0111  0140               	movlb	0	; select bank0
  5070  0112  00A3               	movwf	abs@a+1
  5071  0113  0142               	movlb	2	; select bank2
  5072  0114  0866               	movf	main@datapoint^(0+256),w
  5073  0115  0140               	movlb	0	; select bank0
  5074  0116  00A2               	movwf	abs@a
  5075  0117  0142               	movlb	2	; select bank2
  5076  0118  0860               	movf	main@neutral_datapoint^(0+256),w
  5077  0119  0140               	movlb	0	; select bank0
  5078  011A  02A2               	subwf	abs@a,f
  5079  011B  0142               	movlb	2	; select bank2
  5080  011C  0861               	movf	(main@neutral_datapoint+1)^(0+256),w
  5081  011D  0140               	movlb	0	; select bank0
  5082  011E  3BA3               	subwfb	abs@a+1,f
  5083  011F  22F0  3180         	fcall	_abs
  5084  0121  0823               	movf	?_abs+1,w
  5085  0122  00B8               	movwf	get_moving_average@datapoint+1
  5086  0123  0822               	movf	?_abs,w
  5087  0124  00B7               	movwf	get_moving_average@datapoint
  5088  0125  2337  3180         	fcall	_get_moving_average
  5089  0127  083A               	movf	?_get_moving_average+3,w
  5090  0128  00C2               	movwf	___fltol@f1+3
  5091  0129  0839               	movf	?_get_moving_average+2,w
  5092  012A  00C1               	movwf	___fltol@f1+2
  5093  012B  0838               	movf	?_get_moving_average+1,w
  5094  012C  00C0               	movwf	___fltol@f1+1
  5095  012D  0837               	movf	?_get_moving_average,w
  5096  012E  00BF               	movwf	___fltol@f1
  5097  012F  22A9               	fcall	___fltol
  5098  0130  0840               	movf	?___fltol+1,w
  5099  0131  0142               	movlb	2	; select bank2
  5100  0132  00EC               	movwf	(main@result+1)^(0+256)
  5101  0133  0140               	movlb	0	; select bank0
  5102  0134  083F               	movf	?___fltol,w
  5103  0135  0142               	movlb	2	; select bank2
  5104  0136  00EB               	movwf	main@result^(0+256)
  5105                           
  5106                           ;main.c: 206: memset(send_data, 0, 10);
  5107  0137  0140               	movlb	0	; select bank0
  5108  0138  300A               	movlw	10
  5109  0139  01A2               	clrf	memset@c
  5110  013A  01A3               	clrf	memset@c+1
  5111  013B  00A4               	movwf	memset@n
  5112  013C  3052               	movlw	(low (main@send_data| (0+256)))& (0+255)
  5113  013D  01A5               	clrf	memset@n+1
  5114  013E  318E  2636  3180   	fcall	_memset
  5115                           
  5116                           ;main.c: 208: num_bytes = sprintf(send_data, "%d\r\n", result);
  5117  0141  3078               	movlw	low (STR_2| (0+32768))
  5118  0142  00BD               	movwf	sprintf@f
  5119  0143  3090               	movlw	high (STR_2| (0+32768))
  5120  0144  00BE               	movwf	sprintf@f+1
  5121  0145  0142               	movlb	2	; select bank2
  5122  0146  086C               	movf	(main@result+1)^(0+256),w
  5123  0147  0140               	movlb	0	; select bank0
  5124  0148  00C0               	movwf	?_sprintf+3
  5125  0149  0142               	movlb	2	; select bank2
  5126  014A  086B               	movf	main@result^(0+256),w
  5127  014B  0140               	movlb	0	; select bank0
  5128  014C  00BF               	movwf	?_sprintf+2
  5129  014D  3052               	movlw	(low (main@send_data| (0+256)))& (0+255)
  5130  014E  2214  3180         	fcall	_sprintf
  5131                           
  5132                           ;main.c: 210: j=0;
  5133  0150  23EF  3180         	fcall	PL12	;call to abstracted procedure
  5134  0152                     l5192:	
  5135                           ;main.c: 212: while(j < num_bytes)
  5136                           
  5137  0152  23E0  3180         	fcall	PL2	;call to abstracted procedure
  5138  0154  1803               	btfsc	3,0
  5139  0155  295F               	goto	l5194
  5140                           
  5141                           ;main.c: 213: {
  5142                           ;main.c: 214: EUSART2_Write(send_data[j]);
  5143  0156  2402  3180         	fcall	PL20	;call to abstracted procedure
  5144  0158  21F3  3180         	fcall	_EUSART2_Write
  5145                           
  5146                           ;main.c: 215: j++;
  5147  015A  0142               	movlb	2	; select bank2
  5148  015B  0AED               	incf	main@j^(0+256),f
  5149  015C  1903               	skipnz
  5150  015D  0AEE               	incf	(main@j+1)^(0+256),f
  5151  015E  2952               	goto	l5192
  5152  015F                     l5194:	
  5153                           
  5154                           ;main.c: 216: }
  5155                           ;main.c: 218: if(mode == 0)
  5156  015F  0142               	movlb	2	; select bank2
  5157  0160  0862               	movf	main@mode^(0+256),w
  5158                           
  5159                           ;main.c: 219: {
  5160                           ;main.c: 221: if(result>= 25 && sent_1 == 0)
  5161  0161  3000               	movlw	0
  5162  0162  1D03               	btfss	3,2
  5163  0163  298E               	goto	L2
  5164  0164  026C               	subwf	(main@result+1)^(0+256),w
  5165  0165  3019               	movlw	25
  5166  0166  1903               	skipnz
  5167  0167  026B               	subwf	main@result^(0+256),w
  5168  0168  1C03               	skipc
  5169  0169  2978               	goto	l5206
  5170  016A  0141               	movlb	1	; select bank1
  5171  016B  084D               	movf	_sent_1^(0+128),w
  5172  016C  1D03               	btfss	3,2
  5173  016D  2978               	goto	l5206
  5174                           
  5175                           ;main.c: 222: {
  5176                           ;main.c: 224: printf("#1 P1000 #2 P1000 #3 P1000 #4 P1000 #5 P1000 T800\r");
  5177  016E  3000               	movlw	low (STR_3| (0+32768))
  5178  016F  2410  3180         	fcall	PL42	;call to abstracted procedure
  5179  0171  21E3  3180         	fcall	_printf
  5180                           
  5181                           ;main.c: 228: sent_1 = 1;
  5182  0173  0141               	movlb	1	; select bank1
  5183  0174  01CD               	clrf	_sent_1^(0+128)
  5184  0175  0ACD               	incf	_sent_1^(0+128),f
  5185                           
  5186                           ;main.c: 229: sent_0 = 0;
  5187  0176  01CC               	clrf	_sent_0^(0+128)
  5188                           
  5189                           ;main.c: 230: }
  5190  0177  29B4               	goto	l5236
  5191  0178                     l5206:	
  5192                           
  5193                           ;main.c: 231: else if(result<25 && sent_0 == 0)
  5194  0178  3000               	movlw	0
  5195  0179  0142               	movlb	2	; select bank2
  5196  017A  026C               	subwf	(main@result+1)^(0+256),w
  5197  017B  3019               	movlw	25
  5198  017C  1903               	skipnz
  5199  017D  026B               	subwf	main@result^(0+256),w
  5200  017E  1803               	skipnc
  5201  017F  29B4               	goto	l5236
  5202  0180  0141               	movlb	1	; select bank1
  5203  0181  084C               	movf	_sent_0^(0+128),w
  5204  0182  1D03               	btfss	3,2
  5205  0183  29B4               	goto	l5236
  5206                           
  5207                           ;main.c: 232: {
  5208                           ;main.c: 234: printf("#1 P2000 #2 P2000 #3 P2000 #4 P2000 #5 P2000 T800\r");
  5209  0184  3033               	movlw	low (STR_4| (0+32768))
  5210  0185  2415  3180         	fcall	PL44	;call to abstracted procedure
  5211  0187  21E3  3180         	fcall	_printf
  5212                           
  5213                           ;main.c: 238: sent_0 = 1;
  5214  0189  0141               	movlb	1	; select bank1
  5215  018A  01CC               	clrf	_sent_0^(0+128)
  5216  018B  0ACC               	incf	_sent_0^(0+128),f
  5217                           
  5218                           ;main.c: 239: sent_1 = 0;
  5219  018C  01CD               	clrf	_sent_1^(0+128)
  5220  018D  29B4               	goto	l5236
  5221  018E                     L2:	
  5222                           ;main.c: 243: else
  5223                           ;main.c: 244: {
  5224                           ;main.c: 246: if(result>= 25 && flex_flag == 0)
  5225                           
  5226  018E  026C               	subwf	(main@result+1)^(0+256),w
  5227  018F  3019               	movlw	25
  5228  0190  1903               	skipnz
  5229  0191  026B               	subwf	main@result^(0+256),w
  5230  0192  1C03               	skipc
  5231  0193  29AA               	goto	l5230
  5232  0194  086A               	movf	main@flex_flag^(0+256),w
  5233  0195  1D03               	btfss	3,2
  5234  0196  29AA               	goto	l5230
  5235                           
  5236                           ;main.c: 247: {
  5237                           ;main.c: 248: flex_flag = 1;
  5238  0197  01EA               	clrf	main@flex_flag^(0+256)
  5239  0198  0AEA               	incf	main@flex_flag^(0+256),f
  5240                           
  5241                           ;main.c: 250: if(motor_started == 1)
  5242  0199  0B65               	decfsz	main@motor_started^(0+256),w
  5243  019A  29A2               	goto	l587
  5244  019B  3000               	movlw	low (STR_3| (0+32768))
  5245                           
  5246                           ;main.c: 251: {
  5247                           ;main.c: 252: motor_started =0;
  5248  019C  01E5               	clrf	main@motor_started^(0+256)
  5249                           
  5250                           ;main.c: 254: printf("#1 P1000 #2 P1000 #3 P1000 #4 P1000 #5 P1000 T800\r");
  5251  019D  2410  3180         	fcall	PL42	;call to abstracted procedure
  5252  019F  21E3  3180         	fcall	_printf
  5253                           
  5254                           ;main.c: 255: }
  5255  01A1  29B4               	goto	l5236
  5256  01A2                     l587:	
  5257  01A2  3033               	movlw	low (STR_4| (0+32768))
  5258                           
  5259                           ;main.c: 256: else
  5260                           ;main.c: 257: {
  5261                           ;main.c: 258: motor_started = 1;
  5262  01A3  01E5               	clrf	main@motor_started^(0+256)
  5263  01A4  0AE5               	incf	main@motor_started^(0+256),f
  5264                           
  5265                           ;main.c: 260: printf("#1 P2000 #2 P2000 #3 P2000 #4 P2000 #5 P2000 T800\r");
  5266  01A5  2415  3180         	fcall	PL44	;call to abstracted procedure
  5267  01A7  21E3  3180         	fcall	_printf
  5268  01A9  29B4               	goto	l5236
  5269  01AA                     l5230:	
  5270                           
  5271                           ;main.c: 265: else if(result< 25 && flex_flag == 1)
  5272  01AA  3000               	movlw	0
  5273  01AB  026C               	subwf	(main@result+1)^(0+256),w
  5274  01AC  3019               	movlw	25
  5275  01AD  1903               	skipnz
  5276  01AE  026B               	subwf	main@result^(0+256),w
  5277  01AF  1803               	skipnc
  5278  01B0  29B4               	goto	l5236
  5279  01B1  0B6A               	decfsz	main@flex_flag^(0+256),w
  5280  01B2  29B4               	goto	l5236
  5281                           
  5282                           ;main.c: 266: {
  5283                           ;main.c: 267: flex_flag = 0;
  5284  01B3  01EA               	clrf	main@flex_flag^(0+256)
  5285  01B4                     l5236:	
  5286                           
  5287                           ;main.c: 268: }
  5288                           ;main.c: 269: }
  5289                           ;main.c: 272: sbuf_remove();
  5290  01B4  3186  267B  3180   	fcall	_sbuf_remove
  5291                           
  5292                           ;main.c: 274: time_elapsed += 5.0;
  5293  01B7  3040               	movlw	64
  5294  01B8  00A5               	movwf	___fladd@b+3
  5295  01B9  30A0               	movlw	160
  5296  01BA  00A4               	movwf	___fladd@b+2
  5297  01BB  01A3               	clrf	___fladd@b+1
  5298  01BC  01A2               	clrf	___fladd@b
  5299  01BD  0142               	movlb	2	; select bank2
  5300  01BE  085F               	movf	(main@time_elapsed+3)^(0+256),w
  5301  01BF  0140               	movlb	0	; select bank0
  5302  01C0  00A9               	movwf	___fladd@a+3
  5303  01C1  0142               	movlb	2	; select bank2
  5304  01C2  085E               	movf	(main@time_elapsed+2)^(0+256),w
  5305  01C3  0140               	movlb	0	; select bank0
  5306  01C4  00A8               	movwf	___fladd@a+2
  5307  01C5  0142               	movlb	2	; select bank2
  5308  01C6  085D               	movf	(main@time_elapsed+1)^(0+256),w
  5309  01C7  0140               	movlb	0	; select bank0
  5310  01C8  00A7               	movwf	___fladd@a+1
  5311  01C9  0142               	movlb	2	; select bank2
  5312  01CA  085C               	movf	main@time_elapsed^(0+256),w
  5313  01CB  0140               	movlb	0	; select bank0
  5314  01CC  00A6               	movwf	___fladd@a
  5315  01CD  3184  2436  3180   	fcall	___fladd
  5316  01D0  0825               	movf	?___fladd+3,w
  5317  01D1  0142               	movlb	2	; select bank2
  5318  01D2  00DF               	movwf	(main@time_elapsed+3)^(0+256)
  5319  01D3  0140               	movlb	0	; select bank0
  5320  01D4  0824               	movf	?___fladd+2,w
  5321  01D5  0142               	movlb	2	; select bank2
  5322  01D6  00DE               	movwf	(main@time_elapsed+2)^(0+256)
  5323  01D7  0140               	movlb	0	; select bank0
  5324  01D8  0823               	movf	?___fladd+1,w
  5325  01D9  0142               	movlb	2	; select bank2
  5326  01DA  00DD               	movwf	(main@time_elapsed+1)^(0+256)
  5327  01DB  0140               	movlb	0	; select bank0
  5328  01DC  0822               	movf	?___fladd,w
  5329  01DD  0142               	movlb	2	; select bank2
  5330  01DE  00DC               	movwf	main@time_elapsed^(0+256)
  5331  01DF                     l5240:	
  5332                           
  5333                           ;main.c: 275: }
  5334                           ;main.c: 277: count = 0;
  5335  01DF  0142               	movlb	2	; select bank2
  5336  01E0  01E3               	clrf	main@count^(0+256)
  5337  01E1  01E4               	clrf	(main@count+1)^(0+256)
  5338  01E2  28BC               	goto	l5170
  5339  01E3                     __end_of_main:	
  5340  01E3                     __ptext5:	
  5341 ;; *************** function _printf *****************
  5342 ;; Defined at:
  5343 ;;		line 13 in file "C:\Program Files (x86)\Microchip\xc8\v1.44\sources\common\printf.c"
  5344 ;; Parameters:    Size  Location     Type
  5345 ;;  f               2   29[BANK0 ] PTR const unsigned char 
  5346 ;;		 -> STR_6(51), STR_5(51), STR_4(51), STR_3(51), 
  5347 ;; Auto vars:     Size  Location     Type
  5348 ;;  pb              3   32[BANK0 ] struct __prbuf
  5349 ;;  ap              1   31[BANK0 ] PTR void [1]
  5350 ;;		 -> ?_sprintf(2), ?_printf(2), 
  5351 ;; Return value:  Size  Location     Type
  5352 ;;                  2   29[BANK0 ] int 
  5353 ;; Registers used:
  5354 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  5355 ;; Tracked objects:
  5356 ;;		On entry : 3F/0
  5357 ;;		On exit  : 3F/0
  5358 ;;		Unchanged: 0/0
  5359 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5360 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5361 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5362 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5363 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5364 ;;Total ram usage:        6 bytes
  5365 ;; Hardware stack levels used:    1
  5366 ;; Hardware stack levels required when called:    8
  5367 ;; This function calls:
  5368 ;;		__doprnt
  5369 ;; This function is called by:
  5370 ;;		_main
  5371 ;; This function uses a non-reentrant model
  5372 ;;
  5373                           
  5374                           
  5375                           ;psect for function _printf
  5376  01E3                     _printf:	
  5377  01E3  309E               	movlw	low _putch
  5378                           
  5379                           ;incstack = 0
  5380                           ; Regs used in _printf: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  5381  01E4  01C0               	clrf	printf@pb
  5382  01E5  00C1               	movwf	low ((printf@pb| 0+1))
  5383  01E6  300E               	movlw	high _putch
  5384  01E7  00C2               	movwf	(low ((printf@pb| 0+1))+1)
  5385  01E8  303F               	movlw	(low ((?_printf| 0+2)))& (0+255)
  5386  01E9  00BF               	movwf	printf@ap
  5387                           
  5388                           ;	Return value of _printf is never used
  5389  01EA  083E               	movf	printf@f+1,w
  5390  01EB  00AF               	movwf	__doprnt@f+1
  5391  01EC  083D               	movf	printf@f,w
  5392  01ED  00AE               	movwf	__doprnt@f
  5393  01EE  303F               	movlw	(low (printf@ap| 0))& (0+255)
  5394  01EF  00B0               	movwf	__doprnt@ap
  5395  01F0  3040               	movlw	(low (printf@pb| 0))& (0+255)
  5396  01F1  3185  2D81         	ljmp	__doprnt
  5397  01F3                     __end_of_printf:	
  5398  01F3                     __ptext41:	
  5399 ;; *************** function _EUSART2_Write *****************
  5400 ;; Defined at:
  5401 ;;		line 148 in file "mcc_generated_files/eusart2.c"
  5402 ;; Parameters:    Size  Location     Type
  5403 ;;  txData          1    wreg     unsigned char 
  5404 ;; Auto vars:     Size  Location     Type
  5405 ;;  txData          1    2[BANK0 ] unsigned char 
  5406 ;; Return value:  Size  Location     Type
  5407 ;;                  1    wreg      void 
  5408 ;; Registers used:
  5409 ;;		wreg, fsr1l, fsr1h, status,2, status,0
  5410 ;; Tracked objects:
  5411 ;;		On entry : 3F/2
  5412 ;;		On exit  : 3F/E
  5413 ;;		Unchanged: 0/0
  5414 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5415 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5416 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5417 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5418 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5419 ;;Total ram usage:        1 bytes
  5420 ;; Hardware stack levels used:    1
  5421 ;; Hardware stack levels required when called:    5
  5422 ;; This function calls:
  5423 ;;		Nothing
  5424 ;; This function is called by:
  5425 ;;		_main
  5426 ;; This function uses a non-reentrant model
  5427 ;;
  5428                           
  5429                           
  5430                           ;psect for function _EUSART2_Write
  5431  01F3                     _EUSART2_Write:	
  5432                           
  5433                           ;incstack = 0
  5434                           ; Regs used in _EUSART2_Write: [wreg+fsr1l+fsr1h+status,2+status,0]
  5435                           ;EUSART2_Write@txData stored from wreg
  5436  01F3  0140               	movlb	0	; select bank0
  5437  01F4  00A2               	movwf	EUSART2_Write@txData
  5438  01F5                     l4034:	
  5439                           ;eusart2.c: 150: while(0 == eusart2TxBufferRemaining)
  5440                           
  5441  01F5  0141               	movlb	1	; select bank1
  5442  01F6  0863               	movf	_eusart2TxBufferRemaining^(0+128),w	;volatile
  5443  01F7  1903               	btfsc	3,2
  5444  01F8  29F5               	goto	l4034
  5445                           
  5446                           ;eusart2.c: 152: }
  5447                           ;eusart2.c: 154: if(0 == PIE3bits.TX2IE)
  5448  01F9  014E               	movlb	14	; select bank14
  5449  01FA  1B19               	btfsc	25,6	;volatile
  5450  01FB  2A01               	goto	l372
  5451                           
  5452                           ;eusart2.c: 155: {
  5453                           ;eusart2.c: 156: TX2REG = txData;
  5454  01FC  0140               	movlb	0	; select bank0
  5455  01FD  0822               	movf	EUSART2_Write@txData,w
  5456  01FE  0154               	movlb	20	; select bank20
  5457  01FF  009A               	movwf	26	;volatile
  5458                           
  5459                           ;eusart2.c: 157: }
  5460  0200  2A11               	goto	l4048
  5461  0201                     l372:	
  5462                           
  5463                           ;eusart2.c: 158: else
  5464                           ;eusart2.c: 159: {
  5465                           ;eusart2.c: 160: PIE3bits.TX2IE = 0;
  5466  0201  1319               	bcf	25,6	;volatile
  5467                           
  5468                           ;eusart2.c: 161: eusart2TxBuffer[eusart2TxHead++] = txData;
  5469  0202  0141               	movlb	1	; select bank1
  5470  0203  0854               	movf	_eusart2TxHead^(0+128),w
  5471  0204  3EB2               	addlw	(low (_eusart2TxBuffer| 0))& (0+255)
  5472  0205  0086               	movwf	6
  5473  0206  0187               	clrf	7
  5474  0207  0140               	movlb	0	; select bank0
  5475  0208  0822               	movf	EUSART2_Write@txData,w
  5476  0209  0081               	movwf	1
  5477  020A  0141               	movlb	1	; select bank1
  5478  020B  0AD4               	incf	_eusart2TxHead^(0+128),f	;volatile
  5479                           
  5480                           ;eusart2.c: 162: if(sizeof(eusart2TxBuffer) <= eusart2TxHead)
  5481  020C  3008               	movlw	8
  5482  020D  0254               	subwf	_eusart2TxHead^(0+128),w
  5483  020E  1803               	btfsc	3,0
  5484                           
  5485                           ;eusart2.c: 163: {
  5486                           ;eusart2.c: 164: eusart2TxHead = 0;
  5487  020F  01D4               	clrf	_eusart2TxHead^(0+128)	;volatile
  5488                           
  5489                           ;eusart2.c: 165: }
  5490                           ;eusart2.c: 166: eusart2TxBufferRemaining--;
  5491  0210  03E3               	decf	_eusart2TxBufferRemaining^(0+128),f	;volatile
  5492  0211                     l4048:	
  5493                           
  5494                           ;eusart2.c: 167: }
  5495                           ;eusart2.c: 168: PIE3bits.TX2IE = 1;
  5496  0211  014E               	movlb	14	; select bank14
  5497  0212  1719               	bsf	25,6	;volatile
  5498  0213  0008               	return
  5499  0214                     __end_of_EUSART2_Write:	
  5500  0214                     __ptext1:	
  5501 ;; *************** function _sprintf *****************
  5502 ;; Defined at:
  5503 ;;		line 13 in file "C:\Program Files (x86)\Microchip\xc8\v1.44\sources\common\sprintf.c"
  5504 ;; Parameters:    Size  Location     Type
  5505 ;;  wh              1    wreg     PTR unsigned char 
  5506 ;;		 -> main@send_data(10), 
  5507 ;;  f               2   29[BANK0 ] PTR const unsigned char 
  5508 ;;		 -> STR_2(5), STR_1(8), 
  5509 ;; Auto vars:     Size  Location     Type
  5510 ;;  wh              1   34[BANK0 ] PTR unsigned char 
  5511 ;;		 -> main@send_data(10), 
  5512 ;;  pb              3   35[BANK0 ] struct __prbuf
  5513 ;;  ap              1   33[BANK0 ] PTR void [1]
  5514 ;;		 -> ?_sprintf(2), ?_printf(2), 
  5515 ;; Return value:  Size  Location     Type
  5516 ;;                  2   29[BANK0 ] int 
  5517 ;; Registers used:
  5518 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  5519 ;; Tracked objects:
  5520 ;;		On entry : 3F/0
  5521 ;;		On exit  : 3F/0
  5522 ;;		Unchanged: 0/0
  5523 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5524 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5525 ;;      Locals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5526 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5527 ;;      Totals:         0       9       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5528 ;;Total ram usage:        9 bytes
  5529 ;; Hardware stack levels used:    1
  5530 ;; Hardware stack levels required when called:    8
  5531 ;; This function calls:
  5532 ;;		__doprnt
  5533 ;; This function is called by:
  5534 ;;		_main
  5535 ;; This function uses a non-reentrant model
  5536 ;;
  5537                           
  5538                           
  5539                           ;psect for function _sprintf
  5540  0214                     _sprintf:	
  5541                           
  5542                           ;incstack = 0
  5543                           ; Regs used in _sprintf: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  5544                           ;sprintf@wh stored from wreg
  5545  0214  00C2               	movwf	sprintf@wh
  5546  0215  00C3               	movwf	sprintf@pb
  5547  0216  303F               	movlw	(low ((?_sprintf| 0+2)))& (0+255)
  5548  0217  01C4               	clrf	low ((sprintf@pb| 0+1))
  5549  0218  01C5               	clrf	(low ((sprintf@pb| 0+1))+1)
  5550  0219  00C1               	movwf	sprintf@ap
  5551  021A  083E               	movf	sprintf@f+1,w
  5552  021B  00AF               	movwf	__doprnt@f+1
  5553  021C  083D               	movf	sprintf@f,w
  5554  021D  00AE               	movwf	__doprnt@f
  5555  021E  3041               	movlw	(low (sprintf@ap| 0))& (0+255)
  5556  021F  00B0               	movwf	__doprnt@ap
  5557  0220  3043               	movlw	(low (sprintf@pb| 0))& (0+255)
  5558  0221  3185  2581         	fcall	__doprnt
  5559  0223  0843               	movf	sprintf@pb,w
  5560  0224  0086               	movwf	6
  5561  0225  3001               	movlw	1	; select bank2/3
  5562  0226  0087               	movwf	7
  5563  0227  0181               	clrf	1
  5564  0228  0842               	movf	sprintf@wh,w
  5565  0229  0243               	subwf	sprintf@pb,w
  5566  022A  00BD               	movwf	?_sprintf
  5567  022B  01BE               	clrf	?_sprintf+1
  5568  022C  1BBD               	btfsc	?_sprintf,7
  5569  022D  03BE               	decf	?_sprintf+1,f
  5570  022E  0008               	return
  5571  022F                     __end_of_sprintf:	
  5572  022F                     __ptext30:	
  5573 ;; *************** function _TMR2_SetInterruptHandler *****************
  5574 ;; Defined at:
  5575 ;;		line 178 in file "mcc_generated_files/tmr2.c"
  5576 ;; Parameters:    Size  Location     Type
  5577 ;;  InterruptHan    2    2[BANK0 ] PTR FTN()void 
  5578 ;;		 -> TMR2_EMG_InterruptHandler(1), TMR2_DefaultInterruptHandler(1), 
  5579 ;; Auto vars:     Size  Location     Type
  5580 ;;		None
  5581 ;; Return value:  Size  Location     Type
  5582 ;;                  1    wreg      void 
  5583 ;; Registers used:
  5584 ;;		wreg
  5585 ;; Tracked objects:
  5586 ;;		On entry : 3F/0
  5587 ;;		On exit  : 3F/1
  5588 ;;		Unchanged: 0/0
  5589 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5590 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5591 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5592 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5593 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5594 ;;Total ram usage:        2 bytes
  5595 ;; Hardware stack levels used:    1
  5596 ;; Hardware stack levels required when called:    5
  5597 ;; This function calls:
  5598 ;;		Nothing
  5599 ;; This function is called by:
  5600 ;;		_TMR2_Initialize
  5601 ;;		_main
  5602 ;; This function uses a non-reentrant model
  5603 ;;
  5604                           
  5605                           
  5606                           ;psect for function _TMR2_SetInterruptHandler
  5607  022F                     _TMR2_SetInterruptHandler:	
  5608                           
  5609                           ;tmr2.c: 179: TMR2_InterruptHandler = InterruptHandler;
  5610                           
  5611                           ;incstack = 0
  5612                           ; Regs used in _TMR2_SetInterruptHandler: [wreg]
  5613  022F  0823               	movf	TMR2_SetInterruptHandler@InterruptHandler+1,w
  5614  0230  0141               	movlb	1	; select bank1
  5615  0231  00DA               	movwf	(_TMR2_InterruptHandler+1)^(0+128)
  5616  0232  0140               	movlb	0	; select bank0
  5617  0233  0822               	movf	TMR2_SetInterruptHandler@InterruptHandler,w
  5618  0234  0141               	movlb	1	; select bank1
  5619  0235  00D9               	movwf	_TMR2_InterruptHandler^(0+128)
  5620  0236  0008               	return
  5621  0237                     __end_of_TMR2_SetInterruptHandler:	
  5622  0237                     __ptext28:	
  5623 ;; *************** function _SYSTEM_Initialize *****************
  5624 ;; Defined at:
  5625 ;;		line 50 in file "mcc_generated_files/mcc.c"
  5626 ;; Parameters:    Size  Location     Type
  5627 ;;		None
  5628 ;; Auto vars:     Size  Location     Type
  5629 ;;		None
  5630 ;; Return value:  Size  Location     Type
  5631 ;;                  1    wreg      void 
  5632 ;; Registers used:
  5633 ;;		wreg, status,2, status,0, pclath, cstack
  5634 ;; Tracked objects:
  5635 ;;		On entry : B3F/0
  5636 ;;		On exit  : 3F/E
  5637 ;;		Unchanged: 0/0
  5638 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5639 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5640 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5641 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5642 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5643 ;;Total ram usage:        0 bytes
  5644 ;; Hardware stack levels used:    1
  5645 ;; Hardware stack levels required when called:    7
  5646 ;; This function calls:
  5647 ;;		_ADC_Initialize
  5648 ;;		_EUSART1_Initialize
  5649 ;;		_EUSART2_Initialize
  5650 ;;		_OSCILLATOR_Initialize
  5651 ;;		_PIN_MANAGER_Initialize
  5652 ;;		_PMD_Initialize
  5653 ;;		_TMR2_Initialize
  5654 ;; This function is called by:
  5655 ;;		_main
  5656 ;; This function uses a non-reentrant model
  5657 ;;
  5658                           
  5659                           
  5660                           ;psect for function _SYSTEM_Initialize
  5661  0237                     _SYSTEM_Initialize:	
  5662                           
  5663                           ;mcc.c: 52: PMD_Initialize();
  5664                           
  5665                           ;incstack = 0
  5666                           ; Regs used in _SYSTEM_Initialize: [wreg+status,2+status,0+pclath+cstack]
  5667  0237  2289  3180         	fcall	_PMD_Initialize
  5668                           
  5669                           ;mcc.c: 53: PIN_MANAGER_Initialize();
  5670  0239  2256  3180         	fcall	_PIN_MANAGER_Initialize
  5671                           
  5672                           ;mcc.c: 54: OSCILLATOR_Initialize();
  5673  023B  224C  3180         	fcall	_OSCILLATOR_Initialize
  5674                           
  5675                           ;mcc.c: 55: ADC_Initialize();
  5676  023D  2244  3180         	fcall	_ADC_Initialize
  5677                           
  5678                           ;mcc.c: 56: TMR2_Initialize();
  5679  023F  2291               	fcall	_TMR2_Initialize
  5680                           
  5681                           ;mcc.c: 57: EUSART1_Initialize();
  5682  0240  318E  26F0         	fcall	_EUSART1_Initialize
  5683                           
  5684                           ;mcc.c: 58: EUSART2_Initialize();
  5685  0242  318E  2EBF         	ljmp	l3790
  5686  0244                     __end_of_SYSTEM_Initialize:	
  5687  0244                     __ptext40:	
  5688 ;; *************** function _ADC_Initialize *****************
  5689 ;; Defined at:
  5690 ;;		line 65 in file "mcc_generated_files/adc.c"
  5691 ;; Parameters:    Size  Location     Type
  5692 ;;		None
  5693 ;; Auto vars:     Size  Location     Type
  5694 ;;		None
  5695 ;; Return value:  Size  Location     Type
  5696 ;;                  1    wreg      void 
  5697 ;; Registers used:
  5698 ;;		wreg, status,2
  5699 ;; Tracked objects:
  5700 ;;		On entry : B3F/11
  5701 ;;		On exit  : B3F/1
  5702 ;;		Unchanged: B00/0
  5703 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5704 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5705 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5706 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5707 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5708 ;;Total ram usage:        0 bytes
  5709 ;; Hardware stack levels used:    1
  5710 ;; Hardware stack levels required when called:    5
  5711 ;; This function calls:
  5712 ;;		Nothing
  5713 ;; This function is called by:
  5714 ;;		_SYSTEM_Initialize
  5715 ;; This function uses a non-reentrant model
  5716 ;;
  5717                           
  5718                           
  5719                           ;psect for function _ADC_Initialize
  5720  0244                     _ADC_Initialize:	
  5721                           
  5722                           ;adc.c: 70: ADCON0 = 0x01;
  5723                           
  5724                           ;incstack = 0
  5725                           ; Regs used in _ADC_Initialize: [wreg+status,2]
  5726  0244  3001               	movlw	1
  5727  0245  0141               	movlb	1	; select bank1
  5728  0246  009D               	movwf	29	;volatile
  5729                           
  5730                           ;adc.c: 73: ADCON1 = 0x50;
  5731  0247  3050               	movlw	80
  5732  0248  009E               	movwf	30	;volatile
  5733                           
  5734                           ;adc.c: 76: ADRESL = 0x00;
  5735  0249  019B               	clrf	27	;volatile
  5736                           
  5737                           ;adc.c: 79: ADRESH = 0x00;
  5738  024A  019C               	clrf	28	;volatile
  5739  024B  0008               	return
  5740  024C                     __end_of_ADC_Initialize:	
  5741  024C                     __ptext33:	
  5742 ;; *************** function _OSCILLATOR_Initialize *****************
  5743 ;; Defined at:
  5744 ;;		line 61 in file "mcc_generated_files/mcc.c"
  5745 ;; Parameters:    Size  Location     Type
  5746 ;;		None
  5747 ;; Auto vars:     Size  Location     Type
  5748 ;;		None
  5749 ;; Return value:  Size  Location     Type
  5750 ;;                  1    wreg      void 
  5751 ;; Registers used:
  5752 ;;		wreg, status,2
  5753 ;; Tracked objects:
  5754 ;;		On entry : B3F/3D
  5755 ;;		On exit  : B3F/11
  5756 ;;		Unchanged: B00/0
  5757 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5758 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5759 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5760 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5761 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5762 ;;Total ram usage:        0 bytes
  5763 ;; Hardware stack levels used:    1
  5764 ;; Hardware stack levels required when called:    5
  5765 ;; This function calls:
  5766 ;;		Nothing
  5767 ;; This function is called by:
  5768 ;;		_SYSTEM_Initialize
  5769 ;; This function uses a non-reentrant model
  5770 ;;
  5771                           
  5772                           
  5773                           ;psect for function _OSCILLATOR_Initialize
  5774  024C                     _OSCILLATOR_Initialize:	
  5775                           
  5776                           ;mcc.c: 64: OSCCON1 = 0x60;
  5777                           
  5778                           ;incstack = 0
  5779                           ; Regs used in _OSCILLATOR_Initialize: [wreg+status,2]
  5780  024C  3060               	movlw	96
  5781  024D  0151               	movlb	17	; select bank17
  5782  024E  008D               	movwf	13	;volatile
  5783                           
  5784                           ;mcc.c: 66: OSCCON3 = 0x00;
  5785  024F  018F               	clrf	15	;volatile
  5786                           
  5787                           ;mcc.c: 68: OSCEN = 0x00;
  5788  0250  0191               	clrf	17	;volatile
  5789                           
  5790                           ;mcc.c: 70: OSCFRQ = 0x05;
  5791  0251  3005               	movlw	5
  5792  0252  0093               	movwf	19	;volatile
  5793                           
  5794                           ;mcc.c: 72: OSCSTAT = 0x00;
  5795  0253  0190               	clrf	16	;volatile
  5796                           
  5797                           ;mcc.c: 74: OSCTUNE = 0x00;
  5798  0254  0192               	clrf	18	;volatile
  5799  0255  0008               	return
  5800  0256                     __end_of_OSCILLATOR_Initialize:	
  5801  0256                     __ptext32:	
  5802 ;; *************** function _PIN_MANAGER_Initialize *****************
  5803 ;; Defined at:
  5804 ;;		line 57 in file "mcc_generated_files/pin_manager.c"
  5805 ;; Parameters:    Size  Location     Type
  5806 ;;		None
  5807 ;; Auto vars:     Size  Location     Type
  5808 ;;		None
  5809 ;; Return value:  Size  Location     Type
  5810 ;;                  1    wreg      void 
  5811 ;; Registers used:
  5812 ;;		wreg, status,2, status,0
  5813 ;; Tracked objects:
  5814 ;;		On entry : B3F/F
  5815 ;;		On exit  : B3F/3D
  5816 ;;		Unchanged: B00/0
  5817 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5818 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5819 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5820 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5821 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5822 ;;Total ram usage:        0 bytes
  5823 ;; Hardware stack levels used:    1
  5824 ;; Hardware stack levels required when called:    5
  5825 ;; This function calls:
  5826 ;;		Nothing
  5827 ;; This function is called by:
  5828 ;;		_SYSTEM_Initialize
  5829 ;; This function uses a non-reentrant model
  5830 ;;
  5831                           
  5832                           
  5833                           ;psect for function _PIN_MANAGER_Initialize
  5834  0256                     _PIN_MANAGER_Initialize:	
  5835                           
  5836                           ;pin_manager.c: 62: LATE = 0x00;
  5837                           
  5838                           ;incstack = 0
  5839                           ; Regs used in _PIN_MANAGER_Initialize: [wreg+status,2+status,0]
  5840  0256  0140               	movlb	0	; select bank0
  5841  0257  019C               	clrf	28	;volatile
  5842                           
  5843                           ;pin_manager.c: 63: LATD = 0x00;
  5844  0258  019B               	clrf	27	;volatile
  5845                           
  5846                           ;pin_manager.c: 64: LATA = 0x00;
  5847  0259  0198               	clrf	24	;volatile
  5848                           
  5849                           ;pin_manager.c: 65: LATB = 0x00;
  5850  025A  0199               	clrf	25	;volatile
  5851                           
  5852                           ;pin_manager.c: 66: LATC = 0x00;
  5853  025B  019A               	clrf	26	;volatile
  5854                           
  5855                           ;pin_manager.c: 71: TRISE = 0x0F;
  5856  025C  300F               	movlw	15
  5857  025D  0096               	movwf	22	;volatile
  5858                           
  5859                           ;pin_manager.c: 72: TRISA = 0x7F;
  5860  025E  307F               	movlw	127
  5861  025F  0092               	movwf	18	;volatile
  5862                           
  5863                           ;pin_manager.c: 73: TRISB = 0xBF;
  5864  0260  30BF               	movlw	191
  5865  0261  0093               	movwf	19	;volatile
  5866                           
  5867                           ;pin_manager.c: 74: TRISC = 0xBF;
  5868  0262  0094               	movwf	20	;volatile
  5869                           
  5870                           ;pin_manager.c: 75: TRISD = 0xFF;
  5871  0263  30FF               	movlw	255
  5872  0264  0095               	movwf	21	;volatile
  5873                           
  5874                           ;pin_manager.c: 80: ANSELD = 0xFF;
  5875  0265  017E               	movlb	62	; select bank62
  5876  0266  00D9               	movwf	89	;volatile
  5877                           
  5878                           ;pin_manager.c: 81: ANSELC = 0x57;
  5879  0267  3057               	movlw	87
  5880  0268  00CE               	movwf	78	;volatile
  5881                           
  5882                           ;pin_manager.c: 82: ANSELB = 0xEF;
  5883  0269  30EF               	movlw	239
  5884  026A  00C3               	movwf	67	;volatile
  5885                           
  5886                           ;pin_manager.c: 83: ANSELE = 0x07;
  5887  026B  3007               	movlw	7
  5888  026C  00E4               	movwf	100	;volatile
  5889                           
  5890                           ;pin_manager.c: 84: ANSELA = 0xFF;
  5891  026D  30FF               	movlw	255
  5892  026E  00B8               	movwf	56	;volatile
  5893                           
  5894                           ;pin_manager.c: 89: WPUD = 0x00;
  5895  026F  01DA               	clrf	90	;volatile
  5896                           
  5897                           ;pin_manager.c: 90: WPUE = 0x00;
  5898  0270  01E5               	clrf	101	;volatile
  5899                           
  5900                           ;pin_manager.c: 91: WPUB = 0x00;
  5901  0271  01C4               	clrf	68	;volatile
  5902                           
  5903                           ;pin_manager.c: 92: WPUA = 0x00;
  5904  0272  01B9               	clrf	57	;volatile
  5905                           
  5906                           ;pin_manager.c: 93: WPUC = 0x00;
  5907  0273  01CF               	clrf	79	;volatile
  5908                           
  5909                           ;pin_manager.c: 98: ODCONE = 0x00;
  5910  0274  01E6               	clrf	102	;volatile
  5911                           
  5912                           ;pin_manager.c: 99: ODCONA = 0x00;
  5913  0275  01BA               	clrf	58	;volatile
  5914                           
  5915                           ;pin_manager.c: 100: ODCONB = 0x00;
  5916  0276  01C5               	clrf	69	;volatile
  5917                           
  5918                           ;pin_manager.c: 101: ODCONC = 0x00;
  5919  0277  01D0               	clrf	80	;volatile
  5920                           
  5921                           ;pin_manager.c: 102: ODCOND = 0x00;
  5922  0278  01DB               	clrf	91	;volatile
  5923                           
  5924                           ;pin_manager.c: 111: RB6PPS = 0x11;
  5925  0279  3011               	movlw	17
  5926  027A  009E               	movwf	30	;volatile
  5927                           
  5928                           ;pin_manager.c: 112: RX1DTPPSbits.RX1DTPPS = 0x17;
  5929  027B  017D               	movlb	61	; select bank61
  5930  027C  084B               	movf	75,w	;volatile
  5931  027D  39C0               	andlw	-64
  5932  027E  3817               	iorlw	23
  5933  027F  00CB               	movwf	75	;volatile
  5934                           
  5935                           ;pin_manager.c: 113: RC6PPS = 0x0F;
  5936  0280  300F               	movlw	15
  5937  0281  017E               	movlb	62	; select bank62
  5938  0282  00A6               	movwf	38	;volatile
  5939                           
  5940                           ;pin_manager.c: 114: T2INPPSbits.T2INPPS = 0x13;
  5941  0283  017D               	movlb	61	; select bank61
  5942  0284  081C               	movf	28,w	;volatile
  5943  0285  39C0               	andlw	-64
  5944  0286  3813               	iorlw	19
  5945  0287  009C               	movwf	28	;volatile
  5946  0288  0008               	return
  5947  0289                     __end_of_PIN_MANAGER_Initialize:	
  5948  0289                     __ptext31:	
  5949 ;; *************** function _PMD_Initialize *****************
  5950 ;; Defined at:
  5951 ;;		line 77 in file "mcc_generated_files/mcc.c"
  5952 ;; Parameters:    Size  Location     Type
  5953 ;;		None
  5954 ;; Auto vars:     Size  Location     Type
  5955 ;;		None
  5956 ;; Return value:  Size  Location     Type
  5957 ;;                  1    wreg      void 
  5958 ;; Registers used:
  5959 ;;		status,2
  5960 ;; Tracked objects:
  5961 ;;		On entry : B3F/0
  5962 ;;		On exit  : B3F/F
  5963 ;;		Unchanged: B00/0
  5964 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5965 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5966 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5967 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5968 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5969 ;;Total ram usage:        0 bytes
  5970 ;; Hardware stack levels used:    1
  5971 ;; Hardware stack levels required when called:    5
  5972 ;; This function calls:
  5973 ;;		Nothing
  5974 ;; This function is called by:
  5975 ;;		_SYSTEM_Initialize
  5976 ;; This function uses a non-reentrant model
  5977 ;;
  5978                           
  5979                           
  5980                           ;psect for function _PMD_Initialize
  5981  0289                     _PMD_Initialize:	
  5982                           
  5983                           ;mcc.c: 80: PMD0 = 0x00;
  5984                           
  5985                           ;incstack = 0
  5986                           ; Regs used in _PMD_Initialize: [status,2]
  5987  0289  014F               	movlb	15	; select bank15
  5988  028A  0196               	clrf	22	;volatile
  5989                           
  5990                           ;mcc.c: 82: PMD1 = 0x00;
  5991  028B  0197               	clrf	23	;volatile
  5992                           
  5993                           ;mcc.c: 84: PMD2 = 0x00;
  5994  028C  0198               	clrf	24	;volatile
  5995                           
  5996                           ;mcc.c: 86: PMD3 = 0x00;
  5997  028D  0199               	clrf	25	;volatile
  5998                           
  5999                           ;mcc.c: 88: PMD4 = 0x00;
  6000  028E  019A               	clrf	26	;volatile
  6001                           
  6002                           ;mcc.c: 90: PMD5 = 0x00;
  6003  028F  019B               	clrf	27	;volatile
  6004  0290  0008               	return
  6005  0291                     __end_of_PMD_Initialize:	
  6006  0291                     __ptext29:	
  6007 ;; *************** function _TMR2_Initialize *****************
  6008 ;; Defined at:
  6009 ;;		line 64 in file "mcc_generated_files/tmr2.c"
  6010 ;; Parameters:    Size  Location     Type
  6011 ;;		None
  6012 ;; Auto vars:     Size  Location     Type
  6013 ;;		None
  6014 ;; Return value:  Size  Location     Type
  6015 ;;                  1    wreg      void 
  6016 ;; Registers used:
  6017 ;;		wreg, status,2, status,0, pclath, cstack
  6018 ;; Tracked objects:
  6019 ;;		On entry : B3F/1
  6020 ;;		On exit  : 3F/5
  6021 ;;		Unchanged: 0/0
  6022 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6023 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6024 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6025 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6026 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6027 ;;Total ram usage:        0 bytes
  6028 ;; Hardware stack levels used:    1
  6029 ;; Hardware stack levels required when called:    6
  6030 ;; This function calls:
  6031 ;;		_TMR2_SetInterruptHandler
  6032 ;; This function is called by:
  6033 ;;		_SYSTEM_Initialize
  6034 ;; This function uses a non-reentrant model
  6035 ;;
  6036                           
  6037                           
  6038                           ;psect for function _TMR2_Initialize
  6039  0291                     _TMR2_Initialize:	
  6040                           
  6041                           ;tmr2.c: 69: T2CLKCON = 0x01;
  6042                           
  6043                           ;incstack = 0
  6044                           ; Regs used in _TMR2_Initialize: [wreg+status,2+status,0+pclath+cstack]
  6045  0291  3001               	movlw	1
  6046  0292  0145               	movlb	5	; select bank5
  6047  0293  0090               	movwf	16	;volatile
  6048                           
  6049                           ;tmr2.c: 72: T2HLT = 0x00;
  6050  0294  018F               	clrf	15	;volatile
  6051                           
  6052                           ;tmr2.c: 75: T2RST = 0x00;
  6053  0295  0191               	clrf	17	;volatile
  6054                           
  6055                           ;tmr2.c: 78: T2PR = 0x9B;
  6056  0296  309B               	movlw	155
  6057  0297  008D               	movwf	13	;volatile
  6058                           
  6059                           ;tmr2.c: 81: T2TMR = 0x00;
  6060  0298  018C               	clrf	12	;volatile
  6061                           
  6062                           ;tmr2.c: 84: PIR4bits.TMR2IF = 0;
  6063  0299  014E               	movlb	14	; select bank14
  6064  029A  1090               	bcf	16,1	;volatile
  6065                           
  6066                           ;tmr2.c: 87: PIE4bits.TMR2IE = 1;
  6067  029B  149A               	bsf	26,1	;volatile
  6068                           
  6069                           ;tmr2.c: 90: TMR2_SetInterruptHandler(TMR2_DefaultInterruptHandler);
  6070  029C  30F6               	movlw	low _TMR2_DefaultInterruptHandler
  6071  029D  0140               	movlb	0	; select bank0
  6072  029E  00A2               	movwf	TMR2_SetInterruptHandler@InterruptHandler
  6073  029F  3007               	movlw	high _TMR2_DefaultInterruptHandler
  6074  02A0  00A3               	movwf	TMR2_SetInterruptHandler@InterruptHandler+1
  6075  02A1  222F               	fcall	_TMR2_SetInterruptHandler
  6076                           
  6077                           ;tmr2.c: 93: T2CON = 0xE7;
  6078  02A2  30E7               	movlw	231
  6079  02A3  0145               	movlb	5	; select bank5
  6080  02A4  008E               	movwf	14	;volatile
  6081  02A5  0008               	return
  6082  02A6                     __end_of_TMR2_Initialize:	
  6083  02A6                     __ptext27:	
  6084 ;; *************** function _TMR2_Start *****************
  6085 ;; Defined at:
  6086 ;;		line 108 in file "mcc_generated_files/tmr2.c"
  6087 ;; Parameters:    Size  Location     Type
  6088 ;;		None
  6089 ;; Auto vars:     Size  Location     Type
  6090 ;;		None
  6091 ;; Return value:  Size  Location     Type
  6092 ;;                  1    wreg      void 
  6093 ;; Registers used:
  6094 ;;		None
  6095 ;; Tracked objects:
  6096 ;;		On entry : 3F/1
  6097 ;;		On exit  : 3F/5
  6098 ;;		Unchanged: 0/0
  6099 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6100 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6101 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6102 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6103 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6104 ;;Total ram usage:        0 bytes
  6105 ;; Hardware stack levels used:    1
  6106 ;; Hardware stack levels required when called:    5
  6107 ;; This function calls:
  6108 ;;		Nothing
  6109 ;; This function is called by:
  6110 ;;		_main
  6111 ;; This function uses a non-reentrant model
  6112 ;;
  6113                           
  6114                           
  6115                           ;psect for function _TMR2_Start
  6116  02A6                     _TMR2_Start:	
  6117                           
  6118                           ;tmr2.c: 111: T2CONbits.TMR2ON = 1;
  6119                           
  6120                           ;incstack = 0
  6121                           ; Regs used in _TMR2_Start: []
  6122  02A6  0145               	movlb	5	; select bank5
  6123  02A7  178E               	bsf	14,7	;volatile
  6124  02A8  0008               	return
  6125  02A9                     __end_of_TMR2_Start:	
  6126  02A9                     __ptext25:	
  6127 ;; *************** function ___fltol *****************
  6128 ;; Defined at:
  6129 ;;		line 43 in file "C:\Program Files (x86)\Microchip\xc8\v1.44\sources\common\fltol.c"
  6130 ;; Parameters:    Size  Location     Type
  6131 ;;  f1              4   31[BANK0 ] int 
  6132 ;; Auto vars:     Size  Location     Type
  6133 ;;  exp1            1   40[BANK0 ] unsigned char 
  6134 ;;  sign1           1   39[BANK0 ] unsigned char 
  6135 ;; Return value:  Size  Location     Type
  6136 ;;                  4   31[BANK0 ] long 
  6137 ;; Registers used:
  6138 ;;		wreg, status,2, status,0
  6139 ;; Tracked objects:
  6140 ;;		On entry : 3F/0
  6141 ;;		On exit  : 3F/0
  6142 ;;		Unchanged: 0/0
  6143 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6144 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6145 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6146 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6147 ;;      Totals:         0      10       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6148 ;;Total ram usage:       10 bytes
  6149 ;; Hardware stack levels used:    1
  6150 ;; Hardware stack levels required when called:    5
  6151 ;; This function calls:
  6152 ;;		Nothing
  6153 ;; This function is called by:
  6154 ;;		_main
  6155 ;; This function uses a non-reentrant model
  6156 ;;
  6157                           
  6158                           
  6159                           ;psect for function ___fltol
  6160  02A9                     ___fltol:	
  6161                           
  6162                           ;incstack = 0
  6163                           ; Regs used in ___fltol: [wreg+status,2+status,0]
  6164  02A9  23F9  3180         	fcall	PL14	;call to abstracted procedure
  6165  02AB  1003               	clrc
  6166  02AC  0D45               	rlf	??___fltol+2,w
  6167  02AD  0D46               	rlf	??___fltol+3,w
  6168  02AE  00C8               	movwf	___fltol@exp1
  6169  02AF  0848               	movf	___fltol@exp1,w
  6170  02B0  1D03               	btfss	3,2
  6171  02B1  2AB7               	goto	l4156
  6172  02B2                     l4154:	
  6173  02B2  01BF               	clrf	?___fltol
  6174  02B3  01C0               	clrf	?___fltol+1
  6175  02B4  01C1               	clrf	?___fltol+2
  6176  02B5  01C2               	clrf	?___fltol+3
  6177  02B6  0008               	return
  6178  02B7                     l4156:	
  6179  02B7  23F9  3180         	fcall	PL14	;call to abstracted procedure
  6180  02B9  301F               	movlw	31
  6181  02BA                     u4165:	
  6182  02BA  36C6               	lsrf	??___fltol+3,f
  6183  02BB  0CC5               	rrf	??___fltol+2,f
  6184  02BC  0CC4               	rrf	??___fltol+1,f
  6185  02BD  0CC3               	rrf	??___fltol,f
  6186  02BE  0B89               	decfsz	9,f
  6187  02BF  2ABA               	goto	u4165
  6188  02C0  0843               	movf	??___fltol,w
  6189  02C1  00C7               	movwf	___fltol@sign1
  6190  02C2  3096               	movlw	150
  6191  02C3  17C1               	bsf	___fltol@f1+2,7
  6192  02C4  01C2               	clrf	___fltol@f1+3
  6193  02C5  02C8               	subwf	___fltol@exp1,f
  6194  02C6  1FC8               	btfss	___fltol@exp1,7
  6195  02C7  2AD4               	goto	l4174
  6196  02C8  0848               	movf	___fltol@exp1,w
  6197  02C9  3A80               	xorlw	128
  6198  02CA  3E97               	addlw	151
  6199  02CB  1C03               	btfss	3,0
  6200  02CC  2AB2               	goto	l4154
  6201  02CD                     l4170:	
  6202  02CD  36C2               	lsrf	___fltol@f1+3,f
  6203  02CE  0CC1               	rrf	___fltol@f1+2,f
  6204  02CF  0CC0               	rrf	___fltol@f1+1,f
  6205  02D0  0CBF               	rrf	___fltol@f1,f
  6206  02D1  0FC8               	incfsz	___fltol@exp1,f
  6207  02D2  2ACD               	goto	l4170
  6208  02D3  2AE1               	goto	l4182
  6209  02D4                     l4174:	
  6210  02D4  3020               	movlw	32
  6211  02D5  0248               	subwf	___fltol@exp1,w
  6212  02D6  1803               	btfsc	3,0
  6213  02D7  2AB2               	goto	l4154
  6214  02D8                     l4180:	
  6215  02D8  0848               	movf	___fltol@exp1,w
  6216  02D9  1903               	btfsc	3,2
  6217  02DA  2AE1               	goto	l4182
  6218  02DB  35BF               	lslf	___fltol@f1,f
  6219  02DC  0DC0               	rlf	___fltol@f1+1,f
  6220  02DD  0DC1               	rlf	___fltol@f1+2,f
  6221  02DE  0DC2               	rlf	___fltol@f1+3,f
  6222  02DF  03C8               	decf	___fltol@exp1,f
  6223  02E0  2AD8               	goto	l4180
  6224  02E1                     l4182:	
  6225  02E1  0847               	movf	___fltol@sign1,w
  6226  02E2  1903               	btfsc	3,2
  6227  02E3  0008               	return
  6228  02E4  09BF               	comf	___fltol@f1,f
  6229  02E5  09C0               	comf	___fltol@f1+1,f
  6230  02E6  09C1               	comf	___fltol@f1+2,f
  6231  02E7  09C2               	comf	___fltol@f1+3,f
  6232  02E8  0ABF               	incf	___fltol@f1,f
  6233  02E9  1903               	skipnz
  6234  02EA  0AC0               	incf	___fltol@f1+1,f
  6235  02EB  1903               	skipnz
  6236  02EC  0AC1               	incf	___fltol@f1+2,f
  6237  02ED  1903               	skipnz
  6238  02EE  0AC2               	incf	___fltol@f1+3,f
  6239  02EF  0008               	return
  6240  02F0                     __end_of___fltol:	
  6241  02F0                     __ptext24:	
  6242 ;; *************** function _abs *****************
  6243 ;; Defined at:
  6244 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v1.44\sources\common\abs.c"
  6245 ;; Parameters:    Size  Location     Type
  6246 ;;  a               2    2[BANK0 ] int 
  6247 ;; Auto vars:     Size  Location     Type
  6248 ;;		None
  6249 ;; Return value:  Size  Location     Type
  6250 ;;                  2    2[BANK0 ] int 
  6251 ;; Registers used:
  6252 ;;		wreg, status,2, status,0
  6253 ;; Tracked objects:
  6254 ;;		On entry : 3F/0
  6255 ;;		On exit  : 3F/0
  6256 ;;		Unchanged: 0/0
  6257 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6258 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6259 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6260 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6261 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6262 ;;Total ram usage:        4 bytes
  6263 ;; Hardware stack levels used:    1
  6264 ;; Hardware stack levels required when called:    5
  6265 ;; This function calls:
  6266 ;;		Nothing
  6267 ;; This function is called by:
  6268 ;;		_main
  6269 ;; This function uses a non-reentrant model
  6270 ;;
  6271                           
  6272                           
  6273                           ;psect for function _abs
  6274  02F0                     _abs:	
  6275                           
  6276                           ;incstack = 0
  6277                           ; Regs used in _abs: [wreg+status,2+status,0]
  6278  02F0  1FA3               	btfss	abs@a+1,7
  6279  02F1  0008               	return
  6280  02F2  0922               	comf	abs@a,w
  6281  02F3  00A4               	movwf	??_abs
  6282  02F4  0923               	comf	abs@a+1,w
  6283  02F5  00A5               	movwf	??_abs+1
  6284  02F6  0AA4               	incf	??_abs,f
  6285  02F7  1903               	skipnz
  6286  02F8  0AA5               	incf	??_abs+1,f
  6287  02F9  0824               	movf	??_abs,w
  6288  02FA  00A2               	movwf	?_abs
  6289  02FB  0825               	movf	??_abs+1,w
  6290  02FC  00A3               	movwf	?_abs+1
  6291  02FD  0008               	return
  6292  02FE                     __end_of_abs:	
  6293  02FE                     __ptext21:	
  6294 ;; *************** function ___awmod *****************
  6295 ;; Defined at:
  6296 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.44\sources\common\awmod.c"
  6297 ;; Parameters:    Size  Location     Type
  6298 ;;  divisor         2    2[BANK0 ] int 
  6299 ;;  dividend        2    4[BANK0 ] int 
  6300 ;; Auto vars:     Size  Location     Type
  6301 ;;  sign            1    7[BANK0 ] unsigned char 
  6302 ;;  counter         1    6[BANK0 ] unsigned char 
  6303 ;; Return value:  Size  Location     Type
  6304 ;;                  2    2[BANK0 ] int 
  6305 ;; Registers used:
  6306 ;;		wreg, status,2, status,0
  6307 ;; Tracked objects:
  6308 ;;		On entry : 3F/0
  6309 ;;		On exit  : 3F/0
  6310 ;;		Unchanged: 0/0
  6311 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6312 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6313 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6314 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6315 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6316 ;;Total ram usage:        6 bytes
  6317 ;; Hardware stack levels used:    1
  6318 ;; Hardware stack levels required when called:    5
  6319 ;; This function calls:
  6320 ;;		Nothing
  6321 ;; This function is called by:
  6322 ;;		_main
  6323 ;;		_madata_insert
  6324 ;;		_madata_remove
  6325 ;;		_pkdata_insert
  6326 ;;		_pkdata_remove
  6327 ;;		_sbuf_remove
  6328 ;;		_get_neutral_peaktopeak
  6329 ;; This function uses a non-reentrant model
  6330 ;;
  6331                           
  6332                           
  6333                           ;psect for function ___awmod
  6334  02FE                     ___awmod:	
  6335                           
  6336                           ;incstack = 0
  6337                           ; Regs used in ___awmod: [wreg+status,2+status,0]
  6338  02FE  01A7               	clrf	___awmod@sign
  6339  02FF  1FA5               	btfss	___awmod@dividend+1,7
  6340  0300  2B08               	goto	l3622
  6341  0301  09A4               	comf	___awmod@dividend,f
  6342  0302  09A5               	comf	___awmod@dividend+1,f
  6343  0303  0AA4               	incf	___awmod@dividend,f
  6344  0304  1903               	skipnz
  6345  0305  0AA5               	incf	___awmod@dividend+1,f
  6346  0306  01A7               	clrf	___awmod@sign
  6347  0307  0AA7               	incf	___awmod@sign,f
  6348  0308                     l3622:	
  6349  0308  1FA3               	btfss	___awmod@divisor+1,7
  6350  0309  2B0F               	goto	l3626
  6351  030A  09A2               	comf	___awmod@divisor,f
  6352  030B  09A3               	comf	___awmod@divisor+1,f
  6353  030C  0AA2               	incf	___awmod@divisor,f
  6354  030D  1903               	skipnz
  6355  030E  0AA3               	incf	___awmod@divisor+1,f
  6356  030F                     l3626:	
  6357  030F  0822               	movf	___awmod@divisor,w
  6358  0310  0423               	iorwf	___awmod@divisor+1,w
  6359  0311  1903               	btfsc	3,2
  6360  0312  2B2A               	goto	l3642
  6361  0313  01A6               	clrf	___awmod@counter
  6362  0314                     L8:	
  6363  0314  0AA6               	incf	___awmod@counter,f
  6364  0315  1BA3               	btfsc	___awmod@divisor+1,7
  6365  0316  2B1A               	goto	l3634
  6366  0317  35A2               	lslf	___awmod@divisor,f
  6367  0318  0DA3               	rlf	___awmod@divisor+1,f
  6368  0319  2B14               	goto	L8
  6369  031A                     l3634:	
  6370  031A  0823               	movf	___awmod@divisor+1,w
  6371  031B  0225               	subwf	___awmod@dividend+1,w
  6372  031C  1D03               	skipz
  6373  031D  2B20               	goto	u3625
  6374  031E  0822               	movf	___awmod@divisor,w
  6375  031F  0224               	subwf	___awmod@dividend,w
  6376  0320                     u3625:	
  6377  0320  1C03               	skipc
  6378  0321  2B26               	goto	l3638
  6379  0322  0822               	movf	___awmod@divisor,w
  6380  0323  02A4               	subwf	___awmod@dividend,f
  6381  0324  0823               	movf	___awmod@divisor+1,w
  6382  0325  3BA5               	subwfb	___awmod@dividend+1,f
  6383  0326                     l3638:	
  6384  0326  36A3               	lsrf	___awmod@divisor+1,f
  6385  0327  0CA2               	rrf	___awmod@divisor,f
  6386  0328  0BA6               	decfsz	___awmod@counter,f
  6387  0329  2B1A               	goto	l3634
  6388  032A                     l3642:	
  6389  032A  0827               	movf	___awmod@sign,w
  6390  032B  1903               	btfsc	3,2
  6391  032C  2B32               	goto	l3646
  6392  032D  09A4               	comf	___awmod@dividend,f
  6393  032E  09A5               	comf	___awmod@dividend+1,f
  6394  032F  0AA4               	incf	___awmod@dividend,f
  6395  0330  1903               	skipnz
  6396  0331  0AA5               	incf	___awmod@dividend+1,f
  6397  0332                     l3646:	
  6398  0332  0825               	movf	___awmod@dividend+1,w
  6399  0333  00A3               	movwf	?___awmod+1
  6400  0334  0824               	movf	___awmod@dividend,w
  6401  0335  00A2               	movwf	?___awmod
  6402  0336  0008               	return
  6403  0337                     __end_of___awmod:	
  6404  0337                     __ptext16:	
  6405 ;; *************** function _get_moving_average *****************
  6406 ;; Defined at:
  6407 ;;		line 99 in file "signal_processing.c"
  6408 ;; Parameters:    Size  Location     Type
  6409 ;;  datapoint       2   23[BANK0 ] unsigned int 
  6410 ;; Auto vars:     Size  Location     Type
  6411 ;;		None
  6412 ;; Return value:  Size  Location     Type
  6413 ;;                  4   23[BANK0 ] float 
  6414 ;; Registers used:
  6415 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6416 ;; Tracked objects:
  6417 ;;		On entry : 3F/0
  6418 ;;		On exit  : 3F/0
  6419 ;;		Unchanged: 0/0
  6420 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6421 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6422 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6423 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6424 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6425 ;;Total ram usage:        8 bytes
  6426 ;; Hardware stack levels used:    1
  6427 ;; Hardware stack levels required when called:    7
  6428 ;; This function calls:
  6429 ;;		___lwdiv
  6430 ;;		___xxtofl
  6431 ;;		_madata_insert
  6432 ;;		_madata_isfull
  6433 ;;		_madata_remove
  6434 ;; This function is called by:
  6435 ;;		_main
  6436 ;; This function uses a non-reentrant model
  6437 ;;
  6438                           
  6439                           
  6440                           ;psect for function _get_moving_average
  6441  0337                     _get_moving_average:	
  6442                           
  6443                           ;signal_processing.c: 101: madata_insert(datapoint);
  6444                           
  6445                           ;incstack = 0
  6446                           ; Regs used in _get_moving_average: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  6447  0337  0838               	movf	get_moving_average@datapoint+1,w
  6448  0338  00A9               	movwf	madata_insert@element+1
  6449  0339  0837               	movf	get_moving_average@datapoint,w
  6450  033A  00A8               	movwf	madata_insert@element
  6451  033B  23C5  3180         	fcall	_madata_insert
  6452                           
  6453                           ;signal_processing.c: 104: ma_window_sum += datapoint;
  6454  033D  0837               	movf	get_moving_average@datapoint,w
  6455  033E  0141               	movlb	1	; select bank1
  6456  033F  07CA               	addwf	_ma_window_sum^(0+128),f
  6457  0340  0140               	movlb	0	; select bank0
  6458  0341  0838               	movf	get_moving_average@datapoint+1,w
  6459  0342  0141               	movlb	1	; select bank1
  6460  0343  3DCB               	addwfc	(_ma_window_sum+1)^(0+128),f
  6461                           
  6462                           ;signal_processing.c: 106: if (madata_isfull())
  6463  0344  23A6  3180         	fcall	_madata_isfull
  6464  0346  3A00               	xorlw	0
  6465  0347  1903               	skipnz
  6466  0348  2B5B               	goto	l4114
  6467                           
  6468                           ;signal_processing.c: 107: {
  6469                           ;signal_processing.c: 109: ma_window_sum -= ma_data[ma_front];
  6470  0349  354E               	lslf	_ma_front,w
  6471  034A  3E20               	addlw	(low (_ma_data| (0+256)))& (0+255)
  6472  034B  0086               	movwf	6
  6473  034C  3001               	movlw	1	; select bank2/3
  6474  034D  0087               	movwf	7
  6475  034E  3F40               	moviw [0]fsr1
  6476  034F  00BB               	movwf	??_get_moving_average
  6477  0350  3F41               	moviw [1]fsr1
  6478  0351  00BC               	movwf	??_get_moving_average+1
  6479  0352  083B               	movf	??_get_moving_average,w
  6480  0353  0141               	movlb	1	; select bank1
  6481  0354  02CA               	subwf	_ma_window_sum^(0+128),f
  6482  0355  0140               	movlb	0	; select bank0
  6483  0356  083C               	movf	??_get_moving_average+1,w
  6484  0357  0141               	movlb	1	; select bank1
  6485  0358  3BCB               	subwfb	(_ma_window_sum+1)^(0+128),f
  6486                           
  6487                           ;signal_processing.c: 110: madata_remove();
  6488  0359  241A  3180         	fcall	_madata_remove
  6489  035B                     l4114:	
  6490                           
  6491                           ;signal_processing.c: 111: }
  6492                           ;signal_processing.c: 114: return ma_window_sum / (((int)(50 * 0.5))-1);
  6493  035B  0141               	movlb	1	; select bank1
  6494  035C  084B               	movf	(_ma_window_sum+1)^(0+128),w
  6495  035D  0140               	movlb	0	; select bank0
  6496  035E  00A5               	movwf	___lwdiv@dividend+1
  6497  035F  0141               	movlb	1	; select bank1
  6498  0360  084A               	movf	_ma_window_sum^(0+128),w
  6499  0361  0140               	movlb	0	; select bank0
  6500  0362  00A4               	movwf	___lwdiv@dividend
  6501  0363  3018               	movlw	24
  6502  0364  00A2               	movwf	___lwdiv@divisor
  6503  0365  01A3               	clrf	___lwdiv@divisor+1
  6504  0366  2381               	fcall	___lwdiv
  6505  0367  0822               	movf	?___lwdiv,w
  6506  0368  00BB               	movwf	??_get_moving_average
  6507  0369  0823               	movf	?___lwdiv+1,w
  6508  036A  00BC               	movwf	??_get_moving_average+1
  6509  036B  01BD               	clrf	??_get_moving_average+2
  6510  036C  01BE               	clrf	??_get_moving_average+3
  6511  036D  083E               	movf	??_get_moving_average+3,w
  6512  036E  00AC               	movwf	___xxtofl@val+3
  6513  036F  083D               	movf	??_get_moving_average+2,w
  6514  0370  00AB               	movwf	___xxtofl@val+2
  6515  0371  083C               	movf	??_get_moving_average+1,w
  6516  0372  00AA               	movwf	___xxtofl@val+1
  6517  0373  083B               	movf	??_get_moving_average,w
  6518  0374  00A9               	movwf	___xxtofl@val
  6519  0375  3000               	movlw	0
  6520  0376  3187  276B         	fcall	___xxtofl
  6521  0378  082C               	movf	?___xxtofl+3,w
  6522  0379  00BA               	movwf	?_get_moving_average+3
  6523  037A  082B               	movf	?___xxtofl+2,w
  6524  037B  00B9               	movwf	?_get_moving_average+2
  6525  037C  082A               	movf	?___xxtofl+1,w
  6526  037D  00B8               	movwf	?_get_moving_average+1
  6527  037E  0829               	movf	?___xxtofl,w
  6528  037F  00B7               	movwf	?_get_moving_average
  6529  0380  0008               	return
  6530  0381                     __end_of_get_moving_average:	
  6531  0381                     __ptext23:	
  6532 ;; *************** function ___lwdiv *****************
  6533 ;; Defined at:
  6534 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.44\sources\common\lwdiv.c"
  6535 ;; Parameters:    Size  Location     Type
  6536 ;;  divisor         2    2[BANK0 ] unsigned int 
  6537 ;;  dividend        2    4[BANK0 ] unsigned int 
  6538 ;; Auto vars:     Size  Location     Type
  6539 ;;  quotient        2    7[BANK0 ] unsigned int 
  6540 ;;  counter         1    6[BANK0 ] unsigned char 
  6541 ;; Return value:  Size  Location     Type
  6542 ;;                  2    2[BANK0 ] unsigned int 
  6543 ;; Registers used:
  6544 ;;		wreg, status,2, status,0
  6545 ;; Tracked objects:
  6546 ;;		On entry : 3F/0
  6547 ;;		On exit  : 3F/0
  6548 ;;		Unchanged: 0/0
  6549 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6550 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6551 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6552 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6553 ;;      Totals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6554 ;;Total ram usage:        7 bytes
  6555 ;; Hardware stack levels used:    1
  6556 ;; Hardware stack levels required when called:    5
  6557 ;; This function calls:
  6558 ;;		Nothing
  6559 ;; This function is called by:
  6560 ;;		_get_moving_average
  6561 ;;		__doprnt
  6562 ;; This function uses a non-reentrant model
  6563 ;;
  6564                           
  6565                           
  6566                           ;psect for function ___lwdiv
  6567  0381                     ___lwdiv:	
  6568                           
  6569                           ;incstack = 0
  6570                           ; Regs used in ___lwdiv: [wreg+status,2+status,0]
  6571  0381  01A7               	clrf	___lwdiv@quotient
  6572  0382  01A8               	clrf	___lwdiv@quotient+1
  6573  0383  0822               	movf	___lwdiv@divisor,w
  6574  0384  0423               	iorwf	___lwdiv@divisor+1,w
  6575  0385  1903               	btfsc	3,2
  6576  0386  2BA1               	goto	l3672
  6577  0387  01A6               	clrf	___lwdiv@counter
  6578  0388                     L9:	
  6579  0388  0AA6               	incf	___lwdiv@counter,f
  6580  0389  1BA3               	btfsc	___lwdiv@divisor+1,7
  6581  038A  2B8E               	goto	l3660
  6582  038B  35A2               	lslf	___lwdiv@divisor,f
  6583  038C  0DA3               	rlf	___lwdiv@divisor+1,f
  6584  038D  2B88               	goto	L9
  6585  038E                     l3660:	
  6586  038E  35A7               	lslf	___lwdiv@quotient,f
  6587  038F  0DA8               	rlf	___lwdiv@quotient+1,f
  6588  0390  0823               	movf	___lwdiv@divisor+1,w
  6589  0391  0225               	subwf	___lwdiv@dividend+1,w
  6590  0392  1D03               	skipz
  6591  0393  2B96               	goto	u3675
  6592  0394  0822               	movf	___lwdiv@divisor,w
  6593  0395  0224               	subwf	___lwdiv@dividend,w
  6594  0396                     u3675:	
  6595  0396  1C03               	skipc
  6596  0397  2B9D               	goto	l3668
  6597  0398  0822               	movf	___lwdiv@divisor,w
  6598  0399  02A4               	subwf	___lwdiv@dividend,f
  6599  039A  0823               	movf	___lwdiv@divisor+1,w
  6600  039B  3BA5               	subwfb	___lwdiv@dividend+1,f
  6601  039C  1427               	bsf	___lwdiv@quotient,0
  6602  039D                     l3668:	
  6603  039D  36A3               	lsrf	___lwdiv@divisor+1,f
  6604  039E  0CA2               	rrf	___lwdiv@divisor,f
  6605  039F  0BA6               	decfsz	___lwdiv@counter,f
  6606  03A0  2B8E               	goto	l3660
  6607  03A1                     l3672:	
  6608  03A1  0828               	movf	___lwdiv@quotient+1,w
  6609  03A2  00A3               	movwf	?___lwdiv+1
  6610  03A3  0827               	movf	___lwdiv@quotient,w
  6611  03A4  00A2               	movwf	?___lwdiv
  6612  03A5  0008               	return
  6613  03A6                     __end_of___lwdiv:	
  6614  03A6                     __ptext20:	
  6615 ;; *************** function _madata_isfull *****************
  6616 ;; Defined at:
  6617 ;;		line 55 in file "moving_avg_filter.c"
  6618 ;; Parameters:    Size  Location     Type
  6619 ;;		None
  6620 ;; Auto vars:     Size  Location     Type
  6621 ;;		None
  6622 ;; Return value:  Size  Location     Type
  6623 ;;                  1    wreg      unsigned char 
  6624 ;; Registers used:
  6625 ;;		wreg, status,2, status,0
  6626 ;; Tracked objects:
  6627 ;;		On entry : 3E/1
  6628 ;;		On exit  : 3F/0
  6629 ;;		Unchanged: 0/0
  6630 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6631 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6632 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6633 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6634 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6635 ;;Total ram usage:        4 bytes
  6636 ;; Hardware stack levels used:    1
  6637 ;; Hardware stack levels required when called:    5
  6638 ;; This function calls:
  6639 ;;		Nothing
  6640 ;; This function is called by:
  6641 ;;		_madata_insert
  6642 ;;		_get_moving_average
  6643 ;; This function uses a non-reentrant model
  6644 ;;
  6645                           
  6646                           
  6647                           ;psect for function _madata_isfull
  6648  03A6                     _madata_isfull:	
  6649                           
  6650                           ;moving_avg_filter.c: 57: if ((ma_front == ma_rear + 1) || (ma_front == 0 && ma_rear == 
      +                          ((int)(50 * 0.5)) - 1))
  6651                           
  6652                           ;incstack = 0
  6653                           ; Regs used in _madata_isfull: [wreg+status,2+status,0]
  6654  03A6  0140               	movlb	0	; select bank0
  6655  03A7  084E               	movf	_ma_front,w
  6656  03A8  00A2               	movwf	??_madata_isfull
  6657  03A9  01A3               	clrf	??_madata_isfull+1
  6658  03AA  1BA2               	btfsc	??_madata_isfull,7
  6659  03AB  03A3               	decf	??_madata_isfull+1,f
  6660  03AC  3001               	movlw	1
  6661  03AD  074D               	addwf	_ma_rear,w
  6662  03AE  00A4               	movwf	??_madata_isfull+2
  6663  03AF  01A5               	clrf	??_madata_isfull+3
  6664  03B0  1803               	skipnc
  6665  03B1  0AA5               	incf	??_madata_isfull+3,f
  6666  03B2  1BCD               	btfsc	_ma_rear,7
  6667  03B3  03A5               	decf	??_madata_isfull+3,f
  6668  03B4  0140               	movlb	0	; select bank0
  6669  03B5  0823               	movf	??_madata_isfull+1,w
  6670  03B6  0625               	xorwf	??_madata_isfull+3,w
  6671  03B7  1D03               	skipz
  6672  03B8  2BBB               	goto	u3495
  6673  03B9  0822               	movf	??_madata_isfull,w
  6674  03BA  0624               	xorwf	??_madata_isfull+2,w
  6675  03BB                     u3495:	
  6676  03BB  1903               	skipnz
  6677  03BC  3401               	retlw	1
  6678  03BD  084E               	movf	_ma_front,w
  6679  03BE  1D03               	btfss	3,2
  6680  03BF  3400               	retlw	0
  6681  03C0  3018               	movlw	24
  6682  03C1  064D               	xorwf	_ma_rear,w
  6683  03C2  1903               	btfsc	3,2
  6684                           
  6685                           ;moving_avg_filter.c: 58: return 1;
  6686  03C3  3401               	retlw	1
  6687                           
  6688                           ;moving_avg_filter.c: 59: else
  6689                           ;moving_avg_filter.c: 60: return 0;
  6690  03C4  3400               	retlw	0
  6691  03C5                     __end_of_madata_isfull:	
  6692  03C5                     __ptext19:	
  6693 ;; *************** function _madata_insert *****************
  6694 ;; Defined at:
  6695 ;;		line 73 in file "moving_avg_filter.c"
  6696 ;; Parameters:    Size  Location     Type
  6697 ;;  element         2    8[BANK0 ] unsigned int 
  6698 ;; Auto vars:     Size  Location     Type
  6699 ;;		None
  6700 ;; Return value:  Size  Location     Type
  6701 ;;                  1    wreg      unsigned char 
  6702 ;; Registers used:
  6703 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6704 ;; Tracked objects:
  6705 ;;		On entry : 3F/0
  6706 ;;		On exit  : 3F/0
  6707 ;;		Unchanged: 0/0
  6708 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6709 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6710 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6711 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6712 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6713 ;;Total ram usage:        2 bytes
  6714 ;; Hardware stack levels used:    1
  6715 ;; Hardware stack levels required when called:    6
  6716 ;; This function calls:
  6717 ;;		___awmod
  6718 ;;		_madata_isfull
  6719 ;; This function is called by:
  6720 ;;		_get_moving_average
  6721 ;; This function uses a non-reentrant model
  6722 ;;
  6723                           
  6724                           
  6725                           ;psect for function _madata_insert
  6726  03C5                     _madata_insert:	
  6727                           
  6728                           ;moving_avg_filter.c: 75: if (madata_isfull()) {
  6729                           
  6730                           ;incstack = 0
  6731                           ; Regs used in _madata_insert: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  6732  03C5  23A6  3180         	fcall	_madata_isfull
  6733  03C7  3A00               	xorlw	0
  6734  03C8  1D03               	btfss	3,2
  6735  03C9  0008               	return
  6736                           
  6737                           ;moving_avg_filter.c: 79: if (ma_front == -1)
  6738  03CA  0F4E               	incfsz	_ma_front,w
  6739  03CB  2BCD               	goto	l3830
  6740                           
  6741                           ;moving_avg_filter.c: 80: ma_front = 0;
  6742  03CC  01CE               	clrf	_ma_front
  6743  03CD                     l3830:	
  6744                           
  6745                           ;moving_avg_filter.c: 81: ma_rear = (ma_rear + 1) % ((int)(50 * 0.5));
  6746  03CD  084D               	movf	_ma_rear,w
  6747  03CE  3187  2759  3180   	fcall	PL10	;call to abstracted procedure
  6748  03D1  240A  3180         	fcall	PL34	;call to abstracted procedure
  6749  03D3  22FE               	fcall	___awmod
  6750  03D4  0822               	movf	?___awmod,w
  6751  03D5  00CD               	movwf	_ma_rear
  6752                           
  6753                           ;moving_avg_filter.c: 82: ma_data[ma_rear] = element;
  6754  03D6  354D               	lslf	_ma_rear,w
  6755  03D7  3E20               	addlw	(low (_ma_data| (0+256)))& (0+255)
  6756  03D8  0086               	movwf	6
  6757  03D9  3001               	movlw	1	; select bank2/3
  6758  03DA  0087               	movwf	7
  6759  03DB  0828               	movf	madata_insert@element,w
  6760  03DC  3FC0               	movwi [0]fsr1
  6761  03DD  0829               	movf	madata_insert@element+1,w
  6762  03DE  3FC1               	movwi [1]fsr1
  6763  03DF  0008               	return
  6764  03E0                     __end_of_madata_insert:	
  6765  03E0                     PL2:	
  6766  03E0  086E               	movf	(main@j+1)^(0+256),w
  6767  03E1  3A80               	xorlw	128
  6768  03E2  0140               	movlb	0	; select bank0
  6769  03E3  00C9               	movwf	??_main
  6770  03E4  0142               	movlb	2	; select bank2
  6771  03E5  0869               	movf	(main@num_bytes+1)^(0+256),w
  6772  03E6  3A80               	xorlw	128
  6773  03E7  0140               	movlb	0	; select bank0
  6774  03E8  0249               	subwf	??_main,w
  6775  03E9  1D03               	skipz
  6776  03EA  0008               	return
  6777  03EB  0142               	movlb	2	; select bank2
  6778  03EC  0868               	movf	main@num_bytes^(0+256),w
  6779  03ED  026D               	subwf	main@j^(0+256),w
  6780  03EE  0008               	return
  6781  03EF                     __end_ofPL2:	
  6782  03EF                     PL12:	
  6783  03EF  083E               	movf	?_sprintf+1,w
  6784  03F0  0142               	movlb	2	; select bank2
  6785  03F1  00E9               	movwf	(main@num_bytes+1)^(0+256)
  6786  03F2  0140               	movlb	0	; select bank0
  6787  03F3  083D               	movf	?_sprintf,w
  6788  03F4  0142               	movlb	2	; select bank2
  6789  03F5  00E8               	movwf	main@num_bytes^(0+256)
  6790  03F6  01ED               	clrf	main@j^(0+256)
  6791  03F7  01EE               	clrf	(main@j+1)^(0+256)
  6792  03F8  0008               	return
  6793  03F9                     __end_ofPL12:	
  6794  03F9                     PL14:	
  6795  03F9  083F               	movf	___fltol@f1,w
  6796  03FA  00C3               	movwf	??___fltol
  6797  03FB  0840               	movf	___fltol@f1+1,w
  6798  03FC  00C4               	movwf	??___fltol+1
  6799  03FD  0841               	movf	___fltol@f1+2,w
  6800  03FE  00C5               	movwf	??___fltol+2
  6801  03FF  0842               	movf	___fltol@f1+3,w
  6802  0400  00C6               	movwf	??___fltol+3
  6803  0401  0008               	return
  6804  0402                     __end_ofPL14:	
  6805  0402                     PL20:	
  6806  0402  0142               	movlb	2	; select bank2
  6807  0403  086D               	movf	main@j^(0+256),w
  6808  0404  3E52               	addlw	(low (main@send_data| (0+256)))& (0+255)
  6809  0405  0086               	movwf	6
  6810  0406  3001               	movlw	1	; select bank2/3
  6811  0407  0087               	movwf	7
  6812  0408  0801               	movf	1,w
  6813  0409  0008               	return
  6814  040A                     __end_ofPL20:	
  6815  040A                     PL34:	
  6816  040A  1903               	skipnz
  6817  040B  0AA5               	incf	___awmod@dividend+1,f
  6818  040C  3019               	movlw	25
  6819  040D  00A2               	movwf	___awmod@divisor
  6820  040E  01A3               	clrf	___awmod@divisor+1
  6821  040F  0008               	return
  6822  0410                     __end_ofPL34:	
  6823  0410                     PL42:	
  6824  0410  0140               	movlb	0	; select bank0
  6825  0411  00BD               	movwf	printf@f
  6826  0412  3090               	movlw	high (STR_3| (0+32768))
  6827  0413  00BE               	movwf	printf@f+1
  6828  0414  0008               	return
  6829  0415                     __end_ofPL42:	
  6830  0415                     PL44:	
  6831  0415  0140               	movlb	0	; select bank0
  6832  0416  00BD               	movwf	printf@f
  6833  0417  3090               	movlw	high (STR_4| (0+32768))
  6834  0418  00BE               	movwf	printf@f+1
  6835  0419  0008               	return
  6836  041A                     __end_ofPL44:	
  6837  041A                     __ptext17:	
  6838 ;; *************** function _madata_remove *****************
  6839 ;; Defined at:
  6840 ;;		line 88 in file "moving_avg_filter.c"
  6841 ;; Parameters:    Size  Location     Type
  6842 ;;		None
  6843 ;; Auto vars:     Size  Location     Type
  6844 ;;  element         2    0        unsigned int 
  6845 ;; Return value:  Size  Location     Type
  6846 ;;                  1    wreg      unsigned char 
  6847 ;; Registers used:
  6848 ;;		wreg, status,2, status,0, pclath, cstack
  6849 ;; Tracked objects:
  6850 ;;		On entry : 3F/1
  6851 ;;		On exit  : 3F/0
  6852 ;;		Unchanged: 0/0
  6853 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6854 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6855 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6856 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6857 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6858 ;;Total ram usage:        0 bytes
  6859 ;; Hardware stack levels used:    1
  6860 ;; Hardware stack levels required when called:    6
  6861 ;; This function calls:
  6862 ;;		___awmod
  6863 ;;		_madata_isempty
  6864 ;; This function is called by:
  6865 ;;		_get_moving_average
  6866 ;; This function uses a non-reentrant model
  6867 ;;
  6868                           
  6869                           
  6870                           ;psect for function _madata_remove
  6871  041A                     _madata_remove:	
  6872                           
  6873                           ;moving_avg_filter.c: 90: uint16_t element;
  6874                           ;moving_avg_filter.c: 91: if (madata_isempty()) {
  6875                           
  6876                           ;incstack = 0
  6877                           ; Regs used in _madata_remove: [wreg+status,2+status,0+pclath+cstack]
  6878  041A  2432  3180         	fcall	_madata_isempty
  6879  041C  3A00               	xorlw	0
  6880  041D  1D03               	btfss	3,2
  6881  041E  0008               	return
  6882                           
  6883                           ;moving_avg_filter.c: 95: if (ma_front == ma_rear) {
  6884  041F  084E               	movf	_ma_front,w
  6885  0420  064D               	xorwf	_ma_rear,w
  6886  0421  1D03               	skipz
  6887  0422  2C28               	goto	l3846
  6888                           
  6889                           ;moving_avg_filter.c: 96: ma_front = -1;
  6890  0423  01CE               	clrf	_ma_front
  6891  0424  03CE               	decf	_ma_front,f
  6892                           
  6893                           ;moving_avg_filter.c: 97: ma_rear = -1;
  6894  0425  01CD               	clrf	_ma_rear
  6895  0426  03CD               	decf	_ma_rear,f
  6896                           
  6897                           ;moving_avg_filter.c: 98: } else {
  6898  0427  0008               	return
  6899  0428                     l3846:	
  6900                           
  6901                           ;moving_avg_filter.c: 99: ma_front = (ma_front + 1) % ((int)(50 * 0.5));
  6902  0428  084E               	movf	_ma_front,w
  6903  0429  3187  2759  3180   	fcall	PL10	;call to abstracted procedure
  6904  042C  240A  3180         	fcall	PL34	;call to abstracted procedure
  6905  042E  22FE               	fcall	___awmod
  6906  042F  0822               	movf	?___awmod,w
  6907  0430  00CE               	movwf	_ma_front
  6908  0431  0008               	return
  6909  0432                     __end_of_madata_remove:	
  6910  0432                     __ptext18:	
  6911 ;; *************** function _madata_isempty *****************
  6912 ;; Defined at:
  6913 ;;		line 64 in file "moving_avg_filter.c"
  6914 ;; Parameters:    Size  Location     Type
  6915 ;;		None
  6916 ;; Auto vars:     Size  Location     Type
  6917 ;;		None
  6918 ;; Return value:  Size  Location     Type
  6919 ;;                  1    wreg      unsigned char 
  6920 ;; Registers used:
  6921 ;;		wreg, status,2, status,0
  6922 ;; Tracked objects:
  6923 ;;		On entry : 3F/1
  6924 ;;		On exit  : 3F/0
  6925 ;;		Unchanged: 0/0
  6926 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6927 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6928 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6929 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6930 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6931 ;;Total ram usage:        0 bytes
  6932 ;; Hardware stack levels used:    1
  6933 ;; Hardware stack levels required when called:    5
  6934 ;; This function calls:
  6935 ;;		Nothing
  6936 ;; This function is called by:
  6937 ;;		_madata_remove
  6938 ;; This function uses a non-reentrant model
  6939 ;;
  6940                           
  6941                           
  6942                           ;psect for function _madata_isempty
  6943  0432                     _madata_isempty:	
  6944                           
  6945                           ;moving_avg_filter.c: 66: if (ma_front == -1)
  6946                           
  6947                           ;incstack = 0
  6948                           ; Regs used in _madata_isempty: [wreg+status,2+status,0]
  6949  0432  0140               	movlb	0	; select bank0
  6950  0433  0F4E               	incfsz	_ma_front,w
  6951  0434  3400               	retlw	0
  6952                           
  6953                           ;moving_avg_filter.c: 67: return 1;
  6954  0435  3401               	retlw	1
  6955  0436                     __end_of_madata_isempty:	
  6956                           ;moving_avg_filter.c: 68: else
  6957                           ;moving_avg_filter.c: 69: return 0;
  6958                           
  6959                           
  6960                           	psect	bssCOMMON
  6961  007D                     __pbssCOMMON:	
  6962  007D                     _eusart1TxHead:	
  6963  007D                     	ds	1
  6964                           
  6965                           	psect	dataBANK0
  6966  004D                     __pdataBANK0:	
  6967  004D                     _ma_rear:	
  6968  004D                     	ds	1
  6969  004E                     _ma_front:	
  6970  004E                     	ds	1
  6971  004F                     _pk_rear:	
  6972  004F                     	ds	1
  6973  0050                     _pk_front:	
  6974  0050                     	ds	1
  6975  0051                     _sb_rear:	
  6976  0051                     	ds	1
  6977  0052                     _sb_front:	
  6978  0052                     	ds	1
  6979                           
  6980                           	psect	bssBANK1
  6981  00A0                     __pbssBANK1:	
  6982  00A0                     _pk_data:	
  6983  00A0                     	ds	10
  6984  00AA                     _eusart2RxBuffer:	
  6985  00AA                     	ds	8
  6986  00B2                     _eusart2TxBuffer:	
  6987  00B2                     	ds	8
  6988  00BA                     _eusart1RxBuffer:	
  6989  00BA                     	ds	8
  6990  00C2                     _eusart1TxBuffer:	
  6991  00C2                     	ds	8
  6992  00CA                     _ma_window_sum:	
  6993  00CA                     	ds	2
  6994  00CC                     _sent_0:	
  6995  00CC                     	ds	1
  6996  00CD                     _sent_1:	
  6997  00CD                     	ds	1
  6998  00CE                     _i:	
  6999  00CE                     	ds	1
  7000  00CF                     _start_flag:	
  7001  00CF                     	ds	1
  7002  00D0                     _eusart2RxCount:	
  7003  00D0                     	ds	1
  7004  00D1                     _eusart2RxTail:	
  7005  00D1                     	ds	1
  7006  00D2                     _eusart2RxHead:	
  7007  00D2                     	ds	1
  7008  00D3                     _eusart2TxTail:	
  7009  00D3                     	ds	1
  7010  00D4                     _eusart2TxHead:	
  7011  00D4                     	ds	1
  7012  00D5                     _eusart1RxCount:	
  7013  00D5                     	ds	1
  7014  00D6                     _eusart1RxTail:	
  7015  00D6                     	ds	1
  7016  00D7                     _eusart1RxHead:	
  7017  00D7                     	ds	1
  7018  00D8                     _eusart1TxTail:	
  7019  00D8                     	ds	1
  7020                           
  7021                           	psect	bssBANK2
  7022  0120                     __pbssBANK2:	
  7023  0120                     _ma_data:	
  7024  0120                     	ds	50
  7025                           
  7026                           	psect	clrtext
  7027  0E2A                     clear_ram0:	
  7028                           ;	Called with FSR0 containing the base address, and
  7029                           ;	btemp/btemp+1 has the size to clear
  7030                           
  7031  0E2A  0064               	clrwdt	;clear the watchdog before getting into this loop
  7032  0E2B                     clrloop0:	
  7033  0E2B  3001               	movlw	1
  7034  0E2C  0180               	clrf	0	;clear RAM location pointed to by FSR
  7035  0E2D  3101               	addfsr 0,1
  7036  0E2E  02FE               	subwf	126,f
  7037  0E2F  3000               	movlw	0
  7038  0E30  3BFF               	subwfb	127,f
  7039  0E31  087F               	movf	127,w
  7040  0E32  047E               	iorwf	126,w
  7041  0E33  1903               	btfsc	3,2
  7042  0E34  3400               	retlw	0	;all done for this memory range, return
  7043  0E35  2E2B               	goto	clrloop0	;have we reached the end yet?
  7044                           
  7045                           	psect	cstackBANK2
  7046  0152                     __pcstackBANK2:	
  7047  0152                     main@send_data:	
  7048                           
  7049                           ; 10 bytes @ 0x0
  7050  0152                     	ds	10
  7051  015C                     main@time_elapsed:	
  7052                           
  7053                           ; 4 bytes @ 0xA
  7054  015C                     	ds	4
  7055  0160                     main@neutral_datapoint:	
  7056                           
  7057                           ; 2 bytes @ 0xE
  7058  0160                     	ds	2
  7059  0162                     main@mode:	
  7060                           
  7061                           ; 1 bytes @ 0x10
  7062  0162                     	ds	1
  7063  0163                     main@count:	
  7064                           
  7065                           ; 2 bytes @ 0x11
  7066  0163                     	ds	2
  7067  0165                     main@motor_started:	
  7068                           
  7069                           ; 1 bytes @ 0x13
  7070  0165                     	ds	1
  7071  0166                     main@datapoint:	
  7072                           
  7073                           ; 2 bytes @ 0x14
  7074  0166                     	ds	2
  7075  0168                     main@num_bytes:	
  7076                           
  7077                           ; 2 bytes @ 0x16
  7078  0168                     	ds	2
  7079  016A                     main@flex_flag:	
  7080                           
  7081                           ; 1 bytes @ 0x18
  7082  016A                     	ds	1
  7083  016B                     main@result:	
  7084                           
  7085                           ; 2 bytes @ 0x19
  7086  016B                     	ds	2
  7087  016D                     main@j:	
  7088                           
  7089                           ; 2 bytes @ 0x1B
  7090  016D                     	ds	2
  7091                           
  7092                           	psect	cstackCOMMON
  7093  0070                     __pcstackCOMMON:	
  7094  0070                     ?_EUSART1_Receive_ISR:	
  7095  0070                     ??_EUSART1_Receive_ISR:	
  7096                           ; 1 bytes @ 0x0
  7097                           
  7098  0070                     ?_EUSART1_Transmit_ISR:	
  7099                           ; 1 bytes @ 0x0
  7100                           
  7101  0070                     ??_EUSART1_Transmit_ISR:	
  7102                           ; 1 bytes @ 0x0
  7103                           
  7104  0070                     ?_PMD_Initialize:	
  7105                           ; 1 bytes @ 0x0
  7106                           
  7107  0070                     ?_OSCILLATOR_Initialize:	
  7108                           ; 1 bytes @ 0x0
  7109                           
  7110  0070                     ?_TMR2_Initialize:	
  7111                           ; 1 bytes @ 0x0
  7112                           
  7113  0070                     ?_EUSART2_Initialize:	
  7114                           ; 1 bytes @ 0x0
  7115                           
  7116  0070                     ?_TMR2_ISR:	
  7117                           ; 1 bytes @ 0x0
  7118                           
  7119  0070                     ?_EUSART2_Receive_ISR:	
  7120                           ; 1 bytes @ 0x0
  7121                           
  7122  0070                     ??_EUSART2_Receive_ISR:	
  7123                           ; 1 bytes @ 0x0
  7124                           
  7125  0070                     ?_EUSART2_Transmit_ISR:	
  7126                           ; 1 bytes @ 0x0
  7127                           
  7128  0070                     ??_EUSART2_Transmit_ISR:	
  7129                           ; 1 bytes @ 0x0
  7130                           
  7131  0070                     ?_TMR2_DefaultInterruptHandler:	
  7132                           ; 1 bytes @ 0x0
  7133                           
  7134  0070                     ??_TMR2_DefaultInterruptHandler:	
  7135                           ; 1 bytes @ 0x0
  7136                           
  7137  0070                     ?_sbuf_remove:	
  7138                           ; 1 bytes @ 0x0
  7139                           
  7140  0070                     ?_PIN_MANAGER_Initialize:	
  7141                           ; 1 bytes @ 0x0
  7142                           
  7143  0070                     ?_EUSART1_Initialize:	
  7144                           ; 1 bytes @ 0x0
  7145                           
  7146  0070                     ?_EUSART1_Write:	
  7147                           ; 1 bytes @ 0x0
  7148                           
  7149  0070                     ?_ADC_Initialize:	
  7150                           ; 1 bytes @ 0x0
  7151                           
  7152  0070                     ?_ADC_SelectChannel:	
  7153                           ; 1 bytes @ 0x0
  7154                           
  7155  0070                     ??_ADC_SelectChannel:	
  7156                           ; 1 bytes @ 0x0
  7157                           
  7158  0070                     ?_ADC_StartConversion:	
  7159                           ; 1 bytes @ 0x0
  7160                           
  7161  0070                     ??_ADC_StartConversion:	
  7162                           ; 1 bytes @ 0x0
  7163                           
  7164  0070                     ?_SYSTEM_Initialize:	
  7165                           ; 1 bytes @ 0x0
  7166                           
  7167  0070                     ?_INTERRUPT_InterruptManager:	
  7168                           ; 1 bytes @ 0x0
  7169                           
  7170  0070                     ?_EUSART2_Write:	
  7171                           ; 1 bytes @ 0x0
  7172                           
  7173  0070                     ?_TMR2_Start:	
  7174                           ; 1 bytes @ 0x0
  7175                           
  7176  0070                     ?_TMR2_EMG_InterruptHandler:	
  7177                           ; 1 bytes @ 0x0
  7178                           
  7179  0070                     ?_main:	
  7180                           ; 1 bytes @ 0x0
  7181                           
  7182  0070                     ?_madata_isfull:	
  7183                           ; 1 bytes @ 0x0
  7184                           
  7185  0070                     ?_madata_isempty:	
  7186                           ; 1 bytes @ 0x0
  7187                           
  7188  0070                     ?_madata_remove:	
  7189                           ; 1 bytes @ 0x0
  7190                           
  7191  0070                     ?_pkdata_isfull:	
  7192                           ; 1 bytes @ 0x0
  7193                           
  7194  0070                     ?_pkdata_isempty:	
  7195                           ; 1 bytes @ 0x0
  7196                           
  7197  0070                     ?_pkdata_remove:	
  7198                           ; 1 bytes @ 0x0
  7199                           
  7200  0070                     ?_sbuf_isfull:	
  7201                           ; 1 bytes @ 0x0
  7202                           
  7203  0070                     ??_sbuf_isfull:	
  7204                           ; 1 bytes @ 0x0
  7205                           
  7206  0070                     ?_sbuf_isempty:	
  7207                           ; 1 bytes @ 0x0
  7208                           
  7209  0070                     ?_ADC_GetConversionResult:	
  7210                           ; 1 bytes @ 0x0
  7211                           
  7212  0070                     ?i1___awmod:	
  7213                           ; 2 bytes @ 0x0
  7214                           
  7215  0070                     ?i1___lwdiv:	
  7216                           ; 2 bytes @ 0x0
  7217                           
  7218  0070                     i1___awmod@divisor:	
  7219                           ; 2 bytes @ 0x0
  7220                           
  7221  0070                     i1___lwdiv@divisor:	
  7222                           ; 2 bytes @ 0x0
  7223                           
  7224                           
  7225                           ; 2 bytes @ 0x0
  7226  0070                     	ds	1
  7227  0071                     ADC_SelectChannel@channel:	
  7228                           
  7229                           ; 1 bytes @ 0x1
  7230  0071                     	ds	1
  7231  0072                     ??_ADC_GetConversionResult:	
  7232  0072                     i1___awmod@dividend:	
  7233                           ; 1 bytes @ 0x2
  7234                           
  7235  0072                     i1___lwdiv@dividend:	
  7236                           ; 2 bytes @ 0x2
  7237                           
  7238                           
  7239                           ; 2 bytes @ 0x2
  7240  0072                     	ds	2
  7241  0074                     ??i1___awmod:	
  7242  0074                     ??i1___lwdiv:	
  7243                           ; 1 bytes @ 0x4
  7244                           
  7245  0074                     i1___awmod@counter:	
  7246                           ; 1 bytes @ 0x4
  7247                           
  7248  0074                     i1___lwdiv@quotient:	
  7249                           ; 1 bytes @ 0x4
  7250                           
  7251                           
  7252                           ; 2 bytes @ 0x4
  7253  0074                     	ds	1
  7254  0075                     i1___awmod@sign:	
  7255                           
  7256                           ; 1 bytes @ 0x5
  7257  0075                     	ds	1
  7258  0076                     i1___lwdiv@counter:	
  7259                           
  7260                           ; 1 bytes @ 0x6
  7261  0076                     	ds	1
  7262  0077                     ?_sbuf_insert:	
  7263  0077                     sbuf_insert@element:	
  7264                           ; 1 bytes @ 0x7
  7265                           
  7266                           
  7267                           ; 2 bytes @ 0x7
  7268  0077                     	ds	2
  7269  0079                     ??_sbuf_insert:	
  7270                           
  7271                           ; 1 bytes @ 0x9
  7272  0079                     	ds	4
  7273  007D                     ??_TMR2_ISR:	
  7274  007D                     ??_INTERRUPT_InterruptManager:	
  7275                           ; 1 bytes @ 0xD
  7276                           
  7277  007D                     ??_TMR2_EMG_InterruptHandler:	
  7278                           ; 1 bytes @ 0xD
  7279                           
  7280                           
  7281                           	psect	cstackBANK0
  7282  0020                     __pcstackBANK0:	
  7283                           ; 1 bytes @ 0xD
  7284                           
  7285  0020                     TMR2_EMG_InterruptHandler@adval:	
  7286                           
  7287                           ; 2 bytes @ 0x0
  7288  0020                     	ds	2
  7289  0022                     ?_EUSART1_SetRxInterruptHandler:	
  7290  0022                     ?_EUSART1_SetTxInterruptHandler:	
  7291                           ; 1 bytes @ 0x2
  7292                           
  7293  0022                     ??_PMD_Initialize:	
  7294                           ; 1 bytes @ 0x2
  7295                           
  7296  0022                     ??_OSCILLATOR_Initialize:	
  7297                           ; 1 bytes @ 0x2
  7298                           
  7299  0022                     ?_EUSART2_SetRxInterruptHandler:	
  7300                           ; 1 bytes @ 0x2
  7301                           
  7302  0022                     ?_EUSART2_SetTxInterruptHandler:	
  7303                           ; 1 bytes @ 0x2
  7304                           
  7305  0022                     ?_TMR2_SetInterruptHandler:	
  7306                           ; 1 bytes @ 0x2
  7307                           
  7308  0022                     ?_memset:	
  7309                           ; 1 bytes @ 0x2
  7310                           
  7311  0022                     ??_PIN_MANAGER_Initialize:	
  7312                           ; 1 bytes @ 0x2
  7313                           
  7314  0022                     ??_EUSART1_Write:	
  7315                           ; 1 bytes @ 0x2
  7316                           
  7317  0022                     ??_ADC_Initialize:	
  7318                           ; 1 bytes @ 0x2
  7319                           
  7320  0022                     ??_EUSART2_Write:	
  7321                           ; 1 bytes @ 0x2
  7322                           
  7323  0022                     ??_TMR2_Start:	
  7324                           ; 1 bytes @ 0x2
  7325                           
  7326  0022                     ??_madata_isfull:	
  7327                           ; 1 bytes @ 0x2
  7328                           
  7329  0022                     ??_madata_isempty:	
  7330                           ; 1 bytes @ 0x2
  7331                           
  7332  0022                     ??_pkdata_isfull:	
  7333                           ; 1 bytes @ 0x2
  7334                           
  7335  0022                     ??_pkdata_isempty:	
  7336                           ; 1 bytes @ 0x2
  7337                           
  7338  0022                     ??_sbuf_isempty:	
  7339                           ; 1 bytes @ 0x2
  7340                           
  7341  0022                     ?_sbuf_peek:	
  7342                           ; 1 bytes @ 0x2
  7343                           
  7344  0022                     ?_abs:	
  7345                           ; 2 bytes @ 0x2
  7346                           
  7347  0022                     ?___awmod:	
  7348                           ; 2 bytes @ 0x2
  7349                           
  7350  0022                     ?___lwdiv:	
  7351                           ; 2 bytes @ 0x2
  7352                           
  7353  0022                     ?___fladd:	
  7354                           ; 2 bytes @ 0x2
  7355                           
  7356  0022                     EUSART1_Write@txData:	
  7357                           ; 4 bytes @ 0x2
  7358                           
  7359  0022                     EUSART2_Write@txData:	
  7360                           ; 1 bytes @ 0x2
  7361                           
  7362  0022                     EUSART1_SetTxInterruptHandler@interruptHandler:	
  7363                           ; 1 bytes @ 0x2
  7364                           
  7365  0022                     EUSART1_SetRxInterruptHandler@interruptHandler:	
  7366                           ; 2 bytes @ 0x2
  7367                           
  7368  0022                     EUSART2_SetTxInterruptHandler@interruptHandler:	
  7369                           ; 2 bytes @ 0x2
  7370                           
  7371  0022                     EUSART2_SetRxInterruptHandler@interruptHandler:	
  7372                           ; 2 bytes @ 0x2
  7373                           
  7374  0022                     TMR2_SetInterruptHandler@InterruptHandler:	
  7375                           ; 2 bytes @ 0x2
  7376                           
  7377  0022                     abs@a:	
  7378                           ; 2 bytes @ 0x2
  7379                           
  7380  0022                     ___awmod@divisor:	
  7381                           ; 2 bytes @ 0x2
  7382                           
  7383  0022                     ___lwdiv@divisor:	
  7384                           ; 2 bytes @ 0x2
  7385                           
  7386  0022                     memset@c:	
  7387                           ; 2 bytes @ 0x2
  7388                           
  7389  0022                     ___fladd@b:	
  7390                           ; 2 bytes @ 0x2
  7391                           
  7392                           
  7393                           ; 4 bytes @ 0x2
  7394  0022                     	ds	1
  7395  0023                     ?_putch:	
  7396  0023                     putch@txData:	
  7397                           ; 1 bytes @ 0x3
  7398                           
  7399                           
  7400                           ; 1 bytes @ 0x3
  7401  0023                     	ds	1
  7402  0024                     ??_EUSART1_SetRxInterruptHandler:	
  7403  0024                     ??_EUSART1_SetTxInterruptHandler:	
  7404                           ; 1 bytes @ 0x4
  7405                           
  7406  0024                     ??_TMR2_Initialize:	
  7407                           ; 1 bytes @ 0x4
  7408                           
  7409  0024                     ??_EUSART2_Initialize:	
  7410                           ; 1 bytes @ 0x4
  7411                           
  7412  0024                     ??_EUSART2_SetRxInterruptHandler:	
  7413                           ; 1 bytes @ 0x4
  7414                           
  7415  0024                     ??_EUSART2_SetTxInterruptHandler:	
  7416                           ; 1 bytes @ 0x4
  7417                           
  7418  0024                     ??_TMR2_SetInterruptHandler:	
  7419                           ; 1 bytes @ 0x4
  7420                           
  7421  0024                     ??_sbuf_peek:	
  7422                           ; 1 bytes @ 0x4
  7423                           
  7424  0024                     ??_abs:	
  7425                           ; 1 bytes @ 0x4
  7426                           
  7427  0024                     ??_EUSART1_Initialize:	
  7428                           ; 1 bytes @ 0x4
  7429                           
  7430  0024                     ??_putch:	
  7431                           ; 1 bytes @ 0x4
  7432                           
  7433  0024                     ??_SYSTEM_Initialize:	
  7434                           ; 1 bytes @ 0x4
  7435                           
  7436  0024                     ___awmod@dividend:	
  7437                           ; 1 bytes @ 0x4
  7438                           
  7439  0024                     ___lwdiv@dividend:	
  7440                           ; 2 bytes @ 0x4
  7441                           
  7442  0024                     memset@n:	
  7443                           ; 2 bytes @ 0x4
  7444                           
  7445                           
  7446                           ; 2 bytes @ 0x4
  7447  0024                     	ds	2
  7448  0026                     ??_memset:	
  7449  0026                     ??___awmod:	
  7450                           ; 1 bytes @ 0x6
  7451                           
  7452  0026                     ??___lwdiv:	
  7453                           ; 1 bytes @ 0x6
  7454                           
  7455  0026                     ___awmod@counter:	
  7456                           ; 1 bytes @ 0x6
  7457                           
  7458  0026                     ___lwdiv@counter:	
  7459                           ; 1 bytes @ 0x6
  7460                           
  7461  0026                     memset@p1:	
  7462                           ; 1 bytes @ 0x6
  7463                           
  7464  0026                     ___fladd@a:	
  7465                           ; 1 bytes @ 0x6
  7466                           
  7467                           
  7468                           ; 4 bytes @ 0x6
  7469  0026                     	ds	1
  7470  0027                     ___awmod@sign:	
  7471  0027                     memset@p:	
  7472                           ; 1 bytes @ 0x7
  7473                           
  7474  0027                     ___lwdiv@quotient:	
  7475                           ; 1 bytes @ 0x7
  7476                           
  7477                           
  7478                           ; 2 bytes @ 0x7
  7479  0027                     	ds	1
  7480  0028                     ??_sbuf_remove:	
  7481  0028                     ?_madata_insert:	
  7482                           ; 1 bytes @ 0x8
  7483                           
  7484  0028                     ??_madata_remove:	
  7485                           ; 1 bytes @ 0x8
  7486                           
  7487  0028                     ?_pkdata_insert:	
  7488                           ; 1 bytes @ 0x8
  7489                           
  7490  0028                     ??_pkdata_remove:	
  7491                           ; 1 bytes @ 0x8
  7492                           
  7493  0028                     madata_insert@element:	
  7494                           ; 1 bytes @ 0x8
  7495                           
  7496  0028                     pkdata_insert@element:	
  7497                           ; 2 bytes @ 0x8
  7498                           
  7499                           
  7500                           ; 2 bytes @ 0x8
  7501  0028                     	ds	1
  7502  0029                     ?___lwmod:	
  7503  0029                     ?___xxtofl:	
  7504                           ; 2 bytes @ 0x9
  7505                           
  7506  0029                     ___lwmod@divisor:	
  7507                           ; 4 bytes @ 0x9
  7508                           
  7509  0029                     ___xxtofl@val:	
  7510                           ; 2 bytes @ 0x9
  7511                           
  7512                           
  7513                           ; 4 bytes @ 0x9
  7514  0029                     	ds	1
  7515  002A                     ??_madata_insert:	
  7516  002A                     ??_pkdata_insert:	
  7517                           ; 1 bytes @ 0xA
  7518                           
  7519  002A                     ??___fladd:	
  7520                           ; 1 bytes @ 0xA
  7521                           
  7522  002A                     ?_get_neutral_peaktopeak:	
  7523                           ; 1 bytes @ 0xA
  7524                           
  7525  002A                     get_neutral_peaktopeak@datapoint:	
  7526                           ; 2 bytes @ 0xA
  7527                           
  7528                           
  7529                           ; 2 bytes @ 0xA
  7530  002A                     	ds	1
  7531  002B                     ___lwmod@dividend:	
  7532                           
  7533                           ; 2 bytes @ 0xB
  7534  002B                     	ds	1
  7535  002C                     ??_get_neutral_peaktopeak:	
  7536                           
  7537                           ; 1 bytes @ 0xC
  7538  002C                     	ds	1
  7539  002D                     ??___lwmod:	
  7540  002D                     ??___xxtofl:	
  7541                           ; 1 bytes @ 0xD
  7542                           
  7543  002D                     ___lwmod@counter:	
  7544                           ; 1 bytes @ 0xD
  7545                           
  7546                           
  7547                           ; 1 bytes @ 0xD
  7548  002D                     	ds	1
  7549  002E                     ?__doprnt:	
  7550  002E                     __doprnt@f:	
  7551                           ; 2 bytes @ 0xE
  7552                           
  7553                           
  7554                           ; 2 bytes @ 0xE
  7555  002E                     	ds	2
  7556  0030                     __doprnt@ap:	
  7557  0030                     get_neutral_peaktopeak@neutral:	
  7558                           ; 1 bytes @ 0x10
  7559                           
  7560                           
  7561                           ; 2 bytes @ 0x10
  7562  0030                     	ds	1
  7563  0031                     ??__doprnt:	
  7564  0031                     ___xxtofl@sign:	
  7565                           ; 1 bytes @ 0x11
  7566                           
  7567                           
  7568                           ; 1 bytes @ 0x11
  7569  0031                     	ds	1
  7570  0032                     ___fladd@signs:	
  7571  0032                     ___xxtofl@exp:	
  7572                           ; 1 bytes @ 0x12
  7573                           
  7574  0032                     get_neutral_peaktopeak@highest_peak:	
  7575                           ; 1 bytes @ 0x12
  7576                           
  7577                           
  7578                           ; 2 bytes @ 0x12
  7579  0032                     	ds	1
  7580  0033                     ___fladd@aexp:	
  7581  0033                     ___xxtofl@arg:	
  7582                           ; 1 bytes @ 0x13
  7583                           
  7584                           
  7585                           ; 4 bytes @ 0x13
  7586  0033                     	ds	1
  7587  0034                     ___fladd@bexp:	
  7588  0034                     get_neutral_peaktopeak@lowest_peak:	
  7589                           ; 1 bytes @ 0x14
  7590                           
  7591                           
  7592                           ; 2 bytes @ 0x14
  7593  0034                     	ds	1
  7594  0035                     __doprnt@flag:	
  7595  0035                     ___fladd@grs:	
  7596                           ; 1 bytes @ 0x15
  7597                           
  7598                           
  7599                           ; 1 bytes @ 0x15
  7600  0035                     	ds	1
  7601  0036                     get_neutral_peaktopeak@i:	
  7602  0036                     __doprnt@prec:	
  7603                           ; 1 bytes @ 0x16
  7604                           
  7605                           
  7606                           ; 1 bytes @ 0x16
  7607  0036                     	ds	1
  7608  0037                     ?_get_moving_average:	
  7609  0037                     get_moving_average@datapoint:	
  7610                           ; 4 bytes @ 0x17
  7611                           
  7612  0037                     __doprnt@ccnt:	
  7613                           ; 2 bytes @ 0x17
  7614                           
  7615                           
  7616                           ; 2 bytes @ 0x17
  7617  0037                     	ds	2
  7618  0039                     __doprnt@val:	
  7619                           
  7620                           ; 2 bytes @ 0x19
  7621  0039                     	ds	2
  7622  003B                     ??_get_moving_average:	
  7623  003B                     __doprnt@c:	
  7624                           ; 1 bytes @ 0x1B
  7625                           
  7626                           
  7627                           ; 1 bytes @ 0x1B
  7628  003B                     	ds	1
  7629  003C                     __doprnt@pb:	
  7630                           
  7631                           ; 1 bytes @ 0x1C
  7632  003C                     	ds	1
  7633  003D                     ?_sprintf:	
  7634  003D                     ?_printf:	
  7635                           ; 2 bytes @ 0x1D
  7636                           
  7637  003D                     printf@f:	
  7638                           ; 2 bytes @ 0x1D
  7639                           
  7640  003D                     sprintf@f:	
  7641                           ; 2 bytes @ 0x1D
  7642                           
  7643                           
  7644                           ; 2 bytes @ 0x1D
  7645  003D                     	ds	2
  7646  003F                     ??_printf:	
  7647  003F                     ?___fltol:	
  7648                           ; 1 bytes @ 0x1F
  7649                           
  7650  003F                     printf@ap:	
  7651                           ; 4 bytes @ 0x1F
  7652                           
  7653  003F                     ___fltol@f1:	
  7654                           ; 1 bytes @ 0x1F
  7655                           
  7656                           
  7657                           ; 4 bytes @ 0x1F
  7658  003F                     	ds	1
  7659  0040                     printf@pb:	
  7660                           
  7661                           ; 3 bytes @ 0x20
  7662  0040                     	ds	1
  7663  0041                     ??_sprintf:	
  7664  0041                     sprintf@ap:	
  7665                           ; 1 bytes @ 0x21
  7666                           
  7667                           
  7668                           ; 1 bytes @ 0x21
  7669  0041                     	ds	1
  7670  0042                     sprintf@wh:	
  7671                           
  7672                           ; 1 bytes @ 0x22
  7673  0042                     	ds	1
  7674  0043                     ??___fltol:	
  7675  0043                     sprintf@pb:	
  7676                           ; 1 bytes @ 0x23
  7677                           
  7678                           
  7679                           ; 3 bytes @ 0x23
  7680  0043                     	ds	4
  7681  0047                     ___fltol@sign1:	
  7682                           
  7683                           ; 1 bytes @ 0x27
  7684  0047                     	ds	1
  7685  0048                     ___fltol@exp1:	
  7686                           
  7687                           ; 1 bytes @ 0x28
  7688  0048                     	ds	1
  7689  0049                     ??_main:	
  7690                           
  7691                           ; 1 bytes @ 0x29
  7692  0049                     	ds	4
  7693                           
  7694                           	psect	text2
  7695  067B                     __ptext2:	
  7696 ;; *************** function _sbuf_remove *****************
  7697 ;; Defined at:
  7698 ;;		line 94 in file "signal_buffer.c"
  7699 ;; Parameters:    Size  Location     Type
  7700 ;;		None
  7701 ;; Auto vars:     Size  Location     Type
  7702 ;;  element         2    0        unsigned int 
  7703 ;; Return value:  Size  Location     Type
  7704 ;;                  1    wreg      unsigned char 
  7705 ;; Registers used:
  7706 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  7707 ;; Tracked objects:
  7708 ;;		On entry : 3C/1
  7709 ;;		On exit  : 3F/0
  7710 ;;		Unchanged: 0/0
  7711 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7712 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7713 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7714 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7715 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7716 ;;Total ram usage:        0 bytes
  7717 ;; Hardware stack levels used:    1
  7718 ;; Hardware stack levels required when called:    6
  7719 ;; This function calls:
  7720 ;;		___awmod
  7721 ;;		_sbuf_isempty
  7722 ;; This function is called by:
  7723 ;;		_main
  7724 ;; This function uses a non-reentrant model
  7725 ;;
  7726                           
  7727                           
  7728                           ;psect for function _sbuf_remove
  7729  067B                     _sbuf_remove:	
  7730                           
  7731                           ;signal_buffer.c: 96: uint16_t element;
  7732                           ;signal_buffer.c: 98: if (sbuf_isempty()) {
  7733                           
  7734                           ;incstack = 0
  7735                           ; Regs used in _sbuf_remove: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  7736  067B  2696  3186         	fcall	_sbuf_isempty
  7737  067D  3A00               	xorlw	0
  7738  067E  1D03               	btfss	3,2
  7739  067F  0008               	return
  7740                           
  7741                           ;signal_buffer.c: 102: else {
  7742                           ;signal_buffer.c: 103: element = sb_data[sb_front];
  7743  0680  308C               	movlw	140
  7744  0681  0086               	movwf	6
  7745  0682  3023               	movlw	35
  7746  0683  0087               	movwf	7
  7747                           
  7748                           ;signal_buffer.c: 104: if (sb_front == sb_rear) {
  7749  0684  0852               	movf	_sb_front,w
  7750  0685  0651               	xorwf	_sb_rear,w
  7751  0686  1D03               	skipz
  7752  0687  2E8D               	goto	l4148
  7753                           
  7754                           ;signal_buffer.c: 105: sb_front = -1;
  7755  0688  01D2               	clrf	_sb_front
  7756  0689  03D2               	decf	_sb_front,f
  7757                           
  7758                           ;signal_buffer.c: 106: sb_rear = -1;
  7759  068A  01D1               	clrf	_sb_rear
  7760  068B  03D1               	decf	_sb_rear,f
  7761                           
  7762                           ;signal_buffer.c: 107: } else {
  7763  068C  0008               	return
  7764  068D                     l4148:	
  7765                           
  7766                           ;signal_buffer.c: 108: sb_front = (sb_front + 1) % 50;
  7767  068D  0852               	movf	_sb_front,w
  7768  068E  2759  3186         	fcall	PL10	;call to abstracted procedure
  7769  0690  269A               	fcall	PL36	;call to abstracted procedure
  7770  0691  3182  22FE         	fcall	___awmod
  7771  0693  0822               	movf	?___awmod,w
  7772  0694  00D2               	movwf	_sb_front
  7773  0695  0008               	return
  7774  0696                     __end_of_sbuf_remove:	
  7775  0696                     __ptext3:	
  7776 ;; *************** function _sbuf_isempty *****************
  7777 ;; Defined at:
  7778 ;;		line 66 in file "signal_buffer.c"
  7779 ;; Parameters:    Size  Location     Type
  7780 ;;		None
  7781 ;; Auto vars:     Size  Location     Type
  7782 ;;		None
  7783 ;; Return value:  Size  Location     Type
  7784 ;;                  1    wreg      unsigned char 
  7785 ;; Registers used:
  7786 ;;		wreg, status,2, status,0
  7787 ;; Tracked objects:
  7788 ;;		On entry : 3C/1
  7789 ;;		On exit  : 3F/0
  7790 ;;		Unchanged: 0/0
  7791 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7792 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7793 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7794 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7795 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7796 ;;Total ram usage:        0 bytes
  7797 ;; Hardware stack levels used:    1
  7798 ;; Hardware stack levels required when called:    5
  7799 ;; This function calls:
  7800 ;;		Nothing
  7801 ;; This function is called by:
  7802 ;;		_sbuf_remove
  7803 ;; This function uses a non-reentrant model
  7804 ;;
  7805                           
  7806                           
  7807                           ;psect for function _sbuf_isempty
  7808  0696                     _sbuf_isempty:	
  7809                           
  7810                           ;signal_buffer.c: 68: if (sb_front == -1)
  7811                           
  7812                           ;incstack = 0
  7813                           ; Regs used in _sbuf_isempty: [wreg+status,2+status,0]
  7814  0696  0140               	movlb	0	; select bank0
  7815  0697  0F52               	incfsz	_sb_front,w
  7816  0698  3400               	retlw	0
  7817                           
  7818                           ;signal_buffer.c: 69: return 1;
  7819  0699  3401               	retlw	1
  7820  069A                     __end_of_sbuf_isempty:	
  7821                           ;signal_buffer.c: 70: else
  7822                           ;signal_buffer.c: 71: return 0;
  7823                           
  7824  069A                     PL36:	
  7825  069A  1903               	skipnz
  7826  069B  0AA5               	incf	___awmod@dividend+1,f
  7827  069C  3032               	movlw	50
  7828  069D  00A2               	movwf	___awmod@divisor
  7829  069E  01A3               	clrf	___awmod@divisor+1
  7830  069F  0008               	return
  7831  06A0                     __end_ofPL36:	
  7832  06A0                     __ptext11:	
  7833 ;; *************** function _get_neutral_peaktopeak *****************
  7834 ;; Defined at:
  7835 ;;		line 57 in file "signal_processing.c"
  7836 ;; Parameters:    Size  Location     Type
  7837 ;;  datapoint       2   10[BANK0 ] unsigned int 
  7838 ;; Auto vars:     Size  Location     Type
  7839 ;;  lowest_peak     2   20[BANK0 ] unsigned int 
  7840 ;;  highest_peak    2   18[BANK0 ] unsigned int 
  7841 ;;  neutral         2   16[BANK0 ] unsigned int 
  7842 ;;  i               1   22[BANK0 ] unsigned char 
  7843 ;; Return value:  Size  Location     Type
  7844 ;;                  2   10[BANK0 ] unsigned int 
  7845 ;; Registers used:
  7846 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  7847 ;; Tracked objects:
  7848 ;;		On entry : 3F/0
  7849 ;;		On exit  : 3F/0
  7850 ;;		Unchanged: 0/0
  7851 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7852 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7853 ;;      Locals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7854 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7855 ;;      Totals:         0      13       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7856 ;;Total ram usage:       13 bytes
  7857 ;; Hardware stack levels used:    1
  7858 ;; Hardware stack levels required when called:    7
  7859 ;; This function calls:
  7860 ;;		___awmod
  7861 ;;		_pkdata_insert
  7862 ;;		_pkdata_isfull
  7863 ;;		_pkdata_remove
  7864 ;; This function is called by:
  7865 ;;		_main
  7866 ;; This function uses a non-reentrant model
  7867 ;;
  7868                           
  7869                           
  7870                           ;psect for function _get_neutral_peaktopeak
  7871  06A0                     _get_neutral_peaktopeak:	
  7872                           
  7873                           ;signal_processing.c: 60: pkdata_insert(datapoint);
  7874                           
  7875                           ;incstack = 0
  7876                           ; Regs used in _get_neutral_peaktopeak: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstac
      +                          k]
  7877  06A0  082B               	movf	get_neutral_peaktopeak@datapoint+1,w
  7878  06A1  00A9               	movwf	pkdata_insert@element+1
  7879  06A2  082A               	movf	get_neutral_peaktopeak@datapoint,w
  7880  06A3  00A8               	movwf	pkdata_insert@element
  7881  06A4  2726  3186         	fcall	_pkdata_insert
  7882                           
  7883                           ;signal_processing.c: 63: if (pkdata_isfull())
  7884  06A6  2708  3186         	fcall	_pkdata_isfull
  7885  06A8  3A00               	xorlw	0
  7886  06A9  1903               	skipnz
  7887  06AA  2EAD               	goto	l4076
  7888                           
  7889                           ;signal_processing.c: 64: {
  7890                           ;signal_processing.c: 65: pkdata_remove();
  7891  06AB  273F  3186         	fcall	_pkdata_remove
  7892  06AD                     l4076:	
  7893                           
  7894                           ;signal_processing.c: 66: }
  7895                           ;signal_processing.c: 69: uint16_t highest_peak = pk_data[pk_front];
  7896  06AD  3550               	lslf	_pk_front,w
  7897  06AE  3EA0               	addlw	(low (_pk_data| 0))& (0+255)
  7898  06AF  0086               	movwf	6
  7899  06B0  0187               	clrf	7
  7900  06B1  3F40               	moviw [0]fsr1
  7901  06B2  00B2               	movwf	get_neutral_peaktopeak@highest_peak
  7902  06B3  3F41               	moviw [1]fsr1
  7903  06B4  00B3               	movwf	get_neutral_peaktopeak@highest_peak+1
  7904                           
  7905                           ;signal_processing.c: 70: uint16_t lowest_peak = pk_data[pk_front];
  7906  06B5  3550               	lslf	_pk_front,w
  7907  06B6  3EA0               	addlw	(low (_pk_data| 0))& (0+255)
  7908  06B7  0086               	movwf	6
  7909  06B8  3F40               	moviw [0]fsr1
  7910  06B9  00B4               	movwf	get_neutral_peaktopeak@lowest_peak
  7911  06BA  3F41               	moviw [1]fsr1
  7912  06BB  00B5               	movwf	get_neutral_peaktopeak@lowest_peak+1
  7913                           
  7914                           ;signal_processing.c: 71: uint16_t neutral;
  7915                           ;signal_processing.c: 73: uint8_t i;
  7916                           ;signal_processing.c: 76: for (i = pk_front; i != pk_rear; i = (i + 1) % (2*((int)(50 / 
      +                          25))+1)) {
  7917  06BC  0850               	movf	_pk_front,w
  7918  06BD                     L7:	
  7919  06BD  00B6               	movwf	get_neutral_peaktopeak@i
  7920  06BE  084F               	movf	_pk_rear,w
  7921  06BF  00AC               	movwf	??_get_neutral_peaktopeak
  7922  06C0  01AD               	clrf	??_get_neutral_peaktopeak+1
  7923  06C1  1BAC               	btfsc	??_get_neutral_peaktopeak,7
  7924  06C2  03AD               	decf	??_get_neutral_peaktopeak+1,f
  7925  06C3  0836               	movf	get_neutral_peaktopeak@i,w
  7926  06C4  00AE               	movwf	??_get_neutral_peaktopeak+2
  7927  06C5  01AF               	clrf	??_get_neutral_peaktopeak+3
  7928  06C6  082D               	movf	??_get_neutral_peaktopeak+1,w
  7929  06C7  062F               	xorwf	??_get_neutral_peaktopeak+3,w
  7930  06C8  1D03               	skipz
  7931  06C9  2ECC               	goto	u4095
  7932  06CA  082C               	movf	??_get_neutral_peaktopeak,w
  7933  06CB  062E               	xorwf	??_get_neutral_peaktopeak+2,w
  7934  06CC                     u4095:	
  7935  06CC  1903               	btfsc	3,2
  7936  06CD  2EFB               	goto	l4092
  7937                           
  7938                           ;signal_processing.c: 77: if (pk_data[i] > highest_peak)
  7939  06CE  275F  3186         	fcall	PL16	;call to abstracted procedure
  7940  06D0  00AC               	movwf	??_get_neutral_peaktopeak
  7941  06D1  3F41               	moviw [1]fsr1
  7942  06D2  00AD               	movwf	??_get_neutral_peaktopeak+1
  7943  06D3  0233               	subwf	get_neutral_peaktopeak@highest_peak+1,w
  7944  06D4  1D03               	skipz
  7945  06D5  2ED8               	goto	u4075
  7946  06D6  082C               	movf	??_get_neutral_peaktopeak,w
  7947  06D7  0232               	subwf	get_neutral_peaktopeak@highest_peak,w
  7948  06D8                     u4075:	
  7949  06D8  1803               	skipnc
  7950  06D9  2EDF               	goto	l773
  7951                           
  7952                           ;signal_processing.c: 78: {
  7953                           ;signal_processing.c: 80: highest_peak = pk_data[i];
  7954  06DA  275F  3186         	fcall	PL16	;call to abstracted procedure
  7955  06DC  00B2               	movwf	get_neutral_peaktopeak@highest_peak
  7956  06DD  3F41               	moviw [1]fsr1
  7957  06DE  00B3               	movwf	get_neutral_peaktopeak@highest_peak+1
  7958  06DF                     l773:	
  7959                           
  7960                           ;signal_processing.c: 81: }
  7961                           ;signal_processing.c: 82: if (pk_data[i] < lowest_peak)
  7962  06DF  275F  3186         	fcall	PL16	;call to abstracted procedure
  7963  06E1  00AC               	movwf	??_get_neutral_peaktopeak
  7964  06E2  3F41               	moviw [1]fsr1
  7965  06E3  00AD               	movwf	??_get_neutral_peaktopeak+1
  7966  06E4  0835               	movf	get_neutral_peaktopeak@lowest_peak+1,w
  7967  06E5  022D               	subwf	??_get_neutral_peaktopeak+1,w
  7968  06E6  1D03               	skipz
  7969  06E7  2EEA               	goto	u4085
  7970  06E8  0834               	movf	get_neutral_peaktopeak@lowest_peak,w
  7971  06E9  022C               	subwf	??_get_neutral_peaktopeak,w
  7972  06EA                     u4085:	
  7973  06EA  1803               	skipnc
  7974  06EB  2EF1               	goto	l4088
  7975                           
  7976                           ;signal_processing.c: 83: {
  7977                           ;signal_processing.c: 85: lowest_peak = pk_data[i];
  7978  06EC  275F  3186         	fcall	PL16	;call to abstracted procedure
  7979  06EE  00B4               	movwf	get_neutral_peaktopeak@lowest_peak
  7980  06EF  3F41               	moviw [1]fsr1
  7981  06F0  00B5               	movwf	get_neutral_peaktopeak@lowest_peak+1
  7982  06F1                     l4088:	
  7983  06F1  0836               	movf	get_neutral_peaktopeak@i,w
  7984  06F2  00A4               	movwf	___awmod@dividend
  7985  06F3  01A5               	clrf	___awmod@dividend+1
  7986  06F4  0AA4               	incf	___awmod@dividend,f
  7987  06F5  2765               	fcall	PL22	;call to abstracted procedure
  7988  06F6  3182  22FE  3186   	fcall	___awmod
  7989  06F9  0822               	movf	?___awmod,w
  7990  06FA  2EBD               	goto	L7
  7991  06FB                     l4092:	
  7992                           
  7993                           ;signal_processing.c: 86: }
  7994                           ;signal_processing.c: 87: }
  7995                           ;signal_processing.c: 90: neutral = (highest_peak + lowest_peak) / 2;
  7996  06FB  0834               	movf	get_neutral_peaktopeak@lowest_peak,w
  7997  06FC  0732               	addwf	get_neutral_peaktopeak@highest_peak,w
  7998  06FD  00B0               	movwf	get_neutral_peaktopeak@neutral
  7999  06FE  0835               	movf	get_neutral_peaktopeak@lowest_peak+1,w
  8000  06FF  3D33               	addwfc	get_neutral_peaktopeak@highest_peak+1,w
  8001  0700  00B1               	movwf	get_neutral_peaktopeak@neutral+1
  8002  0701  36B1               	lsrf	get_neutral_peaktopeak@neutral+1,f
  8003  0702  0CB0               	rrf	get_neutral_peaktopeak@neutral,f
  8004                           
  8005                           ;signal_processing.c: 91: return neutral;
  8006  0703  0831               	movf	get_neutral_peaktopeak@neutral+1,w
  8007  0704  00AB               	movwf	?_get_neutral_peaktopeak+1
  8008  0705  0830               	movf	get_neutral_peaktopeak@neutral,w
  8009  0706  00AA               	movwf	?_get_neutral_peaktopeak
  8010  0707  0008               	return
  8011  0708                     __end_of_get_neutral_peaktopeak:	
  8012  0708                     __ptext15:	
  8013 ;; *************** function _pkdata_isfull *****************
  8014 ;; Defined at:
  8015 ;;		line 54 in file "peak_filter.c"
  8016 ;; Parameters:    Size  Location     Type
  8017 ;;		None
  8018 ;; Auto vars:     Size  Location     Type
  8019 ;;		None
  8020 ;; Return value:  Size  Location     Type
  8021 ;;                  1    wreg      unsigned char 
  8022 ;; Registers used:
  8023 ;;		wreg, status,2, status,0
  8024 ;; Tracked objects:
  8025 ;;		On entry : 3F/0
  8026 ;;		On exit  : 3F/0
  8027 ;;		Unchanged: 0/0
  8028 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8029 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8030 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8031 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8032 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8033 ;;Total ram usage:        4 bytes
  8034 ;; Hardware stack levels used:    1
  8035 ;; Hardware stack levels required when called:    5
  8036 ;; This function calls:
  8037 ;;		Nothing
  8038 ;; This function is called by:
  8039 ;;		_pkdata_insert
  8040 ;;		_get_neutral_peaktopeak
  8041 ;; This function uses a non-reentrant model
  8042 ;;
  8043                           
  8044                           
  8045                           ;psect for function _pkdata_isfull
  8046  0708                     _pkdata_isfull:	
  8047                           
  8048                           ;peak_filter.c: 56: if ((pk_front == pk_rear + 1) || (pk_front == 0 && pk_rear == (2*((i
      +                          nt)(50 / 25))+1) - 1))
  8049                           
  8050                           ;incstack = 0
  8051                           ; Regs used in _pkdata_isfull: [wreg+status,2+status,0]
  8052  0708  0850               	movf	_pk_front,w
  8053  0709  00A2               	movwf	??_pkdata_isfull
  8054  070A  01A3               	clrf	??_pkdata_isfull+1
  8055  070B  1BA2               	btfsc	??_pkdata_isfull,7
  8056  070C  03A3               	decf	??_pkdata_isfull+1,f
  8057  070D  3001               	movlw	1
  8058  070E  074F               	addwf	_pk_rear,w
  8059  070F  00A4               	movwf	??_pkdata_isfull+2
  8060  0710  01A5               	clrf	??_pkdata_isfull+3
  8061  0711  1803               	skipnc
  8062  0712  0AA5               	incf	??_pkdata_isfull+3,f
  8063  0713  1BCF               	btfsc	_pk_rear,7
  8064  0714  03A5               	decf	??_pkdata_isfull+3,f
  8065  0715  0140               	movlb	0	; select bank0
  8066  0716  0823               	movf	??_pkdata_isfull+1,w
  8067  0717  0625               	xorwf	??_pkdata_isfull+3,w
  8068  0718  1D03               	skipz
  8069  0719  2F1C               	goto	u3545
  8070  071A  0822               	movf	??_pkdata_isfull,w
  8071  071B  0624               	xorwf	??_pkdata_isfull+2,w
  8072  071C                     u3545:	
  8073  071C  1903               	skipnz
  8074  071D  3401               	retlw	1
  8075  071E  0850               	movf	_pk_front,w
  8076  071F  1D03               	btfss	3,2
  8077  0720  3400               	retlw	0
  8078  0721  3004               	movlw	4
  8079  0722  064F               	xorwf	_pk_rear,w
  8080  0723  1903               	btfsc	3,2
  8081                           
  8082                           ;peak_filter.c: 57: return 1;
  8083  0724  3401               	retlw	1
  8084                           
  8085                           ;peak_filter.c: 58: else
  8086                           ;peak_filter.c: 59: return 0;
  8087  0725  3400               	retlw	0
  8088  0726                     __end_of_pkdata_isfull:	
  8089  0726                     __ptext14:	
  8090 ;; *************** function _pkdata_insert *****************
  8091 ;; Defined at:
  8092 ;;		line 72 in file "peak_filter.c"
  8093 ;; Parameters:    Size  Location     Type
  8094 ;;  element         2    8[BANK0 ] unsigned int 
  8095 ;; Auto vars:     Size  Location     Type
  8096 ;;		None
  8097 ;; Return value:  Size  Location     Type
  8098 ;;                  1    wreg      unsigned char 
  8099 ;; Registers used:
  8100 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  8101 ;; Tracked objects:
  8102 ;;		On entry : 3F/0
  8103 ;;		On exit  : 3F/0
  8104 ;;		Unchanged: 0/0
  8105 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8106 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8107 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8108 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8109 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8110 ;;Total ram usage:        2 bytes
  8111 ;; Hardware stack levels used:    1
  8112 ;; Hardware stack levels required when called:    6
  8113 ;; This function calls:
  8114 ;;		___awmod
  8115 ;;		_pkdata_isfull
  8116 ;; This function is called by:
  8117 ;;		_get_neutral_peaktopeak
  8118 ;; This function uses a non-reentrant model
  8119 ;;
  8120                           
  8121                           
  8122                           ;psect for function _pkdata_insert
  8123  0726                     _pkdata_insert:	
  8124                           
  8125                           ;peak_filter.c: 74: if (pkdata_isfull()) {
  8126                           
  8127                           ;incstack = 0
  8128                           ; Regs used in _pkdata_insert: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  8129  0726  2708  3186         	fcall	_pkdata_isfull
  8130  0728  3A00               	xorlw	0
  8131  0729  1D03               	btfss	3,2
  8132  072A  0008               	return
  8133                           
  8134                           ;peak_filter.c: 78: if (pk_front == -1)
  8135  072B  0F50               	incfsz	_pk_front,w
  8136  072C  2F2E               	goto	l3860
  8137                           
  8138                           ;peak_filter.c: 79: pk_front = 0;
  8139  072D  01D0               	clrf	_pk_front
  8140  072E                     l3860:	
  8141                           
  8142                           ;peak_filter.c: 80: pk_rear = (pk_rear + 1) % (2*((int)(50 / 25))+1);
  8143  072E  084F               	movf	_pk_rear,w
  8144  072F  2759  3186         	fcall	PL10	;call to abstracted procedure
  8145  0731  2765               	fcall	PL22	;call to abstracted procedure
  8146  0732  3182  22FE         	fcall	___awmod
  8147  0734  0822               	movf	?___awmod,w
  8148  0735  00CF               	movwf	_pk_rear
  8149                           
  8150                           ;peak_filter.c: 81: pk_data[pk_rear] = element;
  8151  0736  354F               	lslf	_pk_rear,w
  8152  0737  3EA0               	addlw	(low (_pk_data| 0))& (0+255)
  8153  0738  0086               	movwf	6
  8154  0739  0187               	clrf	7
  8155  073A  0828               	movf	pkdata_insert@element,w
  8156  073B  3FC0               	movwi [0]fsr1
  8157  073C  0829               	movf	pkdata_insert@element+1,w
  8158  073D  3FC1               	movwi [1]fsr1
  8159  073E  0008               	return
  8160  073F                     __end_of_pkdata_insert:	
  8161  073F                     __ptext12:	
  8162 ;; *************** function _pkdata_remove *****************
  8163 ;; Defined at:
  8164 ;;		line 87 in file "peak_filter.c"
  8165 ;; Parameters:    Size  Location     Type
  8166 ;;		None
  8167 ;; Auto vars:     Size  Location     Type
  8168 ;;  element         2    0        unsigned int 
  8169 ;; Return value:  Size  Location     Type
  8170 ;;                  1    wreg      unsigned char 
  8171 ;; Registers used:
  8172 ;;		wreg, status,2, status,0, pclath, cstack
  8173 ;; Tracked objects:
  8174 ;;		On entry : 3F/0
  8175 ;;		On exit  : 3F/0
  8176 ;;		Unchanged: 0/0
  8177 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8178 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8179 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8180 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8181 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8182 ;;Total ram usage:        0 bytes
  8183 ;; Hardware stack levels used:    1
  8184 ;; Hardware stack levels required when called:    6
  8185 ;; This function calls:
  8186 ;;		___awmod
  8187 ;;		_pkdata_isempty
  8188 ;; This function is called by:
  8189 ;;		_get_neutral_peaktopeak
  8190 ;; This function uses a non-reentrant model
  8191 ;;
  8192                           
  8193                           
  8194                           ;psect for function _pkdata_remove
  8195  073F                     _pkdata_remove:	
  8196                           
  8197                           ;peak_filter.c: 89: uint16_t element;
  8198                           ;peak_filter.c: 90: if (pkdata_isempty()) {
  8199                           
  8200                           ;incstack = 0
  8201                           ; Regs used in _pkdata_remove: [wreg+status,2+status,0+pclath+cstack]
  8202  073F  2756  3186         	fcall	_pkdata_isempty
  8203  0741  3A00               	xorlw	0
  8204  0742  1D03               	btfss	3,2
  8205  0743  0008               	return
  8206                           
  8207                           ;peak_filter.c: 94: if (pk_front == pk_rear) {
  8208  0744  0850               	movf	_pk_front,w
  8209  0745  064F               	xorwf	_pk_rear,w
  8210  0746  1D03               	skipz
  8211  0747  2F4D               	goto	l3876
  8212                           
  8213                           ;peak_filter.c: 95: pk_front = -1;
  8214  0748  01D0               	clrf	_pk_front
  8215  0749  03D0               	decf	_pk_front,f
  8216                           
  8217                           ;peak_filter.c: 96: pk_rear = -1;
  8218  074A  01CF               	clrf	_pk_rear
  8219  074B  03CF               	decf	_pk_rear,f
  8220                           
  8221                           ;peak_filter.c: 97: } else {
  8222  074C  0008               	return
  8223  074D                     l3876:	
  8224                           
  8225                           ;peak_filter.c: 98: pk_front = (pk_front + 1) % (2*((int)(50 / 25))+1);
  8226  074D  0850               	movf	_pk_front,w
  8227  074E  2759  3186         	fcall	PL10	;call to abstracted procedure
  8228  0750  2765               	fcall	PL22	;call to abstracted procedure
  8229  0751  3182  22FE         	fcall	___awmod
  8230  0753  0822               	movf	?___awmod,w
  8231  0754  00D0               	movwf	_pk_front
  8232  0755  0008               	return
  8233  0756                     __end_of_pkdata_remove:	
  8234  0756                     __ptext13:	
  8235 ;; *************** function _pkdata_isempty *****************
  8236 ;; Defined at:
  8237 ;;		line 63 in file "peak_filter.c"
  8238 ;; Parameters:    Size  Location     Type
  8239 ;;		None
  8240 ;; Auto vars:     Size  Location     Type
  8241 ;;		None
  8242 ;; Return value:  Size  Location     Type
  8243 ;;                  1    wreg      unsigned char 
  8244 ;; Registers used:
  8245 ;;		wreg, status,2, status,0
  8246 ;; Tracked objects:
  8247 ;;		On entry : 3F/0
  8248 ;;		On exit  : 3F/0
  8249 ;;		Unchanged: 0/0
  8250 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8251 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8252 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8253 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8254 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8255 ;;Total ram usage:        0 bytes
  8256 ;; Hardware stack levels used:    1
  8257 ;; Hardware stack levels required when called:    5
  8258 ;; This function calls:
  8259 ;;		Nothing
  8260 ;; This function is called by:
  8261 ;;		_pkdata_remove
  8262 ;; This function uses a non-reentrant model
  8263 ;;
  8264                           
  8265                           
  8266                           ;psect for function _pkdata_isempty
  8267  0756                     _pkdata_isempty:	
  8268                           
  8269                           ;peak_filter.c: 65: if (pk_front == -1)
  8270                           
  8271                           ;incstack = 0
  8272                           ; Regs used in _pkdata_isempty: [wreg+status,2+status,0]
  8273  0756  0F50               	incfsz	_pk_front,w
  8274  0757  3400               	retlw	0
  8275                           
  8276                           ;peak_filter.c: 66: return 1;
  8277  0758  3401               	retlw	1
  8278  0759                     __end_of_pkdata_isempty:	
  8279                           ;peak_filter.c: 67: else
  8280                           ;peak_filter.c: 68: return 0;
  8281                           
  8282  0759                     PL10:	
  8283  0759  00A4               	movwf	___awmod@dividend
  8284  075A  01A5               	clrf	___awmod@dividend+1
  8285  075B  1BA4               	btfsc	___awmod@dividend,7
  8286  075C  03A5               	decf	___awmod@dividend+1,f
  8287  075D  0AA4               	incf	___awmod@dividend,f
  8288  075E  0008               	return
  8289  075F                     __end_ofPL10:	
  8290  075F                     PL16:	
  8291  075F  3536               	lslf	get_neutral_peaktopeak@i,w
  8292  0760  3EA0               	addlw	(low (_pk_data| 0))& (0+255)
  8293  0761  0086               	movwf	6
  8294  0762  0187               	clrf	7
  8295  0763  3F40               	moviw [0]fsr1
  8296  0764  0008               	return
  8297  0765                     __end_ofPL16:	
  8298  0765                     PL22:	
  8299  0765  1903               	skipnz
  8300  0766  0AA5               	incf	___awmod@dividend+1,f
  8301  0767  3005               	movlw	5
  8302  0768  00A2               	movwf	___awmod@divisor
  8303  0769  01A3               	clrf	___awmod@divisor+1
  8304  076A  0008               	return
  8305  076B                     __end_ofPL22:	
  8306                           
  8307                           	psect	text4
  8308  0E73                     __ptext4:	
  8309 ;; *************** function _sbuf_peek *****************
  8310 ;; Defined at:
  8311 ;;		line 115 in file "signal_buffer.c"
  8312 ;; Parameters:    Size  Location     Type
  8313 ;;		None
  8314 ;; Auto vars:     Size  Location     Type
  8315 ;;		None
  8316 ;; Return value:  Size  Location     Type
  8317 ;;                  2    2[BANK0 ] unsigned int 
  8318 ;; Registers used:
  8319 ;;		wreg, fsr1l, fsr1h, status,2, status,0
  8320 ;; Tracked objects:
  8321 ;;		On entry : 0/0
  8322 ;;		On exit  : 3F/0
  8323 ;;		Unchanged: 0/0
  8324 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8325 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8326 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8327 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8328 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8329 ;;Total ram usage:        6 bytes
  8330 ;; Hardware stack levels used:    1
  8331 ;; Hardware stack levels required when called:    5
  8332 ;; This function calls:
  8333 ;;		Nothing
  8334 ;; This function is called by:
  8335 ;;		_main
  8336 ;; This function uses a non-reentrant model
  8337 ;;
  8338                           
  8339                           
  8340                           ;psect for function _sbuf_peek
  8341  0E73                     _sbuf_peek:	
  8342                           
  8343                           ;signal_buffer.c: 117: return sb_data[sb_front];
  8344                           
  8345                           ;incstack = 0
  8346                           ; Regs used in _sbuf_peek: [wreg+fsr1l+fsr1h+status,2+status,0]
  8347  0E73  0140               	movlb	0	; select bank0
  8348  0E74  0852               	movf	_sb_front,w
  8349  0E75  00A4               	movwf	??_sbuf_peek
  8350  0E76  308C               	movlw	140
  8351  0E77  01A5               	clrf	??_sbuf_peek+1
  8352  0E78  35A4               	lslf	??_sbuf_peek,f
  8353  0E79  0DA5               	rlf	??_sbuf_peek+1,f
  8354  0E7A  00A6               	movwf	??_sbuf_peek+2
  8355  0E7B  3023               	movlw	35
  8356  0E7C  00A7               	movwf	??_sbuf_peek+3
  8357  0E7D  0824               	movf	??_sbuf_peek,w
  8358  0E7E  0726               	addwf	??_sbuf_peek+2,w
  8359  0E7F  0086               	movwf	6
  8360  0E80  0825               	movf	??_sbuf_peek+1,w
  8361  0E81  3D27               	addwfc	??_sbuf_peek+3,w
  8362  0E82  0087               	movwf	7
  8363  0E83  3F40               	moviw [0]fsr1
  8364  0E84  00A2               	movwf	?_sbuf_peek
  8365  0E85  3F41               	moviw [1]fsr1
  8366  0E86  00A3               	movwf	?_sbuf_peek+1
  8367  0E87  0008               	return
  8368  0E88                     __end_of_sbuf_peek:	
  8369                           
  8370                           	psect	text6
  8371  0581                     __ptext6:	
  8372 ;; *************** function __doprnt *****************
  8373 ;; Defined at:
  8374 ;;		line 458 in file "C:\Program Files (x86)\Microchip\xc8\v1.44\sources\common\doprnt.c"
  8375 ;; Parameters:    Size  Location     Type
  8376 ;;  pb              1    wreg     PTR struct __prbuf
  8377 ;;		 -> sprintf@pb(3), printf@pb(3), 
  8378 ;;  f               2   14[BANK0 ] PTR const unsigned char 
  8379 ;;		 -> STR_6(51), STR_5(51), STR_4(51), STR_3(51), 
  8380 ;;		 -> STR_2(5), STR_1(8), 
  8381 ;;  ap              1   16[BANK0 ] PTR PTR void 
  8382 ;;		 -> sprintf@ap(1), printf@ap(1), 
  8383 ;; Auto vars:     Size  Location     Type
  8384 ;;  pb              1   28[BANK0 ] PTR struct __prbuf
  8385 ;;		 -> sprintf@pb(3), printf@pb(3), 
  8386 ;;  tmpval          4    0        struct .
  8387 ;;  val             2   25[BANK0 ] unsigned int 
  8388 ;;  ccnt            2   23[BANK0 ] int 
  8389 ;;  cp              2    0        PTR const unsigned char 
  8390 ;;  len             2    0        unsigned int 
  8391 ;;  c               1   27[BANK0 ] char 
  8392 ;;  prec            1   22[BANK0 ] char 
  8393 ;;  flag            1   21[BANK0 ] unsigned char 
  8394 ;; Return value:  Size  Location     Type
  8395 ;;                  2   14[BANK0 ] int 
  8396 ;; Registers used:
  8397 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  8398 ;; Tracked objects:
  8399 ;;		On entry : 3F/0
  8400 ;;		On exit  : 3F/0
  8401 ;;		Unchanged: 0/0
  8402 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8403 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8404 ;;      Locals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8405 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8406 ;;      Totals:         0      15       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8407 ;;Total ram usage:       15 bytes
  8408 ;; Hardware stack levels used:    1
  8409 ;; Hardware stack levels required when called:    7
  8410 ;; This function calls:
  8411 ;;		Absolute function
  8412 ;;		___lwdiv
  8413 ;;		___lwmod
  8414 ;;		_putch
  8415 ;; This function is called by:
  8416 ;;		_printf
  8417 ;;		_sprintf
  8418 ;; This function uses a non-reentrant model
  8419 ;;
  8420                           
  8421                           
  8422                           ;psect for function __doprnt
  8423  0581                     __doprnt:	
  8424                           
  8425                           ;incstack = 0
  8426                           ; Regs used in __doprnt: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  8427                           ;__doprnt@pb stored from wreg
  8428  0581  00BC               	movwf	__doprnt@pb
  8429                           
  8430                           ;doprnt.c: 499: signed char c;
  8431                           ;doprnt.c: 506: signed char prec;
  8432                           ;doprnt.c: 508: unsigned char flag;
  8433                           ;doprnt.c: 510: int ccnt = 0;
  8434  0582  01B7               	clrf	__doprnt@ccnt
  8435  0583  01B8               	clrf	__doprnt@ccnt+1
  8436  0584                     l5066:	
  8437                           ;doprnt.c: 523: union {
  8438                           ;doprnt.c: 524: unsigned long vd;
  8439                           ;doprnt.c: 525: double integ;
  8440                           ;doprnt.c: 526: } tmpval;
  8441                           ;doprnt.c: 528: unsigned int val;
  8442                           ;doprnt.c: 529: unsigned len;
  8443                           ;doprnt.c: 530: const char * cp;
  8444                           ;doprnt.c: 536: while(c = *f++) {
  8445                           
  8446  0584  2648  3185         	fcall	PL4	;call to abstracted procedure
  8447  0586  083B               	movf	__doprnt@c,w
  8448  0587  1903               	btfsc	3,2
  8449  0588  2E23               	goto	l5068
  8450                           
  8451                           ;doprnt.c: 538: if(c != '%')
  8452  0589  3025               	movlw	37
  8453  058A  063B               	xorwf	__doprnt@c,w
  8454  058B  1903               	btfsc	3,2
  8455  058C  2DA2               	goto	l5010
  8456                           
  8457                           ;doprnt.c: 540: {
  8458                           ;doprnt.c: 541: if(pb->func) (pb->func(c)),(++ccnt); else ((*pb->ptr++ = c),(++ccnt));
  8459  058D  2669  3185         	fcall	PL24	;call to abstracted procedure
  8460  058F  1903               	btfsc	3,2
  8461  0590  2D99               	goto	l5006
  8462  0591  083B               	movf	__doprnt@c,w
  8463  0592  2675               	fcall	PL28	;call to abstracted procedure
  8464  0593  008A               	movwf	10
  8465  0594  3F40               	moviw [0]fsr1
  8466  0595  000A               	callw
  8467  0596  3185               	pagesel	$
  8468  0597  0140               	movlb	0	; select bank0
  8469  0598  2D9E               	goto	L3
  8470  0599                     l5006:	
  8471  0599  2661  3185         	fcall	PL8	;call to abstracted procedure
  8472  059B  083B               	movf	__doprnt@c,w
  8473  059C  266F  3185         	fcall	PL26	;call to abstracted procedure
  8474  059E                     L3:	
  8475  059E  0AB7               	incf	__doprnt@ccnt,f
  8476  059F  1903               	skipnz
  8477  05A0  0AB8               	incf	__doprnt@ccnt+1,f
  8478  05A1  2D84               	goto	l5066
  8479  05A2                     l5010:	
  8480                           
  8481                           ;doprnt.c: 543: }
  8482                           ;doprnt.c: 548: flag = 0;
  8483  05A2  01B5               	clrf	__doprnt@flag
  8484                           
  8485                           ;doprnt.c: 635: switch(c = *f++) {
  8486  05A3  2648  3185         	fcall	PL4	;call to abstracted procedure
  8487                           
  8488                           ; Switch size 1, requested type "space"
  8489                           ; Number of cases is 3, Range of values is 0 to 105
  8490                           ; switch strategies available:
  8491                           ; Name         Instructions Cycles
  8492                           ; simple_byte           10     6 (average)
  8493                           ; direct_byte          218     6 (fixed)
  8494                           ; jumptable            260     6 (fixed)
  8495                           ;	Chosen strategy is simple_byte
  8496  05A5  3A00               	xorlw	0	; case 0
  8497  05A6  1903               	skipnz
  8498  05A7  2E23               	goto	l5068
  8499  05A8  3A64               	xorlw	100	; case 100
  8500  05A9  1903               	skipnz
  8501  05AA  2DAF               	goto	l5016
  8502  05AB  3A0D               	xorlw	13	; case 105
  8503  05AC  1903               	skipnz
  8504  05AD  2DAF               	goto	l5016
  8505  05AE  2D84               	goto	l5066
  8506  05AF                     l5016:	
  8507                           
  8508                           ;doprnt.c: 1253: {
  8509                           ;doprnt.c: 1259: val = (int)(*(int *)__va_arg((*(int **)ap), (int)0));
  8510  05AF  0830               	movf	__doprnt@ap,w
  8511  05B0  0086               	movwf	6
  8512  05B1  0187               	clrf	7
  8513  05B2  0801               	movf	1,w
  8514  05B3  0084               	movwf	4
  8515  05B4  3002               	movlw	2
  8516  05B5  0185               	clrf	5
  8517  05B6  0781               	addwf	1,f
  8518  05B7  3F00               	moviw [0]fsr0
  8519  05B8  00B9               	movwf	__doprnt@val
  8520  05B9  3F01               	moviw [1]fsr0
  8521  05BA  00BA               	movwf	__doprnt@val+1
  8522                           
  8523                           ;doprnt.c: 1261: if((int)val < 0) {
  8524  05BB  1FBA               	btfss	__doprnt@val+1,7
  8525  05BC  2DC4               	goto	l5024
  8526                           
  8527                           ;doprnt.c: 1262: flag |= 0x03;
  8528  05BD  3003               	movlw	3
  8529  05BE  04B5               	iorwf	__doprnt@flag,f
  8530                           
  8531                           ;doprnt.c: 1263: val = -val;
  8532  05BF  09B9               	comf	__doprnt@val,f
  8533  05C0  09BA               	comf	__doprnt@val+1,f
  8534  05C1  0AB9               	incf	__doprnt@val,f
  8535  05C2  1903               	skipnz
  8536  05C3  0ABA               	incf	__doprnt@val+1,f
  8537  05C4                     l5024:	
  8538                           
  8539                           ;doprnt.c: 1264: }
  8540                           ;doprnt.c: 1266: }
  8541                           ;doprnt.c: 1305: for(c = 1 ; c != sizeof dpowers/sizeof dpowers[0] ; c++)
  8542  05C4  01BB               	clrf	__doprnt@c
  8543  05C5  0ABB               	incf	__doprnt@c,f
  8544  05C6                     l5030:	
  8545                           
  8546                           ;doprnt.c: 1306: if(val < dpowers[c])
  8547  05C6  083B               	movf	__doprnt@c,w
  8548  05C7  2655  3185         	fcall	PL6	;call to abstracted procedure
  8549  05C9  00B3               	movwf	??__doprnt+2
  8550  05CA  3F01               	moviw [1]fsr0
  8551  05CB  00B4               	movwf	??__doprnt+3
  8552  05CC  023A               	subwf	__doprnt@val+1,w
  8553  05CD  1D03               	skipz
  8554  05CE  2DD1               	goto	u5745
  8555  05CF  0833               	movf	??__doprnt+2,w
  8556  05D0  0239               	subwf	__doprnt@val,w
  8557  05D1                     u5745:	
  8558  05D1  1C03               	btfss	3,0
  8559  05D2  2DD8               	goto	l5038
  8560  05D3  3005               	movlw	5
  8561  05D4  0ABB               	incf	__doprnt@c,f
  8562  05D5  063B               	xorwf	__doprnt@c,w
  8563  05D6  1D03               	btfss	3,2
  8564  05D7  2DC6               	goto	l5030
  8565  05D8                     l5038:	
  8566                           
  8567                           ;doprnt.c: 1422: {
  8568                           ;doprnt.c: 1438: if(flag & 0x03)
  8569  05D8  0835               	movf	__doprnt@flag,w
  8570  05D9  3903               	andlw	3
  8571  05DA  1903               	btfsc	3,2
  8572  05DB  2DF0               	goto	l5050
  8573                           
  8574                           ;doprnt.c: 1439: if(pb->func) (pb->func('-')),(++ccnt); else ((*pb->ptr++ = '-'),(++ccnt
      +                          ));
  8575  05DC  2669  3185         	fcall	PL24	;call to abstracted procedure
  8576  05DE  1903               	btfsc	3,2
  8577  05DF  2DE8               	goto	l5046
  8578  05E0  302D               	movlw	45
  8579  05E1  2675               	fcall	PL28	;call to abstracted procedure
  8580  05E2  008A               	movwf	10
  8581  05E3  3F40               	moviw [0]fsr1
  8582  05E4  000A               	callw
  8583  05E5  3185               	pagesel	$
  8584  05E6  0140               	movlb	0	; select bank0
  8585  05E7  2DED               	goto	L4
  8586  05E8                     l5046:	
  8587  05E8  2661  3185         	fcall	PL8	;call to abstracted procedure
  8588  05EA  302D               	movlw	45
  8589  05EB  266F  3185         	fcall	PL26	;call to abstracted procedure
  8590  05ED                     L4:	
  8591  05ED  0AB7               	incf	__doprnt@ccnt,f
  8592  05EE  1903               	skipnz
  8593  05EF  0AB8               	incf	__doprnt@ccnt+1,f
  8594  05F0                     l5050:	
  8595                           
  8596                           ;doprnt.c: 1469: }
  8597                           ;doprnt.c: 1472: prec = c;
  8598  05F0  083B               	movf	__doprnt@c,w
  8599  05F1  00B6               	movwf	__doprnt@prec
  8600                           
  8601                           ;doprnt.c: 1474: while(prec--) {
  8602  05F2  2E1F               	goto	l5064
  8603  05F3                     l5052:	
  8604                           
  8605                           ;doprnt.c: 1478: {
  8606                           ;doprnt.c: 1489: c = (val / dpowers[prec]) % 10 + '0';
  8607  05F3  300A               	movlw	10
  8608  05F4  00A9               	movwf	___lwmod@divisor
  8609  05F5  01AA               	clrf	___lwmod@divisor+1
  8610  05F6  0836               	movf	__doprnt@prec,w
  8611  05F7  2655               	fcall	PL6	;call to abstracted procedure
  8612  05F8  00A2               	movwf	___lwdiv@divisor
  8613  05F9  3F01               	moviw [1]fsr0
  8614  05FA  00A3               	movwf	___lwdiv@divisor+1
  8615  05FB  083A               	movf	__doprnt@val+1,w
  8616  05FC  00A5               	movwf	___lwdiv@dividend+1
  8617  05FD  0839               	movf	__doprnt@val,w
  8618  05FE  00A4               	movwf	___lwdiv@dividend
  8619  05FF  3183  2381  3185   	fcall	___lwdiv
  8620  0602  0823               	movf	?___lwdiv+1,w
  8621  0603  00AC               	movwf	___lwmod@dividend+1
  8622  0604  0822               	movf	?___lwdiv,w
  8623  0605  00AB               	movwf	___lwmod@dividend
  8624  0606  2628  3185         	fcall	___lwmod
  8625  0608  0829               	movf	?___lwmod,w
  8626  0609  3E30               	addlw	48
  8627  060A  00BB               	movwf	__doprnt@c
  8628                           
  8629                           ;doprnt.c: 1523: }
  8630                           ;doprnt.c: 1524: if(pb->func) (pb->func(c)),(++ccnt); else ((*pb->ptr++ = c),(++ccnt));
  8631  060B  2669  3185         	fcall	PL24	;call to abstracted procedure
  8632  060D  1903               	btfsc	3,2
  8633  060E  2E17               	goto	l5060
  8634  060F  083B               	movf	__doprnt@c,w
  8635  0610  2675               	fcall	PL28	;call to abstracted procedure
  8636  0611  008A               	movwf	10
  8637  0612  3F40               	moviw [0]fsr1
  8638  0613  000A               	callw
  8639  0614  3185               	pagesel	$
  8640  0615  0140               	movlb	0	; select bank0
  8641  0616  2E1C               	goto	L5
  8642  0617                     l5060:	
  8643  0617  2661  3185         	fcall	PL8	;call to abstracted procedure
  8644  0619  083B               	movf	__doprnt@c,w
  8645  061A  266F  3185         	fcall	PL26	;call to abstracted procedure
  8646  061C                     L5:	
  8647  061C  0AB7               	incf	__doprnt@ccnt,f
  8648  061D  1903               	skipnz
  8649  061E  0AB8               	incf	__doprnt@ccnt+1,f
  8650  061F                     l5064:	
  8651  061F  03B6               	decf	__doprnt@prec,f
  8652  0620  0F36               	incfsz	__doprnt@prec,w
  8653  0621  2DF3               	goto	l5052
  8654  0622  2D84               	goto	l5066
  8655  0623                     l5068:	
  8656                           
  8657                           ;doprnt.c: 1540: return ccnt;
  8658  0623  0838               	movf	__doprnt@ccnt+1,w
  8659  0624  00AF               	movwf	?__doprnt+1
  8660  0625  0837               	movf	__doprnt@ccnt,w
  8661  0626  00AE               	movwf	?__doprnt
  8662  0627  0008               	return
  8663  0628                     __end_of__doprnt:	
  8664  0628                     __ptext9:	
  8665 ;; *************** function ___lwmod *****************
  8666 ;; Defined at:
  8667 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.44\sources\common\lwmod.c"
  8668 ;; Parameters:    Size  Location     Type
  8669 ;;  divisor         2    9[BANK0 ] unsigned int 
  8670 ;;  dividend        2   11[BANK0 ] unsigned int 
  8671 ;; Auto vars:     Size  Location     Type
  8672 ;;  counter         1   13[BANK0 ] unsigned char 
  8673 ;; Return value:  Size  Location     Type
  8674 ;;                  2    9[BANK0 ] unsigned int 
  8675 ;; Registers used:
  8676 ;;		wreg, status,2, status,0
  8677 ;; Tracked objects:
  8678 ;;		On entry : 3F/0
  8679 ;;		On exit  : 3F/0
  8680 ;;		Unchanged: 0/0
  8681 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8682 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8683 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8684 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8685 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8686 ;;Total ram usage:        5 bytes
  8687 ;; Hardware stack levels used:    1
  8688 ;; Hardware stack levels required when called:    5
  8689 ;; This function calls:
  8690 ;;		Nothing
  8691 ;; This function is called by:
  8692 ;;		__doprnt
  8693 ;; This function uses a non-reentrant model
  8694 ;;
  8695                           
  8696                           
  8697                           ;psect for function ___lwmod
  8698  0628                     ___lwmod:	
  8699                           
  8700                           ;incstack = 0
  8701                           ; Regs used in ___lwmod: [wreg+status,2+status,0]
  8702  0628  0829               	movf	___lwmod@divisor,w
  8703  0629  042A               	iorwf	___lwmod@divisor+1,w
  8704  062A  1903               	btfsc	3,2
  8705  062B  2E43               	goto	l3692
  8706  062C  01AD               	clrf	___lwmod@counter
  8707  062D                     L6:	
  8708  062D  0AAD               	incf	___lwmod@counter,f
  8709  062E  1BAA               	btfsc	___lwmod@divisor+1,7
  8710  062F  2E33               	goto	l3684
  8711  0630  35A9               	lslf	___lwmod@divisor,f
  8712  0631  0DAA               	rlf	___lwmod@divisor+1,f
  8713  0632  2E2D               	goto	L6
  8714  0633                     l3684:	
  8715  0633  082A               	movf	___lwmod@divisor+1,w
  8716  0634  022C               	subwf	___lwmod@dividend+1,w
  8717  0635  1D03               	skipz
  8718  0636  2E39               	goto	u3715
  8719  0637  0829               	movf	___lwmod@divisor,w
  8720  0638  022B               	subwf	___lwmod@dividend,w
  8721  0639                     u3715:	
  8722  0639  1C03               	skipc
  8723  063A  2E3F               	goto	l3688
  8724  063B  0829               	movf	___lwmod@divisor,w
  8725  063C  02AB               	subwf	___lwmod@dividend,f
  8726  063D  082A               	movf	___lwmod@divisor+1,w
  8727  063E  3BAC               	subwfb	___lwmod@dividend+1,f
  8728  063F                     l3688:	
  8729  063F  36AA               	lsrf	___lwmod@divisor+1,f
  8730  0640  0CA9               	rrf	___lwmod@divisor,f
  8731  0641  0BAD               	decfsz	___lwmod@counter,f
  8732  0642  2E33               	goto	l3684
  8733  0643                     l3692:	
  8734  0643  082C               	movf	___lwmod@dividend+1,w
  8735  0644  00AA               	movwf	?___lwmod+1
  8736  0645  082B               	movf	___lwmod@dividend,w
  8737  0646  00A9               	movwf	?___lwmod
  8738  0647  0008               	return
  8739  0648                     __end_of___lwmod:	
  8740  0648                     PL4:	
  8741  0648  082F               	movf	__doprnt@f+1,w
  8742  0649  00B2               	movwf	??__doprnt+1
  8743  064A  082E               	movf	__doprnt@f,w
  8744  064B  00B1               	movwf	??__doprnt
  8745  064C  0AAE               	incf	__doprnt@f,f
  8746  064D  1903               	skipnz
  8747  064E  0AAF               	incf	__doprnt@f+1,f
  8748  064F  0084               	movwf	4
  8749  0650  0832               	movf	??__doprnt+1,w
  8750  0651  0085               	movwf	5
  8751  0652  0800               	movf	0,w	;code access
  8752  0653  00BB               	movwf	__doprnt@c
  8753  0654  0008               	return
  8754  0655                     __end_ofPL4:	
  8755  0655                     PL6:	
  8756  0655  00B1               	movwf	??__doprnt
  8757  0656  3066               	movlw	low (_dpowers| (0+32768))
  8758  0657  01B2               	clrf	??__doprnt+1
  8759  0658  35B1               	lslf	??__doprnt,f
  8760  0659  0DB2               	rlf	??__doprnt+1,f
  8761  065A  0731               	addwf	??__doprnt,w
  8762  065B  0084               	movwf	4
  8763  065C  3090               	movlw	high (_dpowers| (0+32768))
  8764  065D  3D32               	addwfc	??__doprnt+1,w
  8765  065E  0085               	movwf	5
  8766  065F  3F00               	moviw [0]fsr0
  8767  0660  0008               	return
  8768  0661                     __end_ofPL6:	
  8769  0661                     PL8:	
  8770  0661  083C               	movf	__doprnt@pb,w
  8771  0662  0086               	movwf	6
  8772  0663  0187               	clrf	7
  8773  0664  0801               	movf	1,w
  8774  0665  0086               	movwf	6
  8775  0666  3001               	movlw	1	; select bank2/3
  8776  0667  0087               	movwf	7
  8777  0668  0008               	return
  8778  0669                     __end_ofPL8:	
  8779  0669                     PL24:	
  8780  0669  0A3C               	incf	__doprnt@pb,w
  8781  066A  0086               	movwf	6
  8782  066B  0187               	clrf	7
  8783  066C  0016               	moviw fsr1++
  8784  066D  0401               	iorwf	1,w
  8785  066E  0008               	return
  8786  066F                     __end_ofPL24:	
  8787  066F                     PL26:	
  8788  066F  0081               	movwf	1
  8789  0670  083C               	movf	__doprnt@pb,w
  8790  0671  0086               	movwf	6
  8791  0672  0187               	clrf	7
  8792  0673  0A81               	incf	1,f
  8793  0674  0008               	return
  8794  0675                     __end_ofPL26:	
  8795  0675                     PL28:	
  8796  0675  00A3               	movwf	putch@txData
  8797  0676  0A3C               	incf	__doprnt@pb,w
  8798  0677  0086               	movwf	6
  8799  0678  0187               	clrf	7
  8800  0679  3F41               	moviw [1]fsr1
  8801  067A  0008               	return
  8802  067B                     __end_ofPL28:	
  8803                           
  8804                           	psect	text7
  8805  0E9E                     __ptext7:	
  8806 ;; *************** function _putch *****************
  8807 ;; Defined at:
  8808 ;;		line 176 in file "mcc_generated_files/eusart1.c"
  8809 ;; Parameters:    Size  Location     Type
  8810 ;;  txData          1    3[BANK0 ] unsigned char 
  8811 ;; Auto vars:     Size  Location     Type
  8812 ;;		None
  8813 ;; Return value:  Size  Location     Type
  8814 ;;                  1    wreg      void 
  8815 ;; Registers used:
  8816 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  8817 ;; Tracked objects:
  8818 ;;		On entry : 3F/0
  8819 ;;		On exit  : 3F/E
  8820 ;;		Unchanged: 0/0
  8821 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8822 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8823 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8824 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8825 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8826 ;;Total ram usage:        1 bytes
  8827 ;; Hardware stack levels used:    1
  8828 ;; Hardware stack levels required when called:    6
  8829 ;; This function calls:
  8830 ;;		_EUSART1_Write
  8831 ;; This function is called by:
  8832 ;;		_printf
  8833 ;;		__doprnt
  8834 ;; This function uses a non-reentrant model
  8835 ;;
  8836                           
  8837                           
  8838                           ;psect for function _putch
  8839  0E9E                     _putch:	
  8840                           
  8841                           ;eusart1.c: 178: EUSART1_Write(txData);
  8842                           
  8843                           ;incstack = 0
  8844                           ; Regs used in _putch: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  8845  0E9E  0823               	movf	putch@txData,w
  8846  0E9F  2EA0               	ljmp	_EUSART1_Write
  8847  0EA0                     __end_of_putch:	
  8848  0EA0                     __ptext8:	
  8849 ;; *************** function _EUSART1_Write *****************
  8850 ;; Defined at:
  8851 ;;		line 148 in file "mcc_generated_files/eusart1.c"
  8852 ;; Parameters:    Size  Location     Type
  8853 ;;  txData          1    wreg     unsigned char 
  8854 ;; Auto vars:     Size  Location     Type
  8855 ;;  txData          1    2[BANK0 ] unsigned char 
  8856 ;; Return value:  Size  Location     Type
  8857 ;;                  1    wreg      void 
  8858 ;; Registers used:
  8859 ;;		wreg, fsr1l, fsr1h, status,2, status,0
  8860 ;; Tracked objects:
  8861 ;;		On entry : 3F/0
  8862 ;;		On exit  : 3F/E
  8863 ;;		Unchanged: 0/0
  8864 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8865 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8866 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8867 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8868 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8869 ;;Total ram usage:        1 bytes
  8870 ;; Hardware stack levels used:    1
  8871 ;; Hardware stack levels required when called:    5
  8872 ;; This function calls:
  8873 ;;		Nothing
  8874 ;; This function is called by:
  8875 ;;		_putch
  8876 ;; This function uses a non-reentrant model
  8877 ;;
  8878                           
  8879                           
  8880                           ;psect for function _EUSART1_Write
  8881  0EA0                     _EUSART1_Write:	
  8882                           
  8883                           ;incstack = 0
  8884                           ; Regs used in _EUSART1_Write: [wreg+fsr1l+fsr1h+status,2+status,0]
  8885                           ;EUSART1_Write@txData stored from wreg
  8886  0EA0  00A2               	movwf	EUSART1_Write@txData
  8887  0EA1                     l3530:	
  8888                           ;eusart1.c: 150: while(0 == eusart1TxBufferRemaining)
  8889                           
  8890  0EA1  0141               	movlb	1	; select bank1
  8891  0EA2  0864               	movf	_eusart1TxBufferRemaining^(0+128),w	;volatile
  8892  0EA3  1903               	btfsc	3,2
  8893  0EA4  2EA1               	goto	l3530
  8894                           
  8895                           ;eusart1.c: 152: }
  8896                           ;eusart1.c: 154: if(0 == PIE3bits.TX1IE)
  8897  0EA5  014E               	movlb	14	; select bank14
  8898  0EA6  1A19               	btfsc	25,4	;volatile
  8899  0EA7  2EAD               	goto	l137
  8900                           
  8901                           ;eusart1.c: 155: {
  8902                           ;eusart1.c: 156: TX1REG = txData;
  8903  0EA8  0140               	movlb	0	; select bank0
  8904  0EA9  0822               	movf	EUSART1_Write@txData,w
  8905  0EAA  0142               	movlb	2	; select bank2
  8906  0EAB  009A               	movwf	26	;volatile
  8907                           
  8908                           ;eusart1.c: 157: }
  8909  0EAC  2EBC               	goto	l3544
  8910  0EAD                     l137:	
  8911                           
  8912                           ;eusart1.c: 158: else
  8913                           ;eusart1.c: 159: {
  8914                           ;eusart1.c: 160: PIE3bits.TX1IE = 0;
  8915  0EAD  1219               	bcf	25,4	;volatile
  8916                           
  8917                           ;eusart1.c: 161: eusart1TxBuffer[eusart1TxHead++] = txData;
  8918  0EAE  087D               	movf	_eusart1TxHead,w
  8919  0EAF  3EC2               	addlw	(low (_eusart1TxBuffer| 0))& (0+255)
  8920  0EB0  0086               	movwf	6
  8921  0EB1  0187               	clrf	7
  8922  0EB2  0140               	movlb	0	; select bank0
  8923  0EB3  0822               	movf	EUSART1_Write@txData,w
  8924  0EB4  0081               	movwf	1
  8925  0EB5  0AFD               	incf	_eusart1TxHead,f	;volatile
  8926                           
  8927                           ;eusart1.c: 162: if(sizeof(eusart1TxBuffer) <= eusart1TxHead)
  8928  0EB6  3008               	movlw	8
  8929  0EB7  027D               	subwf	_eusart1TxHead,w
  8930  0EB8  1803               	btfsc	3,0
  8931                           
  8932                           ;eusart1.c: 163: {
  8933                           ;eusart1.c: 164: eusart1TxHead = 0;
  8934  0EB9  01FD               	clrf	_eusart1TxHead	;volatile
  8935                           
  8936                           ;eusart1.c: 165: }
  8937                           ;eusart1.c: 166: eusart1TxBufferRemaining--;
  8938  0EBA  0141               	movlb	1	; select bank1
  8939  0EBB  03E4               	decf	_eusart1TxBufferRemaining^(0+128),f	;volatile
  8940  0EBC                     l3544:	
  8941                           
  8942                           ;eusart1.c: 167: }
  8943                           ;eusart1.c: 168: PIE3bits.TX1IE = 1;
  8944  0EBC  014E               	movlb	14	; select bank14
  8945  0EBD  1619               	bsf	25,4	;volatile
  8946  0EBE  0008               	return
  8947  0EBF                     __end_of_EUSART1_Write:	
  8948                           
  8949                           	psect	text10
  8950  0E36                     __ptext10:	
  8951 ;; *************** function _memset *****************
  8952 ;; Defined at:
  8953 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.44\sources\common\memset.c"
  8954 ;; Parameters:    Size  Location     Type
  8955 ;;  p1              1    wreg     PTR void 
  8956 ;;		 -> main@send_data(10), 
  8957 ;;  c               2    2[BANK0 ] int 
  8958 ;;  n               2    4[BANK0 ] unsigned int 
  8959 ;; Auto vars:     Size  Location     Type
  8960 ;;  p1              1    6[BANK0 ] PTR void 
  8961 ;;		 -> main@send_data(10), 
  8962 ;;  p               1    7[BANK0 ] PTR unsigned char 
  8963 ;;		 -> main@send_data(10), 
  8964 ;; Return value:  Size  Location     Type
  8965 ;;                  1    wreg      PTR void 
  8966 ;; Registers used:
  8967 ;;		wreg, fsr1l, fsr1h, status,2, status,0
  8968 ;; Tracked objects:
  8969 ;;		On entry : 3F/0
  8970 ;;		On exit  : 3F/0
  8971 ;;		Unchanged: 0/0
  8972 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8973 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8974 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8975 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8976 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8977 ;;Total ram usage:        6 bytes
  8978 ;; Hardware stack levels used:    1
  8979 ;; Hardware stack levels required when called:    5
  8980 ;; This function calls:
  8981 ;;		Nothing
  8982 ;; This function is called by:
  8983 ;;		_main
  8984 ;; This function uses a non-reentrant model
  8985 ;;
  8986                           
  8987                           
  8988                           ;psect for function _memset
  8989  0E36                     _memset:	
  8990                           
  8991                           ;incstack = 0
  8992                           ; Regs used in _memset: [wreg+fsr1l+fsr1h+status,2+status,0]
  8993                           ;memset@p1 stored from wreg
  8994  0E36  00A6               	movwf	memset@p1
  8995  0E37  00A7               	movwf	memset@p
  8996  0E38                     l4124:	
  8997  0E38  3001               	movlw	1
  8998  0E39  02A4               	subwf	memset@n,f
  8999  0E3A  3000               	movlw	0
  9000  0E3B  3BA5               	subwfb	memset@n+1,f
  9001  0E3C  0F24               	incfsz	memset@n,w
  9002  0E3D  2E41               	goto	l4120
  9003  0E3E  0A25               	incf	memset@n+1,w
  9004  0E3F  1903               	btfsc	3,2
  9005  0E40  0008               	return
  9006  0E41                     l4120:	
  9007  0E41  0827               	movf	memset@p,w
  9008  0E42  0086               	movwf	6
  9009  0E43  3001               	movlw	1	; select bank2/3
  9010  0E44  0087               	movwf	7
  9011  0E45  0822               	movf	memset@c,w
  9012  0E46  0081               	movwf	1
  9013  0E47  0AA7               	incf	memset@p,f
  9014  0E48  2E38               	goto	l4124
  9015  0E49                     __end_of_memset:	
  9016                           
  9017                           	psect	text22
  9018  076B                     __ptext22:	
  9019 ;; *************** function ___xxtofl *****************
  9020 ;; Defined at:
  9021 ;;		line 10 in file "C:\Program Files (x86)\Microchip\xc8\v1.44\sources\common\xxtofl.c"
  9022 ;; Parameters:    Size  Location     Type
  9023 ;;  sign            1    wreg     unsigned char 
  9024 ;;  val             4    9[BANK0 ] long 
  9025 ;; Auto vars:     Size  Location     Type
  9026 ;;  sign            1   17[BANK0 ] unsigned char 
  9027 ;;  arg             4   19[BANK0 ] unsigned long 
  9028 ;;  exp             1   18[BANK0 ] unsigned char 
  9029 ;; Return value:  Size  Location     Type
  9030 ;;                  4    9[BANK0 ] unsigned char 
  9031 ;; Registers used:
  9032 ;;		wreg, status,2, status,0
  9033 ;; Tracked objects:
  9034 ;;		On entry : 3F/0
  9035 ;;		On exit  : 3F/0
  9036 ;;		Unchanged: 0/0
  9037 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9038 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9039 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9040 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9041 ;;      Totals:         0      14       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9042 ;;Total ram usage:       14 bytes
  9043 ;; Hardware stack levels used:    1
  9044 ;; Hardware stack levels required when called:    5
  9045 ;; This function calls:
  9046 ;;		Nothing
  9047 ;; This function is called by:
  9048 ;;		_get_moving_average
  9049 ;; This function uses a non-reentrant model
  9050 ;;
  9051                           
  9052                           
  9053                           ;psect for function ___xxtofl
  9054  076B                     ___xxtofl:	
  9055                           
  9056                           ;incstack = 0
  9057                           ; Regs used in ___xxtofl: [wreg+status,2+status,0]
  9058                           ;___xxtofl@sign stored from wreg
  9059  076B  00B1               	movwf	___xxtofl@sign
  9060  076C  0831               	movf	___xxtofl@sign,w
  9061  076D  1D03               	btfss	3,2
  9062  076E  1FAC               	btfss	___xxtofl@val+3,7
  9063  076F  2F80               	goto	l3974
  9064  0770  0929               	comf	___xxtofl@val,w
  9065  0771  00B3               	movwf	___xxtofl@arg
  9066  0772  092A               	comf	___xxtofl@val+1,w
  9067  0773  00B4               	movwf	___xxtofl@arg+1
  9068  0774  092B               	comf	___xxtofl@val+2,w
  9069  0775  00B5               	movwf	___xxtofl@arg+2
  9070  0776  092C               	comf	___xxtofl@val+3,w
  9071  0777  00B6               	movwf	___xxtofl@arg+3
  9072  0778  0AB3               	incf	___xxtofl@arg,f
  9073  0779  1903               	skipnz
  9074  077A  0AB4               	incf	___xxtofl@arg+1,f
  9075  077B  1903               	skipnz
  9076  077C  0AB5               	incf	___xxtofl@arg+2,f
  9077  077D  1903               	skipnz
  9078  077E  0AB6               	incf	___xxtofl@arg+3,f
  9079  077F  2F88               	goto	l1193
  9080  0780                     l3974:	
  9081  0780  082C               	movf	___xxtofl@val+3,w
  9082  0781  00B6               	movwf	___xxtofl@arg+3
  9083  0782  082B               	movf	___xxtofl@val+2,w
  9084  0783  00B5               	movwf	___xxtofl@arg+2
  9085  0784  082A               	movf	___xxtofl@val+1,w
  9086  0785  00B4               	movwf	___xxtofl@arg+1
  9087  0786  0829               	movf	___xxtofl@val,w
  9088  0787  00B3               	movwf	___xxtofl@arg
  9089  0788                     l1193:	
  9090  0788  082C               	movf	___xxtofl@val+3,w
  9091  0789  042B               	iorwf	___xxtofl@val+2,w
  9092  078A  042A               	iorwf	___xxtofl@val+1,w
  9093  078B  0429               	iorwf	___xxtofl@val,w
  9094  078C  1D03               	skipz
  9095  078D  2F93               	goto	l3978
  9096  078E  01A9               	clrf	?___xxtofl
  9097  078F  01AA               	clrf	?___xxtofl+1
  9098  0790  01AB               	clrf	?___xxtofl+2
  9099  0791  01AC               	clrf	?___xxtofl+3
  9100  0792  0008               	return
  9101  0793                     l3978:	
  9102  0793  3096               	movlw	150
  9103  0794  00B2               	movwf	___xxtofl@exp
  9104  0795                     l3982:	
  9105  0795  30FE               	movlw	254
  9106  0796  0536               	andwf	___xxtofl@arg+3,w
  9107  0797  1903               	btfsc	3,2
  9108  0798  2FA6               	goto	l3990
  9109  0799  0AB2               	incf	___xxtofl@exp,f
  9110  079A  27DB  3187         	fcall	PL40	;call to abstracted procedure
  9111  079C  2F95               	goto	l3982
  9112  079D                     l3984:	
  9113  079D  3001               	movlw	1
  9114  079E  0AB2               	incf	___xxtofl@exp,f
  9115  079F  07B3               	addwf	___xxtofl@arg,f
  9116  07A0  3000               	movlw	0
  9117  07A1  3DB4               	addwfc	___xxtofl@arg+1,f
  9118  07A2  3DB5               	addwfc	___xxtofl@arg+2,f
  9119  07A3  3DB6               	addwfc	___xxtofl@arg+3,f
  9120  07A4  27DB  3187         	fcall	PL40	;call to abstracted procedure
  9121  07A6                     l3990:	
  9122  07A6  30FF               	movlw	255
  9123  07A7  0536               	andwf	___xxtofl@arg+3,w
  9124  07A8  1903               	btfsc	3,2
  9125  07A9  2FB4               	goto	l3994
  9126  07AA  2F9D               	goto	l3984
  9127  07AB                     l3996:	
  9128  07AB  3002               	movlw	2
  9129  07AC  0232               	subwf	___xxtofl@exp,w
  9130  07AD  1C03               	btfss	3,0
  9131  07AE  2FB6               	goto	l1206
  9132  07AF  03B2               	decf	___xxtofl@exp,f
  9133  07B0  35B3               	lslf	___xxtofl@arg,f
  9134  07B1  0DB4               	rlf	___xxtofl@arg+1,f
  9135  07B2  0DB5               	rlf	___xxtofl@arg+2,f
  9136  07B3  0DB6               	rlf	___xxtofl@arg+3,f
  9137  07B4                     l3994:	
  9138  07B4  1FB5               	btfss	___xxtofl@arg+2,7
  9139  07B5  2FAB               	goto	l3996
  9140  07B6                     l1206:	
  9141  07B6  1832               	btfsc	___xxtofl@exp,0
  9142  07B7  2FBF               	goto	l4000
  9143  07B8  30FF               	movlw	255
  9144  07B9  05B3               	andwf	___xxtofl@arg,f
  9145  07BA  05B4               	andwf	___xxtofl@arg+1,f
  9146  07BB  307F               	movlw	127
  9147  07BC  05B5               	andwf	___xxtofl@arg+2,f
  9148  07BD  30FF               	movlw	255
  9149  07BE  05B6               	andwf	___xxtofl@arg+3,f
  9150  07BF                     l4000:	
  9151  07BF  36B2               	lsrf	___xxtofl@exp,f
  9152  07C0  0832               	movf	___xxtofl@exp,w
  9153  07C1  00B0               	movwf	??___xxtofl+3
  9154  07C2  01AF               	clrf	??___xxtofl+2
  9155  07C3  01AE               	clrf	??___xxtofl+1
  9156  07C4  01AD               	clrf	??___xxtofl
  9157  07C5  082D               	movf	??___xxtofl,w
  9158  07C6  04B3               	iorwf	___xxtofl@arg,f
  9159  07C7  082E               	movf	??___xxtofl+1,w
  9160  07C8  04B4               	iorwf	___xxtofl@arg+1,f
  9161  07C9  082F               	movf	??___xxtofl+2,w
  9162  07CA  04B5               	iorwf	___xxtofl@arg+2,f
  9163  07CB  0830               	movf	??___xxtofl+3,w
  9164  07CC  04B6               	iorwf	___xxtofl@arg+3,f
  9165  07CD  0831               	movf	___xxtofl@sign,w
  9166  07CE  1D03               	btfss	3,2
  9167  07CF  1FAC               	btfss	___xxtofl@val+3,7
  9168  07D0  2FD2               	goto	l4008
  9169  07D1  17B6               	bsf	___xxtofl@arg+3,7
  9170  07D2                     l4008:	
  9171  07D2  0836               	movf	___xxtofl@arg+3,w
  9172  07D3  00AC               	movwf	?___xxtofl+3
  9173  07D4  0835               	movf	___xxtofl@arg+2,w
  9174  07D5  00AB               	movwf	?___xxtofl+2
  9175  07D6  0834               	movf	___xxtofl@arg+1,w
  9176  07D7  00AA               	movwf	?___xxtofl+1
  9177  07D8  0833               	movf	___xxtofl@arg,w
  9178  07D9  00A9               	movwf	?___xxtofl
  9179  07DA  0008               	return
  9180  07DB                     __end_of___xxtofl:	
  9181  07DB                     PL40:	
  9182  07DB  36B6               	lsrf	___xxtofl@arg+3,f
  9183  07DC  0CB5               	rrf	___xxtofl@arg+2,f
  9184  07DD  0CB4               	rrf	___xxtofl@arg+1,f
  9185  07DE  0CB3               	rrf	___xxtofl@arg,f
  9186  07DF  0008               	return
  9187  07E0                     __end_ofPL40:	
  9188                           
  9189                           	psect	text26
  9190  0436                     __ptext26:	
  9191 ;; *************** function ___fladd *****************
  9192 ;; Defined at:
  9193 ;;		line 10 in file "C:\Program Files (x86)\Microchip\xc8\v1.44\sources\common\sprcadd.c"
  9194 ;; Parameters:    Size  Location     Type
  9195 ;;  b               4    2[BANK0 ] long 
  9196 ;;  a               4    6[BANK0 ] long 
  9197 ;; Auto vars:     Size  Location     Type
  9198 ;;  grs             1   21[BANK0 ] unsigned char 
  9199 ;;  bexp            1   20[BANK0 ] unsigned char 
  9200 ;;  aexp            1   19[BANK0 ] unsigned char 
  9201 ;;  signs           1   18[BANK0 ] unsigned char 
  9202 ;; Return value:  Size  Location     Type
  9203 ;;                  4    2[BANK0 ] unsigned char 
  9204 ;; Registers used:
  9205 ;;		wreg, status,2, status,0
  9206 ;; Tracked objects:
  9207 ;;		On entry : 3F/0
  9208 ;;		On exit  : 3F/0
  9209 ;;		Unchanged: 0/0
  9210 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9211 ;;      Params:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9212 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9213 ;;      Temps:          0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9214 ;;      Totals:         0      20       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9215 ;;Total ram usage:       20 bytes
  9216 ;; Hardware stack levels used:    1
  9217 ;; Hardware stack levels required when called:    5
  9218 ;; This function calls:
  9219 ;;		Nothing
  9220 ;; This function is called by:
  9221 ;;		_main
  9222 ;; This function uses a non-reentrant model
  9223 ;;
  9224                           
  9225                           
  9226                           ;psect for function ___fladd
  9227  0436                     ___fladd:	
  9228                           
  9229                           ;incstack = 0
  9230                           ; Regs used in ___fladd: [wreg+status,2+status,0]
  9231  0436  0825               	movf	___fladd@b+3,w
  9232  0437  00B2               	movwf	___fladd@signs
  9233  0438  3080               	movlw	128
  9234  0439  05B2               	andwf	___fladd@signs,f
  9235  043A  3525               	lslf	___fladd@b+3,w
  9236  043B  00B4               	movwf	___fladd@bexp
  9237  043C  1BA4               	btfsc	___fladd@b+2,7
  9238  043D  1434               	bsf	___fladd@bexp,0
  9239  043E  0834               	movf	___fladd@bexp,w
  9240  043F  1903               	btfsc	3,2
  9241  0440  2C49               	goto	l1064
  9242  0441  0F34               	incfsz	___fladd@bexp,w
  9243  0442  2C47               	goto	l1065
  9244  0443  01A2               	clrf	___fladd@b
  9245  0444  01A3               	clrf	___fladd@b+1
  9246  0445  01A4               	clrf	___fladd@b+2
  9247  0446  01A5               	clrf	___fladd@b+3
  9248  0447                     l1065:	
  9249  0447  17A4               	bsf	___fladd@b+2,7
  9250  0448  2C4C               	goto	L10
  9251  0449                     l1064:	
  9252  0449  01A2               	clrf	___fladd@b
  9253  044A  01A3               	clrf	___fladd@b+1
  9254  044B  01A4               	clrf	___fladd@b+2
  9255  044C                     L10:	
  9256  044C  01A5               	clrf	___fladd@b+3
  9257  044D  0829               	movf	___fladd@a+3,w
  9258  044E  00B3               	movwf	___fladd@aexp
  9259  044F  3080               	movlw	128
  9260  0450  05B3               	andwf	___fladd@aexp,f
  9261  0451  0833               	movf	___fladd@aexp,w
  9262  0452  0632               	xorwf	___fladd@signs,w
  9263  0453  1D03               	btfss	3,2
  9264  0454  1732               	bsf	___fladd@signs,6
  9265  0455  3529               	lslf	___fladd@a+3,w
  9266  0456  00B3               	movwf	___fladd@aexp
  9267  0457  1BA8               	btfsc	___fladd@a+2,7
  9268  0458  1433               	bsf	___fladd@aexp,0
  9269  0459  0833               	movf	___fladd@aexp,w
  9270  045A  1903               	btfsc	3,2
  9271  045B  2C64               	goto	l1069
  9272  045C  0F33               	incfsz	___fladd@aexp,w
  9273  045D  2C62               	goto	l1070
  9274  045E  01A6               	clrf	___fladd@a
  9275  045F  01A7               	clrf	___fladd@a+1
  9276  0460  01A8               	clrf	___fladd@a+2
  9277  0461  01A9               	clrf	___fladd@a+3
  9278  0462                     l1070:	
  9279  0462  17A8               	bsf	___fladd@a+2,7
  9280  0463  2C67               	goto	L11
  9281  0464                     l1069:	
  9282  0464  01A6               	clrf	___fladd@a
  9283  0465  01A7               	clrf	___fladd@a+1
  9284  0466  01A8               	clrf	___fladd@a+2
  9285  0467                     L11:	
  9286  0467  01A9               	clrf	___fladd@a+3
  9287  0468  0834               	movf	___fladd@bexp,w
  9288  0469  0233               	subwf	___fladd@aexp,w
  9289  046A  1803               	skipnc
  9290  046B  2C8E               	goto	l4262
  9291  046C  1F32               	btfss	___fladd@signs,6
  9292  046D  2C70               	goto	l4232
  9293  046E  3080               	movlw	128
  9294  046F  06B2               	xorwf	___fladd@signs,f
  9295  0470                     l4232:	
  9296  0470  0834               	movf	___fladd@bexp,w
  9297  0471  00B5               	movwf	___fladd@grs
  9298  0472  0833               	movf	___fladd@aexp,w
  9299  0473  00B4               	movwf	___fladd@bexp
  9300  0474  0835               	movf	___fladd@grs,w
  9301  0475  00B3               	movwf	___fladd@aexp
  9302  0476  0822               	movf	___fladd@b,w
  9303  0477  00B5               	movwf	___fladd@grs
  9304  0478  0826               	movf	___fladd@a,w
  9305  0479  00A2               	movwf	___fladd@b
  9306  047A  0835               	movf	___fladd@grs,w
  9307  047B  00A6               	movwf	___fladd@a
  9308  047C  0823               	movf	___fladd@b+1,w
  9309  047D  00B5               	movwf	___fladd@grs
  9310  047E  0827               	movf	___fladd@a+1,w
  9311  047F  00A3               	movwf	___fladd@b+1
  9312  0480  0835               	movf	___fladd@grs,w
  9313  0481  00A7               	movwf	___fladd@a+1
  9314  0482  0824               	movf	___fladd@b+2,w
  9315  0483  00B5               	movwf	___fladd@grs
  9316  0484  0828               	movf	___fladd@a+2,w
  9317  0485  00A4               	movwf	___fladd@b+2
  9318  0486  0835               	movf	___fladd@grs,w
  9319  0487  00A8               	movwf	___fladd@a+2
  9320  0488  0825               	movf	___fladd@b+3,w
  9321  0489  00B5               	movwf	___fladd@grs
  9322  048A  0829               	movf	___fladd@a+3,w
  9323  048B  00A5               	movwf	___fladd@b+3
  9324  048C  0835               	movf	___fladd@grs,w
  9325  048D  00A9               	movwf	___fladd@a+3
  9326  048E                     l4262:	
  9327  048E  01B5               	clrf	___fladd@grs
  9328  048F  0833               	movf	___fladd@aexp,w
  9329  0490  00AA               	movwf	??___fladd
  9330  0491  01AB               	clrf	??___fladd+1
  9331  0492  082B               	movf	??___fladd+1,w
  9332  0493  00AD               	movwf	??___fladd+3
  9333  0494  0834               	movf	___fladd@bexp,w
  9334  0495  022A               	subwf	??___fladd,w
  9335  0496  00AC               	movwf	??___fladd+2
  9336  0497  1C03               	skipc
  9337  0498  03AD               	decf	??___fladd+3,f
  9338  0499  082D               	movf	??___fladd+3,w
  9339  049A  3A80               	xorlw	128
  9340  049B  00AE               	movwf	??___fladd+4
  9341  049C  3080               	movlw	128
  9342  049D  022E               	subwf	??___fladd+4,w
  9343  049E  1D03               	skipz
  9344  049F  2CA2               	goto	u4325
  9345  04A0  301A               	movlw	26
  9346  04A1  022C               	subwf	??___fladd+2,w
  9347  04A2                     u4325:	
  9348  04A2  1C03               	skipc
  9349  04A3  2CBF               	goto	l4276
  9350  04A4  0140               	movlb	0	; select bank0
  9351  04A5  0825               	movf	___fladd@b+3,w
  9352  04A6  0424               	iorwf	___fladd@b+2,w
  9353  04A7  0423               	iorwf	___fladd@b+1,w
  9354  04A8  0422               	iorwf	___fladd@b,w
  9355  04A9  1903               	btfsc	3,2
  9356  04AA  2CAD               	goto	u4330
  9357  04AB  3001               	movlw	1
  9358  04AC  2CAE               	goto	u4340
  9359  04AD                     u4330:	
  9360  04AD  3000               	movlw	0
  9361  04AE                     u4340:	
  9362  04AE  00B5               	movwf	___fladd@grs
  9363  04AF  01A2               	clrf	___fladd@b
  9364  04B0  01A3               	clrf	___fladd@b+1
  9365  04B1  01A4               	clrf	___fladd@b+2
  9366  04B2  01A5               	clrf	___fladd@b+3
  9367  04B3  0833               	movf	___fladd@aexp,w
  9368  04B4  00B4               	movwf	___fladd@bexp
  9369  04B5  2CC4               	goto	l1075
  9370  04B6                     l1077:	
  9371  04B6  1C35               	btfss	___fladd@grs,0
  9372  04B7  2CBC               	goto	l1078
  9373  04B8  3635               	lsrf	___fladd@grs,w
  9374  04B9  3801               	iorlw	1
  9375  04BA  00B5               	movwf	___fladd@grs
  9376  04BB  2CBD               	goto	l1079
  9377  04BC                     l1078:	
  9378  04BC  36B5               	lsrf	___fladd@grs,f
  9379  04BD                     l1079:	
  9380  04BD  256D  3184         	fcall	PL18	;call to abstracted procedure
  9381  04BF                     l4276:	
  9382  04BF  0140               	movlb	0	; select bank0
  9383  04C0  0833               	movf	___fladd@aexp,w
  9384  04C1  0234               	subwf	___fladd@bexp,w
  9385  04C2  1C03               	skipc
  9386  04C3  2CB6               	goto	l1077
  9387  04C4                     l1075:	
  9388  04C4  1B32               	btfsc	___fladd@signs,6
  9389  04C5  2CDF               	goto	l4294
  9390  04C6  0834               	movf	___fladd@bexp,w
  9391  04C7  1D03               	btfss	3,2
  9392  04C8  2CCA               	goto	l4282
  9393  04C9  2D7C               	ljmp	PL38	;call to abstracted procedure
  9394  04CA                     l4282:	
  9395  04CA  0826               	movf	___fladd@a,w
  9396  04CB  07A2               	addwf	___fladd@b,f
  9397  04CC  0827               	movf	___fladd@a+1,w
  9398  04CD  3DA3               	addwfc	___fladd@b+1,f
  9399  04CE  0828               	movf	___fladd@a+2,w
  9400  04CF  3DA4               	addwfc	___fladd@b+2,f
  9401  04D0  0829               	movf	___fladd@a+3,w
  9402  04D1  3DA5               	addwfc	___fladd@b+3,f
  9403  04D2  1C25               	btfss	___fladd@b+3,0
  9404  04D3  2D3F               	goto	l4324
  9405  04D4  1C35               	btfss	___fladd@grs,0
  9406  04D5  2CDB               	goto	l1086
  9407  04D6  36B5               	lsrf	___fladd@grs,f
  9408  04D7  0835               	movf	___fladd@grs,w
  9409  04D8  3801               	iorlw	1
  9410  04D9  00B5               	movwf	___fladd@grs
  9411  04DA  2CDC               	goto	l1087
  9412  04DB                     l1086:	
  9413  04DB  36B5               	lsrf	___fladd@grs,f
  9414  04DC                     l1087:	
  9415  04DC  256D  3184         	fcall	PL18	;call to abstracted procedure
  9416  04DE  2D3F               	goto	l4324
  9417  04DF                     l4294:	
  9418  04DF  0825               	movf	___fladd@b+3,w
  9419  04E0  3A80               	xorlw	128
  9420  04E1  00AA               	movwf	??___fladd
  9421  04E2  0829               	movf	___fladd@a+3,w
  9422  04E3  3A80               	xorlw	128
  9423  04E4  022A               	subwf	??___fladd,w
  9424  04E5  1D03               	skipz
  9425  04E6  2CF1               	goto	u4433
  9426  04E7  0828               	movf	___fladd@a+2,w
  9427  04E8  0224               	subwf	___fladd@b+2,w
  9428  04E9  1D03               	skipz
  9429  04EA  2CF1               	goto	u4433
  9430  04EB  0827               	movf	___fladd@a+1,w
  9431  04EC  0223               	subwf	___fladd@b+1,w
  9432  04ED  1D03               	skipz
  9433  04EE  2CF1               	goto	u4433
  9434  04EF  0826               	movf	___fladd@a,w
  9435  04F0  0222               	subwf	___fladd@b,w
  9436  04F1                     u4433:	
  9437  04F1  1803               	skipnc
  9438  04F2  2D1C               	goto	l4304
  9439  04F3  30FF               	movlw	255
  9440  04F4  00AA               	movwf	??___fladd
  9441  04F5  00AB               	movwf	??___fladd+1
  9442  04F6  00AC               	movwf	??___fladd+2
  9443  04F7  00AD               	movwf	??___fladd+3
  9444  04F8  0822               	movf	___fladd@b,w
  9445  04F9  0226               	subwf	___fladd@a,w
  9446  04FA  00AE               	movwf	??___fladd+4
  9447  04FB  0823               	movf	___fladd@b+1,w
  9448  04FC  3B27               	subwfb	___fladd@a+1,w
  9449  04FD  00AF               	movwf	??___fladd+5
  9450  04FE  0824               	movf	___fladd@b+2,w
  9451  04FF  3B28               	subwfb	___fladd@a+2,w
  9452  0500  00B0               	movwf	??___fladd+6
  9453  0501  0825               	movf	___fladd@b+3,w
  9454  0502  3B29               	subwfb	___fladd@a+3,w
  9455  0503  00B1               	movwf	??___fladd+7
  9456  0504  082E               	movf	??___fladd+4,w
  9457  0505  07AA               	addwf	??___fladd,f
  9458  0506  082F               	movf	??___fladd+5,w
  9459  0507  3DAB               	addwfc	??___fladd+1,f
  9460  0508  0830               	movf	??___fladd+6,w
  9461  0509  3DAC               	addwfc	??___fladd+2,f
  9462  050A  0831               	movf	??___fladd+7,w
  9463  050B  3DAD               	addwfc	??___fladd+3,f
  9464  050C  082D               	movf	??___fladd+3,w
  9465  050D  00A5               	movwf	___fladd@b+3
  9466  050E  082C               	movf	??___fladd+2,w
  9467  050F  00A4               	movwf	___fladd@b+2
  9468  0510  082B               	movf	??___fladd+1,w
  9469  0511  00A3               	movwf	___fladd@b+1
  9470  0512  082A               	movf	??___fladd,w
  9471  0513  00A2               	movwf	___fladd@b
  9472  0514  3080               	movlw	128
  9473  0515  06B2               	xorwf	___fladd@signs,f
  9474  0516  09B5               	comf	___fladd@grs,f
  9475  0517  0FB5               	incfsz	___fladd@grs,f
  9476  0518  2D24               	goto	l1092
  9477  0519  2575  3184         	fcall	PL32	;call to abstracted procedure
  9478  051B  2D24               	goto	l1092
  9479  051C                     l4304:	
  9480  051C  0826               	movf	___fladd@a,w
  9481  051D  02A2               	subwf	___fladd@b,f
  9482  051E  0827               	movf	___fladd@a+1,w
  9483  051F  3BA3               	subwfb	___fladd@b+1,f
  9484  0520  0828               	movf	___fladd@a+2,w
  9485  0521  3BA4               	subwfb	___fladd@b+2,f
  9486  0522  0829               	movf	___fladd@a+3,w
  9487  0523  3BA5               	subwfb	___fladd@b+3,f
  9488  0524                     l1092:	
  9489  0524  0825               	movf	___fladd@b+3,w
  9490  0525  0424               	iorwf	___fladd@b+2,w
  9491  0526  0423               	iorwf	___fladd@b+1,w
  9492  0527  0422               	iorwf	___fladd@b,w
  9493  0528  1D03               	skipz
  9494  0529  2D3D               	goto	l4322
  9495  052A  0835               	movf	___fladd@grs,w
  9496  052B  1D03               	btfss	3,2
  9497  052C  2D3D               	goto	l4322
  9498  052D  2D7C               	ljmp	PL38	;call to abstracted procedure
  9499  052E                     l4310:	
  9500  052E  35A2               	lslf	___fladd@b,f
  9501  052F  0DA3               	rlf	___fladd@b+1,f
  9502  0530  0DA4               	rlf	___fladd@b+2,f
  9503  0531  0DA5               	rlf	___fladd@b+3,f
  9504  0532  1BB5               	btfsc	___fladd@grs,7
  9505  0533  1422               	bsf	___fladd@b,0
  9506  0534  1C35               	btfss	___fladd@grs,0
  9507  0535  2D39               	goto	l1097
  9508  0536  1403               	setc
  9509  0537  0DB5               	rlf	___fladd@grs,f
  9510  0538  2D3A               	goto	l4318
  9511  0539                     l1097:	
  9512  0539  35B5               	lslf	___fladd@grs,f
  9513  053A                     l4318:	
  9514  053A  0834               	movf	___fladd@bexp,w
  9515  053B  1D03               	btfss	3,2
  9516  053C  03B4               	decf	___fladd@bexp,f
  9517  053D                     l4322:	
  9518  053D  1FA4               	btfss	___fladd@b+2,7
  9519  053E  2D2E               	goto	l4310
  9520  053F                     l4324:	
  9521  053F  01B3               	clrf	___fladd@aexp
  9522  0540  1FB5               	btfss	___fladd@grs,7
  9523  0541  2D4A               	goto	l4334
  9524  0542  0835               	movf	___fladd@grs,w
  9525  0543  397F               	andlw	127
  9526  0544  1903               	btfsc	3,2
  9527  0545  1822               	btfsc	___fladd@b,0
  9528  0546  2D48               	goto	l4330
  9529  0547  2D4A               	goto	l4334
  9530  0548                     l4330:	
  9531  0548  01B3               	clrf	___fladd@aexp
  9532  0549  0AB3               	incf	___fladd@aexp,f
  9533  054A                     l4334:	
  9534  054A  0833               	movf	___fladd@aexp,w
  9535  054B  1903               	btfsc	3,2
  9536  054C  2D57               	goto	l4346
  9537  054D  2575  3184         	fcall	PL32	;call to abstracted procedure
  9538  054F  1C25               	btfss	___fladd@b+3,0
  9539  0550  2D57               	goto	l4346
  9540  0551  37A5               	asrf	___fladd@b+3,f
  9541  0552  0CA4               	rrf	___fladd@b+2,f
  9542  0553  0CA3               	rrf	___fladd@b+1,f
  9543  0554  0CA2               	rrf	___fladd@b,f
  9544  0555  0F34               	incfsz	___fladd@bexp,w
  9545  0556  0AB4               	incf	___fladd@bexp,f
  9546  0557                     l4346:	
  9547  0557  0A34               	incf	___fladd@bexp,w
  9548  0558  1D03               	btfss	3,2
  9549  0559  0834               	movf	___fladd@bexp,w
  9550  055A  1D03               	btfss	3,2
  9551  055B  2D63               	goto	l4354
  9552  055C  01A2               	clrf	___fladd@b
  9553  055D  01A3               	clrf	___fladd@b+1
  9554  055E  01A4               	clrf	___fladd@b+2
  9555  055F  01A5               	clrf	___fladd@b+3
  9556  0560  0834               	movf	___fladd@bexp,w
  9557  0561  1903               	btfsc	3,2
  9558  0562  01B2               	clrf	___fladd@signs
  9559  0563                     l4354:	
  9560  0563  1C34               	btfss	___fladd@bexp,0
  9561  0564  2D67               	goto	l1112
  9562  0565  17A4               	bsf	___fladd@b+2,7
  9563  0566  2D68               	goto	l4358
  9564  0567                     l1112:	
  9565  0567  13A4               	bcf	___fladd@b+2,7
  9566  0568                     l4358:	
  9567  0568  3634               	lsrf	___fladd@bexp,w
  9568  0569  00A5               	movwf	___fladd@b+3
  9569  056A  1BB2               	btfsc	___fladd@signs,7
  9570  056B  17A5               	bsf	___fladd@b+3,7
  9571  056C  0008               	return
  9572  056D                     __end_of___fladd:	
  9573  056D                     PL18:	
  9574  056D  1822               	btfsc	___fladd@b,0
  9575  056E  17B5               	bsf	___fladd@grs,7
  9576  056F  37A5               	asrf	___fladd@b+3,f
  9577  0570  0CA4               	rrf	___fladd@b+2,f
  9578  0571  0CA3               	rrf	___fladd@b+1,f
  9579  0572  0CA2               	rrf	___fladd@b,f
  9580  0573  0AB4               	incf	___fladd@bexp,f
  9581  0574  0008               	return
  9582  0575                     __end_ofPL18:	
  9583  0575                     PL32:	
  9584  0575  3001               	movlw	1
  9585  0576  07A2               	addwf	___fladd@b,f
  9586  0577  3000               	movlw	0
  9587  0578  3DA3               	addwfc	___fladd@b+1,f
  9588  0579  3DA4               	addwfc	___fladd@b+2,f
  9589  057A  3DA5               	addwfc	___fladd@b+3,f
  9590  057B  0008               	return
  9591  057C                     __end_ofPL32:	
  9592  057C                     PL38:	
  9593  057C  01A2               	clrf	?___fladd
  9594  057D  01A3               	clrf	?___fladd+1
  9595  057E  01A4               	clrf	?___fladd+2
  9596  057F  01A5               	clrf	?___fladd+3
  9597  0580  0008               	return
  9598  0581                     __end_ofPL38:	
  9599                           
  9600                           	psect	text34
  9601  0EBF                     __ptext34:	
  9602 ;; *************** function _EUSART2_Initialize *****************
  9603 ;; Defined at:
  9604 ;;		line 75 in file "mcc_generated_files/eusart2.c"
  9605 ;; Parameters:    Size  Location     Type
  9606 ;;		None
  9607 ;; Auto vars:     Size  Location     Type
  9608 ;;		None
  9609 ;; Return value:  Size  Location     Type
  9610 ;;                  1    wreg      void 
  9611 ;; Registers used:
  9612 ;;		wreg, status,2, status,0, pclath, cstack
  9613 ;; Tracked objects:
  9614 ;;		On entry : 3F/E
  9615 ;;		On exit  : 3F/E
  9616 ;;		Unchanged: 0/0
  9617 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9618 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9619 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9620 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9621 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9622 ;;Total ram usage:        0 bytes
  9623 ;; Hardware stack levels used:    1
  9624 ;; Hardware stack levels required when called:    6
  9625 ;; This function calls:
  9626 ;;		_EUSART2_SetRxInterruptHandler
  9627 ;;		_EUSART2_SetTxInterruptHandler
  9628 ;; This function is called by:
  9629 ;;		_SYSTEM_Initialize
  9630 ;; This function uses a non-reentrant model
  9631 ;;
  9632                           
  9633                           
  9634                           ;psect for function _EUSART2_Initialize
  9635  0EBF                     _EUSART2_Initialize:	
  9636  0EBF                     l3790:	
  9637                           ;incstack = 0
  9638                           ; Regs used in _EUSART2_Initialize: [wreg+status,2+status,0+pclath+cstack]
  9639                           
  9640                           
  9641                           ;eusart2.c: 78: PIE3bits.RC2IE = 0;
  9642  0EBF  1399               	bcf	25,7	;volatile
  9643                           
  9644                           ;eusart2.c: 79: EUSART2_SetRxInterruptHandler(EUSART2_Receive_ISR);
  9645  0EC0  305E               	movlw	low _EUSART2_Receive_ISR
  9646  0EC1  0140               	movlb	0	; select bank0
  9647  0EC2  00A2               	movwf	EUSART2_SetRxInterruptHandler@interruptHandler
  9648  0EC3  300E               	movlw	high _EUSART2_Receive_ISR
  9649  0EC4  00A3               	movwf	EUSART2_SetRxInterruptHandler@interruptHandler+1
  9650  0EC5  26E0  318E         	fcall	_EUSART2_SetRxInterruptHandler
  9651                           
  9652                           ;eusart2.c: 80: PIE3bits.TX2IE = 0;
  9653  0EC7  014E               	movlb	14	; select bank14
  9654  0EC8  1319               	bcf	25,6	;volatile
  9655                           
  9656                           ;eusart2.c: 81: EUSART2_SetTxInterruptHandler(EUSART2_Transmit_ISR);
  9657  0EC9  30E0               	movlw	low _EUSART2_Transmit_ISR
  9658  0ECA  0140               	movlb	0	; select bank0
  9659  0ECB  00A2               	movwf	EUSART2_SetTxInterruptHandler@interruptHandler
  9660  0ECC  3007               	movlw	high _EUSART2_Transmit_ISR
  9661  0ECD  00A3               	movwf	EUSART2_SetTxInterruptHandler@interruptHandler+1
  9662  0ECE  26E8  318E         	fcall	_EUSART2_SetTxInterruptHandler
  9663                           
  9664                           ;eusart2.c: 85: BAUD2CON = 0x08;
  9665  0ED0  3008               	movlw	8
  9666  0ED1  0154               	movlb	20	; select bank20
  9667  0ED2  009F               	movwf	31	;volatile
  9668                           
  9669                           ;eusart2.c: 88: RC2STA = 0x80;
  9670  0ED3  3080               	movlw	128
  9671                           
  9672                           ;eusart2.c: 91: TX2STA = 0x24;
  9673                           
  9674                           ;eusart2.c: 94: SP2BRGL = 0x22;
  9675                           
  9676                           ;eusart2.c: 97: SP2BRGH = 0x00;
  9677  0ED4  2722               	fcall	PL30	;call to abstracted procedure
  9678                           
  9679                           ;eusart2.c: 101: eusart2TxHead = 0;
  9680  0ED5  0141               	movlb	1	; select bank1
  9681  0ED6  01D4               	clrf	_eusart2TxHead^(0+128)	;volatile
  9682                           
  9683                           ;eusart2.c: 102: eusart2TxTail = 0;
  9684  0ED7  01D3               	clrf	_eusart2TxTail^(0+128)	;volatile
  9685                           
  9686                           ;eusart2.c: 103: eusart2TxBufferRemaining = sizeof(eusart2TxBuffer);
  9687  0ED8  3008               	movlw	8
  9688  0ED9  00E3               	movwf	_eusart2TxBufferRemaining^(0+128)	;volatile
  9689                           
  9690                           ;eusart2.c: 105: eusart2RxHead = 0;
  9691  0EDA  01D2               	clrf	_eusart2RxHead^(0+128)	;volatile
  9692                           
  9693                           ;eusart2.c: 106: eusart2RxTail = 0;
  9694  0EDB  01D1               	clrf	_eusart2RxTail^(0+128)	;volatile
  9695                           
  9696                           ;eusart2.c: 107: eusart2RxCount = 0;
  9697  0EDC  01D0               	clrf	_eusart2RxCount^(0+128)	;volatile
  9698                           
  9699                           ;eusart2.c: 110: PIE3bits.RC2IE = 1;
  9700  0EDD  014E               	movlb	14	; select bank14
  9701  0EDE  1799               	bsf	25,7	;volatile
  9702  0EDF  0008               	return
  9703  0EE0                     __end_of_EUSART2_Initialize:	
  9704  0EE0                     __ptext36:	
  9705 ;; *************** function _EUSART2_SetRxInterruptHandler *****************
  9706 ;; Defined at:
  9707 ;;		line 215 in file "mcc_generated_files/eusart2.c"
  9708 ;; Parameters:    Size  Location     Type
  9709 ;;  interruptHan    2    2[BANK0 ] PTR FTN()void 
  9710 ;;		 -> EUSART2_Receive_ISR(1), 
  9711 ;; Auto vars:     Size  Location     Type
  9712 ;;		None
  9713 ;; Return value:  Size  Location     Type
  9714 ;;                  1    wreg      void 
  9715 ;; Registers used:
  9716 ;;		wreg
  9717 ;; Tracked objects:
  9718 ;;		On entry : 3F/0
  9719 ;;		On exit  : 3F/1
  9720 ;;		Unchanged: 0/0
  9721 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9722 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9723 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9724 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9725 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9726 ;;Total ram usage:        2 bytes
  9727 ;; Hardware stack levels used:    1
  9728 ;; Hardware stack levels required when called:    5
  9729 ;; This function calls:
  9730 ;;		Nothing
  9731 ;; This function is called by:
  9732 ;;		_EUSART2_Initialize
  9733 ;; This function uses a non-reentrant model
  9734 ;;
  9735                           
  9736                           
  9737                           ;psect for function _EUSART2_SetRxInterruptHandler
  9738  0EE0                     _EUSART2_SetRxInterruptHandler:	
  9739                           
  9740                           ;eusart2.c: 216: EUSART2_RxDefaultInterruptHandler = interruptHandler;
  9741                           
  9742                           ;incstack = 0
  9743                           ; Regs used in _EUSART2_SetRxInterruptHandler: [wreg]
  9744  0EE0  0823               	movf	EUSART2_SetRxInterruptHandler@interruptHandler+1,w
  9745  0EE1  0141               	movlb	1	; select bank1
  9746  0EE2  00DC               	movwf	(_EUSART2_RxDefaultInterruptHandler+1)^(0+128)
  9747  0EE3  0140               	movlb	0	; select bank0
  9748  0EE4  0822               	movf	EUSART2_SetRxInterruptHandler@interruptHandler,w
  9749  0EE5  0141               	movlb	1	; select bank1
  9750  0EE6  00DB               	movwf	_EUSART2_RxDefaultInterruptHandler^(0+128)
  9751  0EE7  0008               	return
  9752  0EE8                     __end_of_EUSART2_SetRxInterruptHandler:	
  9753  0EE8                     __ptext35:	
  9754 ;; *************** function _EUSART2_SetTxInterruptHandler *****************
  9755 ;; Defined at:
  9756 ;;		line 211 in file "mcc_generated_files/eusart2.c"
  9757 ;; Parameters:    Size  Location     Type
  9758 ;;  interruptHan    2    2[BANK0 ] PTR FTN()void 
  9759 ;;		 -> EUSART2_Transmit_ISR(1), 
  9760 ;; Auto vars:     Size  Location     Type
  9761 ;;		None
  9762 ;; Return value:  Size  Location     Type
  9763 ;;                  1    wreg      void 
  9764 ;; Registers used:
  9765 ;;		wreg
  9766 ;; Tracked objects:
  9767 ;;		On entry : 3F/0
  9768 ;;		On exit  : 3F/1
  9769 ;;		Unchanged: 0/0
  9770 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9771 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9772 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9773 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9774 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9775 ;;Total ram usage:        2 bytes
  9776 ;; Hardware stack levels used:    1
  9777 ;; Hardware stack levels required when called:    5
  9778 ;; This function calls:
  9779 ;;		Nothing
  9780 ;; This function is called by:
  9781 ;;		_EUSART2_Initialize
  9782 ;; This function uses a non-reentrant model
  9783 ;;
  9784                           
  9785                           
  9786                           ;psect for function _EUSART2_SetTxInterruptHandler
  9787  0EE8                     _EUSART2_SetTxInterruptHandler:	
  9788                           
  9789                           ;eusart2.c: 212: EUSART2_TxDefaultInterruptHandler = interruptHandler;
  9790                           
  9791                           ;incstack = 0
  9792                           ; Regs used in _EUSART2_SetTxInterruptHandler: [wreg]
  9793  0EE8  0823               	movf	EUSART2_SetTxInterruptHandler@interruptHandler+1,w
  9794  0EE9  0141               	movlb	1	; select bank1
  9795  0EEA  00DE               	movwf	(_EUSART2_TxDefaultInterruptHandler+1)^(0+128)
  9796  0EEB  0140               	movlb	0	; select bank0
  9797  0EEC  0822               	movf	EUSART2_SetTxInterruptHandler@interruptHandler,w
  9798  0EED  0141               	movlb	1	; select bank1
  9799  0EEE  00DD               	movwf	_EUSART2_TxDefaultInterruptHandler^(0+128)
  9800  0EEF  0008               	return
  9801  0EF0                     __end_of_EUSART2_SetTxInterruptHandler:	
  9802  0EF0                     __ptext37:	
  9803 ;; *************** function _EUSART1_Initialize *****************
  9804 ;; Defined at:
  9805 ;;		line 75 in file "mcc_generated_files/eusart1.c"
  9806 ;; Parameters:    Size  Location     Type
  9807 ;;		None
  9808 ;; Auto vars:     Size  Location     Type
  9809 ;;		None
  9810 ;; Return value:  Size  Location     Type
  9811 ;;                  1    wreg      void 
  9812 ;; Registers used:
  9813 ;;		wreg, status,2, status,0, pclath, cstack
  9814 ;; Tracked objects:
  9815 ;;		On entry : 3F/5
  9816 ;;		On exit  : 3F/E
  9817 ;;		Unchanged: 0/0
  9818 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9819 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9820 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9821 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9822 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9823 ;;Total ram usage:        0 bytes
  9824 ;; Hardware stack levels used:    1
  9825 ;; Hardware stack levels required when called:    6
  9826 ;; This function calls:
  9827 ;;		_EUSART1_SetRxInterruptHandler
  9828 ;;		_EUSART1_SetTxInterruptHandler
  9829 ;; This function is called by:
  9830 ;;		_SYSTEM_Initialize
  9831 ;; This function uses a non-reentrant model
  9832 ;;
  9833                           
  9834                           
  9835                           ;psect for function _EUSART1_Initialize
  9836  0EF0                     _EUSART1_Initialize:	
  9837                           
  9838                           ;eusart1.c: 78: PIE3bits.RC1IE = 0;
  9839                           
  9840                           ;incstack = 0
  9841                           ; Regs used in _EUSART1_Initialize: [wreg+status,2+status,0+pclath+cstack]
  9842  0EF0  014E               	movlb	14	; select bank14
  9843  0EF1  1299               	bcf	25,5	;volatile
  9844                           
  9845                           ;eusart1.c: 79: EUSART1_SetRxInterruptHandler(EUSART1_Receive_ISR);
  9846  0EF2  3049               	movlw	low _EUSART1_Receive_ISR
  9847  0EF3  0140               	movlb	0	; select bank0
  9848  0EF4  00A2               	movwf	EUSART1_SetRxInterruptHandler@interruptHandler
  9849  0EF5  300E               	movlw	high _EUSART1_Receive_ISR
  9850  0EF6  00A3               	movwf	EUSART1_SetRxInterruptHandler@interruptHandler+1
  9851  0EF7  2712  318E         	fcall	_EUSART1_SetRxInterruptHandler
  9852                           
  9853                           ;eusart1.c: 80: PIE3bits.TX1IE = 0;
  9854  0EF9  014E               	movlb	14	; select bank14
  9855  0EFA  1219               	bcf	25,4	;volatile
  9856                           
  9857                           ;eusart1.c: 81: EUSART1_SetTxInterruptHandler(EUSART1_Transmit_ISR);
  9858  0EFB  3088               	movlw	low _EUSART1_Transmit_ISR
  9859  0EFC  0140               	movlb	0	; select bank0
  9860  0EFD  00A2               	movwf	EUSART1_SetTxInterruptHandler@interruptHandler
  9861  0EFE  300E               	movlw	high _EUSART1_Transmit_ISR
  9862  0EFF  00A3               	movwf	EUSART1_SetTxInterruptHandler@interruptHandler+1
  9863  0F00  271A  318E         	fcall	_EUSART1_SetTxInterruptHandler
  9864                           
  9865                           ;eusart1.c: 85: BAUD1CON = 0x08;
  9866  0F02  3008               	movlw	8
  9867  0F03  0142               	movlb	2	; select bank2
  9868  0F04  009F               	movwf	31	;volatile
  9869                           
  9870                           ;eusart1.c: 88: RC1STA = 0x90;
  9871  0F05  3090               	movlw	144
  9872                           
  9873                           ;eusart1.c: 91: TX1STA = 0x24;
  9874                           
  9875                           ;eusart1.c: 94: SP1BRGL = 0x22;
  9876                           
  9877                           ;eusart1.c: 97: SP1BRGH = 0x00;
  9878  0F06  2722               	fcall	PL30	;call to abstracted procedure
  9879                           
  9880                           ;eusart1.c: 101: eusart1TxHead = 0;
  9881  0F07  01FD               	clrf	_eusart1TxHead	;volatile
  9882                           
  9883                           ;eusart1.c: 102: eusart1TxTail = 0;
  9884  0F08  0141               	movlb	1	; select bank1
  9885  0F09  01D8               	clrf	_eusart1TxTail^(0+128)	;volatile
  9886                           
  9887                           ;eusart1.c: 103: eusart1TxBufferRemaining = sizeof(eusart1TxBuffer);
  9888  0F0A  3008               	movlw	8
  9889  0F0B  00E4               	movwf	_eusart1TxBufferRemaining^(0+128)	;volatile
  9890                           
  9891                           ;eusart1.c: 105: eusart1RxHead = 0;
  9892  0F0C  01D7               	clrf	_eusart1RxHead^(0+128)	;volatile
  9893                           
  9894                           ;eusart1.c: 106: eusart1RxTail = 0;
  9895  0F0D  01D6               	clrf	_eusart1RxTail^(0+128)	;volatile
  9896                           
  9897                           ;eusart1.c: 107: eusart1RxCount = 0;
  9898  0F0E  01D5               	clrf	_eusart1RxCount^(0+128)	;volatile
  9899                           
  9900                           ;eusart1.c: 110: PIE3bits.RC1IE = 1;
  9901  0F0F  014E               	movlb	14	; select bank14
  9902  0F10  1699               	bsf	25,5	;volatile
  9903  0F11  0008               	return
  9904  0F12                     __end_of_EUSART1_Initialize:	
  9905  0F12                     __ptext39:	
  9906 ;; *************** function _EUSART1_SetRxInterruptHandler *****************
  9907 ;; Defined at:
  9908 ;;		line 224 in file "mcc_generated_files/eusart1.c"
  9909 ;; Parameters:    Size  Location     Type
  9910 ;;  interruptHan    2    2[BANK0 ] PTR FTN()void 
  9911 ;;		 -> EUSART1_Receive_ISR(1), 
  9912 ;; Auto vars:     Size  Location     Type
  9913 ;;		None
  9914 ;; Return value:  Size  Location     Type
  9915 ;;                  1    wreg      void 
  9916 ;; Registers used:
  9917 ;;		wreg
  9918 ;; Tracked objects:
  9919 ;;		On entry : 3F/0
  9920 ;;		On exit  : 3F/1
  9921 ;;		Unchanged: 0/0
  9922 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9923 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9924 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9925 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9926 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9927 ;;Total ram usage:        2 bytes
  9928 ;; Hardware stack levels used:    1
  9929 ;; Hardware stack levels required when called:    5
  9930 ;; This function calls:
  9931 ;;		Nothing
  9932 ;; This function is called by:
  9933 ;;		_EUSART1_Initialize
  9934 ;; This function uses a non-reentrant model
  9935 ;;
  9936                           
  9937                           
  9938                           ;psect for function _EUSART1_SetRxInterruptHandler
  9939  0F12                     _EUSART1_SetRxInterruptHandler:	
  9940                           
  9941                           ;eusart1.c: 225: EUSART1_RxDefaultInterruptHandler = interruptHandler;
  9942                           
  9943                           ;incstack = 0
  9944                           ; Regs used in _EUSART1_SetRxInterruptHandler: [wreg]
  9945  0F12  0823               	movf	EUSART1_SetRxInterruptHandler@interruptHandler+1,w
  9946  0F13  0141               	movlb	1	; select bank1
  9947  0F14  00E0               	movwf	(_EUSART1_RxDefaultInterruptHandler+1)^(0+128)
  9948  0F15  0140               	movlb	0	; select bank0
  9949  0F16  0822               	movf	EUSART1_SetRxInterruptHandler@interruptHandler,w
  9950  0F17  0141               	movlb	1	; select bank1
  9951  0F18  00DF               	movwf	_EUSART1_RxDefaultInterruptHandler^(0+128)
  9952  0F19  0008               	return
  9953  0F1A                     __end_of_EUSART1_SetRxInterruptHandler:	
  9954  0F1A                     __ptext38:	
  9955 ;; *************** function _EUSART1_SetTxInterruptHandler *****************
  9956 ;; Defined at:
  9957 ;;		line 220 in file "mcc_generated_files/eusart1.c"
  9958 ;; Parameters:    Size  Location     Type
  9959 ;;  interruptHan    2    2[BANK0 ] PTR FTN()void 
  9960 ;;		 -> EUSART1_Transmit_ISR(1), 
  9961 ;; Auto vars:     Size  Location     Type
  9962 ;;		None
  9963 ;; Return value:  Size  Location     Type
  9964 ;;                  1    wreg      void 
  9965 ;; Registers used:
  9966 ;;		wreg
  9967 ;; Tracked objects:
  9968 ;;		On entry : 3F/0
  9969 ;;		On exit  : 3F/1
  9970 ;;		Unchanged: 0/0
  9971 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9972 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9973 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9974 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9975 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9976 ;;Total ram usage:        2 bytes
  9977 ;; Hardware stack levels used:    1
  9978 ;; Hardware stack levels required when called:    5
  9979 ;; This function calls:
  9980 ;;		Nothing
  9981 ;; This function is called by:
  9982 ;;		_EUSART1_Initialize
  9983 ;; This function uses a non-reentrant model
  9984 ;;
  9985                           
  9986                           
  9987                           ;psect for function _EUSART1_SetTxInterruptHandler
  9988  0F1A                     _EUSART1_SetTxInterruptHandler:	
  9989                           
  9990                           ;eusart1.c: 221: EUSART1_TxDefaultInterruptHandler = interruptHandler;
  9991                           
  9992                           ;incstack = 0
  9993                           ; Regs used in _EUSART1_SetTxInterruptHandler: [wreg]
  9994  0F1A  0823               	movf	EUSART1_SetTxInterruptHandler@interruptHandler+1,w
  9995  0F1B  0141               	movlb	1	; select bank1
  9996  0F1C  00E2               	movwf	(_EUSART1_TxDefaultInterruptHandler+1)^(0+128)
  9997  0F1D  0140               	movlb	0	; select bank0
  9998  0F1E  0822               	movf	EUSART1_SetTxInterruptHandler@interruptHandler,w
  9999  0F1F  0141               	movlb	1	; select bank1
 10000  0F20  00E1               	movwf	_EUSART1_TxDefaultInterruptHandler^(0+128)
 10001  0F21  0008               	return
 10002  0F22                     __end_of_EUSART1_SetTxInterruptHandler:	
 10003  0F22                     PL30:	
 10004  0F22  009D               	movwf	29	;volatile
 10005  0F23  3024               	movlw	36
 10006  0F24  009E               	movwf	30	;volatile
 10007  0F25  3022               	movlw	34
 10008  0F26  009B               	movwf	27	;volatile
 10009  0F27  019C               	clrf	28	;volatile
 10010  0F28  0008               	return
 10011  0F29                     __end_ofPL30:	
 10012                           
 10013                           	psect	intentry
 10014  0004                     __pintentry:	
 10015 ;; *************** function _INTERRUPT_InterruptManager *****************
 10016 ;; Defined at:
 10017 ;;		line 52 in file "mcc_generated_files/interrupt_manager.c"
 10018 ;; Parameters:    Size  Location     Type
 10019 ;;		None
 10020 ;; Auto vars:     Size  Location     Type
 10021 ;;		None
 10022 ;; Return value:  Size  Location     Type
 10023 ;;                  1    wreg      void 
 10024 ;; Registers used:
 10025 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 10026 ;; Tracked objects:
 10027 ;;		On entry : 0/0
 10028 ;;		On exit  : 0/0
 10029 ;;		Unchanged: 0/0
 10030 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10031 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10032 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10033 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10034 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10035 ;;Total ram usage:        0 bytes
 10036 ;; Hardware stack levels used:    1
 10037 ;; Hardware stack levels required when called:    4
 10038 ;; This function calls:
 10039 ;;		Absolute function
 10040 ;;		_EUSART1_Receive_ISR
 10041 ;;		_EUSART1_Transmit_ISR
 10042 ;;		_EUSART2_Receive_ISR
 10043 ;;		_EUSART2_Transmit_ISR
 10044 ;;		_TMR2_ISR
 10045 ;; This function is called by:
 10046 ;;		Interrupt level 1
 10047 ;; This function uses a non-reentrant model
 10048 ;;
 10049                           
 10050  0004                     _INTERRUPT_InterruptManager:	
 10051                           
 10052                           ;incstack = 0
 10053  0004  147E               	bsf	126,0	;set compiler interrupt flag (level 1)
 10054                           
 10055                           ; Regs used in _INTERRUPT_InterruptManager: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+c
      +                          stack]
 10056  0005  3180               	pagesel	$
 10057                           
 10058                           ;interrupt_manager.c: 55: if(INTCONbits.PEIE == 1)
 10059  0006  1F0B               	btfss	11,6	;volatile
 10060  0007  2836               	goto	i1l299
 10061                           
 10062                           ;interrupt_manager.c: 56: {
 10063                           ;interrupt_manager.c: 57: if(PIE3bits.TX2IE == 1 && PIR3bits.TX2IF == 1)
 10064  0008  014E               	movlb	14	; select bank14
 10065  0009  1B19               	btfsc	25,6	;volatile
 10066  000A  1F0F               	btfss	15,6	;volatile
 10067  000B  2813               	goto	i1l288
 10068                           
 10069                           ;interrupt_manager.c: 58: {
 10070                           ;interrupt_manager.c: 59: EUSART2_TxDefaultInterruptHandler();
 10071  000C  0141               	movlb	1	; select bank1
 10072  000D  085E               	movf	(_EUSART2_TxDefaultInterruptHandler+1)^(0+128),w
 10073  000E  008A               	movwf	10
 10074  000F  085D               	movf	_EUSART2_TxDefaultInterruptHandler^(0+128),w
 10075  0010  000A               	callw
 10076  0011  3180               	pagesel	$
 10077                           
 10078                           ;interrupt_manager.c: 60: }
 10079  0012  2836               	goto	i1l299
 10080  0013                     i1l288:	
 10081                           
 10082                           ;interrupt_manager.c: 61: else if(PIE3bits.RC2IE == 1 && PIR3bits.RC2IF == 1)
 10083  0013  1B99               	btfsc	25,7	;volatile
 10084  0014  1F8F               	btfss	15,7	;volatile
 10085  0015  281D               	goto	i1l290
 10086                           
 10087                           ;interrupt_manager.c: 62: {
 10088                           ;interrupt_manager.c: 63: EUSART2_RxDefaultInterruptHandler();
 10089  0016  0141               	movlb	1	; select bank1
 10090  0017  085C               	movf	(_EUSART2_RxDefaultInterruptHandler+1)^(0+128),w
 10091  0018  008A               	movwf	10
 10092  0019  085B               	movf	_EUSART2_RxDefaultInterruptHandler^(0+128),w
 10093  001A  000A               	callw
 10094  001B  3180               	pagesel	$
 10095                           
 10096                           ;interrupt_manager.c: 64: }
 10097  001C  2836               	goto	i1l299
 10098  001D                     i1l290:	
 10099                           
 10100                           ;interrupt_manager.c: 65: else if(PIE3bits.TX1IE == 1 && PIR3bits.TX1IF == 1)
 10101  001D  1A19               	btfsc	25,4	;volatile
 10102  001E  1E0F               	btfss	15,4	;volatile
 10103  001F  2827               	goto	i1l292
 10104                           
 10105                           ;interrupt_manager.c: 66: {
 10106                           ;interrupt_manager.c: 67: EUSART1_TxDefaultInterruptHandler();
 10107  0020  0141               	movlb	1	; select bank1
 10108  0021  0862               	movf	(_EUSART1_TxDefaultInterruptHandler+1)^(0+128),w
 10109  0022  008A               	movwf	10
 10110  0023  0861               	movf	_EUSART1_TxDefaultInterruptHandler^(0+128),w
 10111  0024  000A               	callw
 10112  0025  3180               	pagesel	$
 10113                           
 10114                           ;interrupt_manager.c: 68: }
 10115  0026  2836               	goto	i1l299
 10116  0027                     i1l292:	
 10117                           
 10118                           ;interrupt_manager.c: 69: else if(PIE3bits.RC1IE == 1 && PIR3bits.RC1IF == 1)
 10119  0027  1A99               	btfsc	25,5	;volatile
 10120  0028  1E8F               	btfss	15,5	;volatile
 10121  0029  2831               	goto	i1l294
 10122                           
 10123                           ;interrupt_manager.c: 70: {
 10124                           ;interrupt_manager.c: 71: EUSART1_RxDefaultInterruptHandler();
 10125  002A  0141               	movlb	1	; select bank1
 10126  002B  0860               	movf	(_EUSART1_RxDefaultInterruptHandler+1)^(0+128),w
 10127  002C  008A               	movwf	10
 10128  002D  085F               	movf	_EUSART1_RxDefaultInterruptHandler^(0+128),w
 10129  002E  000A               	callw
 10130  002F  3180               	pagesel	$
 10131                           
 10132                           ;interrupt_manager.c: 72: }
 10133  0030  2836               	goto	i1l299
 10134  0031                     i1l294:	
 10135                           
 10136                           ;interrupt_manager.c: 73: else if(PIE4bits.TMR2IE == 1 && PIR4bits.TMR2IF == 1)
 10137  0031  189A               	btfsc	26,1	;volatile
 10138  0032  1C90               	btfss	16,1	;volatile
 10139  0033  2836               	goto	i1l299
 10140                           
 10141                           ;interrupt_manager.c: 74: {
 10142                           ;interrupt_manager.c: 75: TMR2_ISR();
 10143  0034  318E  261E         	fcall	_TMR2_ISR
 10144  0036                     i1l299:	
 10145                           ;interrupt_manager.c: 76: }
 10146                           
 10147  0036  107E               	bcf	126,0	;clear compiler interrupt flag (level 1)
 10148  0037  0009               	retfie
 10149  0038                     __end_of_INTERRUPT_InterruptManager:	
 10150                           
 10151                           	psect	text43
 10152  0E1E                     __ptext43:	
 10153 ;; *************** function _TMR2_ISR *****************
 10154 ;; Defined at:
 10155 ;;		line 165 in file "mcc_generated_files/tmr2.c"
 10156 ;; Parameters:    Size  Location     Type
 10157 ;;		None
 10158 ;; Auto vars:     Size  Location     Type
 10159 ;;		None
 10160 ;; Return value:  Size  Location     Type
 10161 ;;                  1    wreg      void 
 10162 ;; Registers used:
 10163 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 10164 ;; Tracked objects:
 10165 ;;		On entry : 3F/E
 10166 ;;		On exit  : 0/0
 10167 ;;		Unchanged: 0/0
 10168 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10169 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10170 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10171 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10172 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10173 ;;Total ram usage:        0 bytes
 10174 ;; Hardware stack levels used:    1
 10175 ;; Hardware stack levels required when called:    3
 10176 ;; This function calls:
 10177 ;;		Absolute function
 10178 ;;		_TMR2_DefaultInterruptHandler
 10179 ;;		_TMR2_EMG_InterruptHandler
 10180 ;; This function is called by:
 10181 ;;		_INTERRUPT_InterruptManager
 10182 ;; This function uses a non-reentrant model
 10183 ;;
 10184                           
 10185                           
 10186                           ;psect for function _TMR2_ISR
 10187  0E1E                     _TMR2_ISR:	
 10188                           
 10189                           ;tmr2.c: 169: PIR4bits.TMR2IF = 0;
 10190                           
 10191                           ;incstack = 0
 10192                           ; Regs used in _TMR2_ISR: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 10193  0E1E  1090               	bcf	16,1	;volatile
 10194                           
 10195                           ;tmr2.c: 171: if(TMR2_InterruptHandler)
 10196  0E1F  0141               	movlb	1	; select bank1
 10197  0E20  0859               	movf	_TMR2_InterruptHandler^(0+128),w
 10198  0E21  045A               	iorwf	(_TMR2_InterruptHandler+1)^(0+128),w
 10199  0E22  1903               	btfsc	3,2
 10200  0E23  0008               	return
 10201                           
 10202                           ;tmr2.c: 172: {
 10203                           ;tmr2.c: 173: TMR2_InterruptHandler();
 10204  0E24  085A               	movf	(_TMR2_InterruptHandler+1)^(0+128),w
 10205  0E25  008A               	movwf	10
 10206  0E26  0859               	movf	_TMR2_InterruptHandler^(0+128),w
 10207  0E27  000A               	callw
 10208  0E28  318E               	pagesel	$
 10209  0E29  0008               	return
 10210  0E2A                     __end_of_TMR2_ISR:	
 10211                           
 10212                           	psect	text44
 10213  07F6                     __ptext44:	
 10214 ;; *************** function _TMR2_DefaultInterruptHandler *****************
 10215 ;; Defined at:
 10216 ;;		line 182 in file "mcc_generated_files/tmr2.c"
 10217 ;; Parameters:    Size  Location     Type
 10218 ;;		None
 10219 ;; Auto vars:     Size  Location     Type
 10220 ;;		None
 10221 ;; Return value:  Size  Location     Type
 10222 ;;                  1    wreg      void 
 10223 ;; Registers used:
 10224 ;;		None
 10225 ;; Tracked objects:
 10226 ;;		On entry : 3F/1
 10227 ;;		On exit  : 3F/1
 10228 ;;		Unchanged: 3F/0
 10229 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10230 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10231 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10232 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10233 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10234 ;;Total ram usage:        0 bytes
 10235 ;; Hardware stack levels used:    1
 10236 ;; This function calls:
 10237 ;;		Nothing
 10238 ;; This function is called by:
 10239 ;;		_TMR2_Initialize
 10240 ;;		_TMR2_ISR
 10241 ;; This function uses a non-reentrant model
 10242 ;;
 10243                           
 10244                           
 10245                           ;psect for function _TMR2_DefaultInterruptHandler
 10246  07F6                     _TMR2_DefaultInterruptHandler:	
 10247                           
 10248                           ;incstack = 0
 10249                           ; Regs used in _TMR2_DefaultInterruptHandler: []
 10250  07F6  0008               	return
 10251  07F7                     __end_of_TMR2_DefaultInterruptHandler:	
 10252                           
 10253                           	psect	text45
 10254  0F29                     __ptext45:	
 10255 ;; *************** function _TMR2_EMG_InterruptHandler *****************
 10256 ;; Defined at:
 10257 ;;		line 72 in file "main.c"
 10258 ;; Parameters:    Size  Location     Type
 10259 ;;		None
 10260 ;; Auto vars:     Size  Location     Type
 10261 ;;  adval           2    0[BANK0 ] unsigned int 
 10262 ;; Return value:  Size  Location     Type
 10263 ;;                  1    wreg      void 
 10264 ;; Registers used:
 10265 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 10266 ;; Tracked objects:
 10267 ;;		On entry : 3F/1
 10268 ;;		On exit  : 0/0
 10269 ;;		Unchanged: 0/0
 10270 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10271 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10272 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10273 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10274 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10275 ;;Total ram usage:        2 bytes
 10276 ;; Hardware stack levels used:    1
 10277 ;; Hardware stack levels required when called:    2
 10278 ;; This function calls:
 10279 ;;		_ADC_GetConversionResult
 10280 ;;		_ADC_SelectChannel
 10281 ;;		_ADC_StartConversion
 10282 ;;		_sbuf_insert
 10283 ;;		i1___lwdiv
 10284 ;; This function is called by:
 10285 ;;		_main
 10286 ;;		_TMR2_ISR
 10287 ;; This function uses a non-reentrant model
 10288 ;;
 10289                           
 10290                           
 10291                           ;psect for function _TMR2_EMG_InterruptHandler
 10292  0F29                     _TMR2_EMG_InterruptHandler:	
 10293                           
 10294                           ;main.c: 74: if (start_flag == 1) {
 10295                           
 10296                           ;incstack = 0
 10297                           ; Regs used in _TMR2_EMG_InterruptHandler: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cs
      +                          tack]
 10298  0F29  0B4F               	decfsz	_start_flag^(0+128),w
 10299  0F2A  0008               	return
 10300                           
 10301                           ;main.c: 83: ADC_SelectChannel(EMG_RA2);
 10302  0F2B  3002               	movlw	2
 10303  0F2C  274D  318F         	fcall	_ADC_SelectChannel
 10304                           
 10305                           ;main.c: 85: ADC_StartConversion();
 10306  0F2E  2758  318F         	fcall	_ADC_StartConversion
 10307                           
 10308                           ;main.c: 87: adc_result_t adval = ADC_GetConversionResult();
 10309  0F30  2745  318F         	fcall	_ADC_GetConversionResult
 10310  0F32  0871               	movf	?_ADC_GetConversionResult+1,w
 10311  0F33  0140               	movlb	0	; select bank0
 10312  0F34  00A1               	movwf	TMR2_EMG_InterruptHandler@adval+1
 10313  0F35  0870               	movf	?_ADC_GetConversionResult,w
 10314  0F36  00A0               	movwf	TMR2_EMG_InterruptHandler@adval
 10315                           
 10316                           ;main.c: 94: sbuf_insert(adval/100);
 10317  0F37  3064               	movlw	100
 10318  0F38  00F0               	movwf	i1___lwdiv@divisor
 10319  0F39  01F1               	clrf	i1___lwdiv@divisor+1
 10320  0F3A  0821               	movf	TMR2_EMG_InterruptHandler@adval+1,w
 10321  0F3B  00F3               	movwf	i1___lwdiv@dividend+1
 10322  0F3C  0820               	movf	TMR2_EMG_InterruptHandler@adval,w
 10323  0F3D  00F2               	movwf	i1___lwdiv@dividend
 10324  0F3E  27DB  318F         	fcall	i1___lwdiv
 10325  0F40  0871               	movf	?i1___lwdiv+1,w
 10326  0F41  00F8               	movwf	sbuf_insert@element+1
 10327  0F42  0870               	movf	?i1___lwdiv,w
 10328  0F43  00F7               	movwf	sbuf_insert@element
 10329  0F44  2F5A               	ljmp	i1l2478
 10330  0F45                     __end_of_TMR2_EMG_InterruptHandler:	
 10331  0F45                     __ptext52:	
 10332 ;; *************** function _ADC_GetConversionResult *****************
 10333 ;; Defined at:
 10334 ;;		line 104 in file "mcc_generated_files/adc.c"
 10335 ;; Parameters:    Size  Location     Type
 10336 ;;		None
 10337 ;; Auto vars:     Size  Location     Type
 10338 ;;		None
 10339 ;; Return value:  Size  Location     Type
 10340 ;;                  2    0[COMMON] unsigned int 
 10341 ;; Registers used:
 10342 ;;		wreg
 10343 ;; Tracked objects:
 10344 ;;		On entry : 3F/1
 10345 ;;		On exit  : 3F/1
 10346 ;;		Unchanged: 0/0
 10347 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10348 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10349 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10350 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10351 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10352 ;;Total ram usage:        2 bytes
 10353 ;; Hardware stack levels used:    1
 10354 ;; This function calls:
 10355 ;;		Nothing
 10356 ;; This function is called by:
 10357 ;;		_TMR2_EMG_InterruptHandler
 10358 ;; This function uses a non-reentrant model
 10359 ;;
 10360                           
 10361                           
 10362                           ;psect for function _ADC_GetConversionResult
 10363  0F45                     _ADC_GetConversionResult:	
 10364                           
 10365                           ;adc.c: 107: return ((adc_result_t)((ADRESH << 8) + ADRESL));
 10366                           
 10367                           ;incstack = 0
 10368                           ; Regs used in _ADC_GetConversionResult: [wreg]
 10369  0F45  081C               	movf	28,w	;volatile
 10370  0F46  00F1               	movwf	?_ADC_GetConversionResult+1
 10371  0F47  01F0               	clrf	?_ADC_GetConversionResult
 10372  0F48  081B               	movf	27,w	;volatile
 10373  0F49  07F0               	addwf	?_ADC_GetConversionResult,f
 10374  0F4A  1803               	skipnc
 10375  0F4B  0AF1               	incf	?_ADC_GetConversionResult+1,f
 10376  0F4C  0008               	return
 10377  0F4D                     __end_of_ADC_GetConversionResult:	
 10378  0F4D                     __ptext51:	
 10379 ;; *************** function _ADC_SelectChannel *****************
 10380 ;; Defined at:
 10381 ;;		line 83 in file "mcc_generated_files/adc.c"
 10382 ;; Parameters:    Size  Location     Type
 10383 ;;  channel         1    wreg     enum E9368
 10384 ;; Auto vars:     Size  Location     Type
 10385 ;;  channel         1    1[COMMON] enum E9368
 10386 ;; Return value:  Size  Location     Type
 10387 ;;                  1    wreg      void 
 10388 ;; Registers used:
 10389 ;;		wreg, status,2, status,0
 10390 ;; Tracked objects:
 10391 ;;		On entry : 3F/1
 10392 ;;		On exit  : 3F/1
 10393 ;;		Unchanged: 0/0
 10394 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10395 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10396 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10397 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10398 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10399 ;;Total ram usage:        2 bytes
 10400 ;; Hardware stack levels used:    1
 10401 ;; This function calls:
 10402 ;;		Nothing
 10403 ;; This function is called by:
 10404 ;;		_TMR2_EMG_InterruptHandler
 10405 ;; This function uses a non-reentrant model
 10406 ;;
 10407                           
 10408                           
 10409                           ;psect for function _ADC_SelectChannel
 10410  0F4D                     _ADC_SelectChannel:	
 10411                           
 10412                           ;incstack = 0
 10413                           ; Regs used in _ADC_SelectChannel: [wreg+status,2+status,0]
 10414                           ;ADC_SelectChannel@channel stored from wreg
 10415  0F4D  00F1               	movwf	ADC_SelectChannel@channel
 10416                           
 10417                           ;adc.c: 86: ADCON0bits.CHS = channel;
 10418  0F4E  00F0               	movwf	??_ADC_SelectChannel
 10419  0F4F  0DF0               	rlf	??_ADC_SelectChannel,f
 10420  0F50  0DF0               	rlf	??_ADC_SelectChannel,f
 10421  0F51  081D               	movf	29,w	;volatile
 10422  0F52  0670               	xorwf	??_ADC_SelectChannel,w
 10423  0F53  3903               	andlw	-253
 10424  0F54  0670               	xorwf	??_ADC_SelectChannel,w
 10425  0F55  009D               	movwf	29	;volatile
 10426                           
 10427                           ;adc.c: 88: ADCON0bits.ADON = 1;
 10428  0F56  141D               	bsf	29,0	;volatile
 10429  0F57  0008               	return
 10430  0F58                     __end_of_ADC_SelectChannel:	
 10431  0F58                     __ptext50:	
 10432 ;; *************** function _ADC_StartConversion *****************
 10433 ;; Defined at:
 10434 ;;		line 91 in file "mcc_generated_files/adc.c"
 10435 ;; Parameters:    Size  Location     Type
 10436 ;;		None
 10437 ;; Auto vars:     Size  Location     Type
 10438 ;;		None
 10439 ;; Return value:  Size  Location     Type
 10440 ;;                  1    wreg      void 
 10441 ;; Registers used:
 10442 ;;		None
 10443 ;; Tracked objects:
 10444 ;;		On entry : 3F/1
 10445 ;;		On exit  : 3F/1
 10446 ;;		Unchanged: 0/0
 10447 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10448 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10449 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10450 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10451 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10452 ;;Total ram usage:        0 bytes
 10453 ;; Hardware stack levels used:    1
 10454 ;; This function calls:
 10455 ;;		Nothing
 10456 ;; This function is called by:
 10457 ;;		_TMR2_EMG_InterruptHandler
 10458 ;; This function uses a non-reentrant model
 10459 ;;
 10460                           
 10461                           
 10462                           ;psect for function _ADC_StartConversion
 10463  0F58                     _ADC_StartConversion:	
 10464                           
 10465                           ;adc.c: 94: ADCON0bits.GO = 1;
 10466                           
 10467                           ;incstack = 0
 10468                           ; Regs used in _ADC_StartConversion: []
 10469  0F58  149D               	bsf	29,1	;volatile
 10470  0F59  0008               	return
 10471  0F5A                     __end_of_ADC_StartConversion:	
 10472  0F5A                     __ptext47:	
 10473 ;; *************** function _sbuf_insert *****************
 10474 ;; Defined at:
 10475 ;;		line 75 in file "signal_buffer.c"
 10476 ;; Parameters:    Size  Location     Type
 10477 ;;  element         2    7[COMMON] unsigned int 
 10478 ;; Auto vars:     Size  Location     Type
 10479 ;;		None
 10480 ;; Return value:  Size  Location     Type
 10481 ;;                  1    wreg      unsigned char 
 10482 ;; Registers used:
 10483 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 10484 ;; Tracked objects:
 10485 ;;		On entry : 3F/0
 10486 ;;		On exit  : 0/0
 10487 ;;		Unchanged: 0/0
 10488 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10489 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10490 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10491 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10492 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10493 ;;Total ram usage:        6 bytes
 10494 ;; Hardware stack levels used:    1
 10495 ;; Hardware stack levels required when called:    1
 10496 ;; This function calls:
 10497 ;;		_sbuf_isfull
 10498 ;;		i1___awmod
 10499 ;; This function is called by:
 10500 ;;		_TMR2_EMG_InterruptHandler
 10501 ;; This function uses a non-reentrant model
 10502 ;;
 10503                           
 10504                           
 10505                           ;psect for function _sbuf_insert
 10506  0F5A                     _sbuf_insert:	
 10507  0F5A                     i1l2478:	
 10508                           ;incstack = 0
 10509                           ; Regs used in _sbuf_insert: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 10510                           
 10511                           
 10512                           ;signal_buffer.c: 77: if (sbuf_isfull()) {
 10513  0F5A  2784  318F         	fcall	_sbuf_isfull
 10514  0F5C  3A00               	xorlw	0
 10515  0F5D  1D03               	btfss	3,2
 10516  0F5E  0008               	return
 10517                           
 10518                           ;signal_buffer.c: 82: else {
 10519                           ;signal_buffer.c: 84: if (sb_front == -1)
 10520  0F5F  0140               	movlb	0	; select bank0
 10521  0F60  0F52               	incfsz	_sb_front,w
 10522  0F61  2F63               	goto	i1l2488
 10523                           
 10524                           ;signal_buffer.c: 85: sb_front = 0;
 10525  0F62  01D2               	clrf	_sb_front
 10526  0F63                     i1l2488:	
 10527                           
 10528                           ;signal_buffer.c: 87: sb_rear = (sb_rear + 1) % 50;
 10529  0F63  0851               	movf	_sb_rear,w
 10530  0F64  00F2               	movwf	i1___awmod@dividend
 10531  0F65  01F3               	clrf	i1___awmod@dividend+1
 10532  0F66  1BF2               	btfsc	i1___awmod@dividend,7
 10533  0F67  03F3               	decf	i1___awmod@dividend+1,f
 10534  0F68  0AF2               	incf	i1___awmod@dividend,f
 10535  0F69  1903               	skipnz
 10536  0F6A  0AF3               	incf	i1___awmod@dividend+1,f
 10537  0F6B  3032               	movlw	50
 10538  0F6C  00F0               	movwf	i1___awmod@divisor
 10539  0F6D  01F1               	clrf	i1___awmod@divisor+1
 10540  0F6E  27A2               	fcall	i1___awmod
 10541  0F6F  0870               	movf	?i1___awmod,w
 10542  0F70  00D1               	movwf	_sb_rear
 10543                           
 10544                           ;signal_buffer.c: 88: sb_data[sb_rear] = element;
 10545  0F71  00F9               	movwf	??_sbuf_insert
 10546  0F72  308C               	movlw	140
 10547  0F73  01FA               	clrf	??_sbuf_insert+1
 10548  0F74  35F9               	lslf	??_sbuf_insert,f
 10549  0F75  0DFA               	rlf	??_sbuf_insert+1,f
 10550  0F76  00FB               	movwf	??_sbuf_insert+2
 10551  0F77  3023               	movlw	35
 10552  0F78  00FC               	movwf	??_sbuf_insert+3
 10553  0F79  0879               	movf	??_sbuf_insert,w
 10554  0F7A  077B               	addwf	??_sbuf_insert+2,w
 10555  0F7B  0086               	movwf	6
 10556  0F7C  087A               	movf	??_sbuf_insert+1,w
 10557  0F7D  3D7C               	addwfc	??_sbuf_insert+3,w
 10558  0F7E  0087               	movwf	7
 10559  0F7F  0877               	movf	sbuf_insert@element,w
 10560  0F80  3FC0               	movwi [0]fsr1
 10561  0F81  0878               	movf	sbuf_insert@element+1,w
 10562  0F82  3FC1               	movwi [1]fsr1
 10563  0F83  0008               	return
 10564  0F84                     __end_of_sbuf_insert:	
 10565  0F84                     __ptext49:	
 10566 ;; *************** function _sbuf_isfull *****************
 10567 ;; Defined at:
 10568 ;;		line 57 in file "signal_buffer.c"
 10569 ;; Parameters:    Size  Location     Type
 10570 ;;		None
 10571 ;; Auto vars:     Size  Location     Type
 10572 ;;		None
 10573 ;; Return value:  Size  Location     Type
 10574 ;;                  1    wreg      unsigned char 
 10575 ;; Registers used:
 10576 ;;		wreg, status,2, status,0
 10577 ;; Tracked objects:
 10578 ;;		On entry : 3F/0
 10579 ;;		On exit  : 0/0
 10580 ;;		Unchanged: 0/0
 10581 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10582 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10583 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10584 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10585 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10586 ;;Total ram usage:        4 bytes
 10587 ;; Hardware stack levels used:    1
 10588 ;; This function calls:
 10589 ;;		Nothing
 10590 ;; This function is called by:
 10591 ;;		_sbuf_insert
 10592 ;; This function uses a non-reentrant model
 10593 ;;
 10594                           
 10595                           
 10596                           ;psect for function _sbuf_isfull
 10597  0F84                     _sbuf_isfull:	
 10598                           
 10599                           ;signal_buffer.c: 59: if ((sb_front == sb_rear + 1) || (sb_front == 0 && sb_rear == 50 -
      +                           1))
 10600                           
 10601                           ;incstack = 0
 10602                           ; Regs used in _sbuf_isfull: [wreg+status,2+status,0]
 10603  0F84  0852               	movf	_sb_front,w
 10604  0F85  00F0               	movwf	??_sbuf_isfull
 10605  0F86  01F1               	clrf	??_sbuf_isfull+1
 10606  0F87  1BF0               	btfsc	??_sbuf_isfull,7
 10607  0F88  03F1               	decf	??_sbuf_isfull+1,f
 10608  0F89  3001               	movlw	1
 10609  0F8A  0751               	addwf	_sb_rear,w
 10610  0F8B  00F2               	movwf	??_sbuf_isfull+2
 10611  0F8C  01F3               	clrf	??_sbuf_isfull+3
 10612  0F8D  1803               	skipnc
 10613  0F8E  0AF3               	incf	??_sbuf_isfull+3,f
 10614  0F8F  1BD1               	btfsc	_sb_rear,7
 10615  0F90  03F3               	decf	??_sbuf_isfull+3,f
 10616  0F91  0871               	movf	??_sbuf_isfull+1,w
 10617  0F92  0673               	xorwf	??_sbuf_isfull+3,w
 10618  0F93  1D03               	skipz
 10619  0F94  2F97               	goto	u177_25
 10620  0F95  0870               	movf	??_sbuf_isfull,w
 10621  0F96  0672               	xorwf	??_sbuf_isfull+2,w
 10622  0F97                     u177_25:	
 10623  0F97  1903               	skipnz
 10624  0F98  3401               	retlw	1
 10625  0F99  0140               	movlb	0	; select bank0
 10626  0F9A  0852               	movf	_sb_front,w
 10627  0F9B  1D03               	btfss	3,2
 10628  0F9C  3400               	retlw	0
 10629  0F9D  3031               	movlw	49
 10630  0F9E  0651               	xorwf	_sb_rear,w
 10631  0F9F  1903               	btfsc	3,2
 10632                           
 10633                           ;signal_buffer.c: 60: return 1;
 10634  0FA0  3401               	retlw	1
 10635                           
 10636                           ;signal_buffer.c: 61: else
 10637                           ;signal_buffer.c: 62: return 0;
 10638  0FA1  3400               	retlw	0
 10639  0FA2                     __end_of_sbuf_isfull:	
 10640  0FA2                     __ptext48:	
 10641 ;; *************** function i1___awmod *****************
 10642 ;; Defined at:
 10643 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.44\sources\common\awmod.c"
 10644 ;; Parameters:    Size  Location     Type
 10645 ;;  divisor         2    0[COMMON] int 
 10646 ;;  dividend        2    2[COMMON] int 
 10647 ;; Auto vars:     Size  Location     Type
 10648 ;;  __awmod         1    5[COMMON] unsigned char 
 10649 ;;  __awmod         1    4[COMMON] unsigned char 
 10650 ;; Return value:  Size  Location     Type
 10651 ;;                  2    0[COMMON] int 
 10652 ;; Registers used:
 10653 ;;		wreg, status,2, status,0
 10654 ;; Tracked objects:
 10655 ;;		On entry : 3F/0
 10656 ;;		On exit  : 3F/0
 10657 ;;		Unchanged: 3F/0
 10658 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10659 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10660 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10661 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10662 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10663 ;;Total ram usage:        6 bytes
 10664 ;; Hardware stack levels used:    1
 10665 ;; This function calls:
 10666 ;;		Nothing
 10667 ;; This function is called by:
 10668 ;;		_sbuf_insert
 10669 ;; This function uses a non-reentrant model
 10670 ;;
 10671                           
 10672                           
 10673                           ;psect for function i1___awmod
 10674  0FA2                     i1___awmod:	
 10675                           
 10676                           ;incstack = 0
 10677                           ; Regs used in i1___awmod: [wreg+status,2+status,0]
 10678  0FA2  01F5               	clrf	i1___awmod@sign
 10679  0FA3  1FF3               	btfss	i1___awmod@dividend+1,7
 10680  0FA4  2FAC               	goto	i1l2428
 10681  0FA5  09F2               	comf	i1___awmod@dividend,f
 10682  0FA6  09F3               	comf	i1___awmod@dividend+1,f
 10683  0FA7  0AF2               	incf	i1___awmod@dividend,f
 10684  0FA8  1903               	skipnz
 10685  0FA9  0AF3               	incf	i1___awmod@dividend+1,f
 10686  0FAA  01F5               	clrf	i1___awmod@sign
 10687  0FAB  0AF5               	incf	i1___awmod@sign,f
 10688  0FAC                     i1l2428:	
 10689  0FAC  1FF1               	btfss	i1___awmod@divisor+1,7
 10690  0FAD  2FB3               	goto	i1l2432
 10691  0FAE  09F0               	comf	i1___awmod@divisor,f
 10692  0FAF  09F1               	comf	i1___awmod@divisor+1,f
 10693  0FB0  0AF0               	incf	i1___awmod@divisor,f
 10694  0FB1  1903               	skipnz
 10695  0FB2  0AF1               	incf	i1___awmod@divisor+1,f
 10696  0FB3                     i1l2432:	
 10697  0FB3  0870               	movf	i1___awmod@divisor,w
 10698  0FB4  0471               	iorwf	i1___awmod@divisor+1,w
 10699  0FB5  1903               	btfsc	3,2
 10700  0FB6  2FCE               	goto	i1l2448
 10701  0FB7  01F4               	clrf	i1___awmod@counter
 10702  0FB8                     L13:	
 10703  0FB8  0AF4               	incf	i1___awmod@counter,f
 10704  0FB9  1BF1               	btfsc	i1___awmod@divisor+1,7
 10705  0FBA  2FBE               	goto	i1l2440
 10706  0FBB  35F0               	lslf	i1___awmod@divisor,f
 10707  0FBC  0DF1               	rlf	i1___awmod@divisor+1,f
 10708  0FBD  2FB8               	goto	L13
 10709  0FBE                     i1l2440:	
 10710  0FBE  0871               	movf	i1___awmod@divisor+1,w
 10711  0FBF  0273               	subwf	i1___awmod@dividend+1,w
 10712  0FC0  1D03               	skipz
 10713  0FC1  2FC4               	goto	u184_25
 10714  0FC2  0870               	movf	i1___awmod@divisor,w
 10715  0FC3  0272               	subwf	i1___awmod@dividend,w
 10716  0FC4                     u184_25:	
 10717  0FC4  1C03               	skipc
 10718  0FC5  2FCA               	goto	i1l2444
 10719  0FC6  0870               	movf	i1___awmod@divisor,w
 10720  0FC7  02F2               	subwf	i1___awmod@dividend,f
 10721  0FC8  0871               	movf	i1___awmod@divisor+1,w
 10722  0FC9  3BF3               	subwfb	i1___awmod@dividend+1,f
 10723  0FCA                     i1l2444:	
 10724  0FCA  36F1               	lsrf	i1___awmod@divisor+1,f
 10725  0FCB  0CF0               	rrf	i1___awmod@divisor,f
 10726  0FCC  0BF4               	decfsz	i1___awmod@counter,f
 10727  0FCD  2FBE               	goto	i1l2440
 10728  0FCE                     i1l2448:	
 10729  0FCE  0875               	movf	i1___awmod@sign,w
 10730  0FCF  1903               	btfsc	3,2
 10731  0FD0  2FD6               	goto	i1l2452
 10732  0FD1  09F2               	comf	i1___awmod@dividend,f
 10733  0FD2  09F3               	comf	i1___awmod@dividend+1,f
 10734  0FD3  0AF2               	incf	i1___awmod@dividend,f
 10735  0FD4  1903               	skipnz
 10736  0FD5  0AF3               	incf	i1___awmod@dividend+1,f
 10737  0FD6                     i1l2452:	
 10738  0FD6  0873               	movf	i1___awmod@dividend+1,w
 10739  0FD7  00F1               	movwf	?i1___awmod+1
 10740  0FD8  0872               	movf	i1___awmod@dividend,w
 10741  0FD9  00F0               	movwf	?i1___awmod
 10742  0FDA  0008               	return
 10743  0FDB                     __end_ofi1___awmod:	
 10744  0FDB                     __ptext46:	
 10745 ;; *************** function i1___lwdiv *****************
 10746 ;; Defined at:
 10747 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.44\sources\common\lwdiv.c"
 10748 ;; Parameters:    Size  Location     Type
 10749 ;;  divisor         2    0[COMMON] unsigned int 
 10750 ;;  dividend        2    2[COMMON] unsigned int 
 10751 ;; Auto vars:     Size  Location     Type
 10752 ;;  __lwdiv         2    4[COMMON] unsigned int 
 10753 ;;  __lwdiv         1    6[COMMON] unsigned char 
 10754 ;; Return value:  Size  Location     Type
 10755 ;;                  2    0[COMMON] unsigned int 
 10756 ;; Registers used:
 10757 ;;		wreg, status,2, status,0
 10758 ;; Tracked objects:
 10759 ;;		On entry : 3F/0
 10760 ;;		On exit  : 3F/0
 10761 ;;		Unchanged: 3F/0
 10762 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10763 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10764 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10765 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10766 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10767 ;;Total ram usage:        7 bytes
 10768 ;; Hardware stack levels used:    1
 10769 ;; This function calls:
 10770 ;;		Nothing
 10771 ;; This function is called by:
 10772 ;;		_TMR2_EMG_InterruptHandler
 10773 ;; This function uses a non-reentrant model
 10774 ;;
 10775                           
 10776                           
 10777                           ;psect for function i1___lwdiv
 10778  0FDB                     i1___lwdiv:	
 10779                           
 10780                           ;incstack = 0
 10781                           ; Regs used in i1___lwdiv: [wreg+status,2+status,0]
 10782  0FDB  01F4               	clrf	i1___lwdiv@quotient
 10783  0FDC  01F5               	clrf	i1___lwdiv@quotient+1
 10784  0FDD  0870               	movf	i1___lwdiv@divisor,w
 10785  0FDE  0471               	iorwf	i1___lwdiv@divisor+1,w
 10786  0FDF  1903               	btfsc	3,2
 10787  0FE0  2FFB               	goto	i1l2654
 10788  0FE1  01F6               	clrf	i1___lwdiv@counter
 10789  0FE2                     L12:	
 10790  0FE2  0AF6               	incf	i1___lwdiv@counter,f
 10791  0FE3  1BF1               	btfsc	i1___lwdiv@divisor+1,7
 10792  0FE4  2FE8               	goto	i1l2642
 10793  0FE5  35F0               	lslf	i1___lwdiv@divisor,f
 10794  0FE6  0DF1               	rlf	i1___lwdiv@divisor+1,f
 10795  0FE7  2FE2               	goto	L12
 10796  0FE8                     i1l2642:	
 10797  0FE8  35F4               	lslf	i1___lwdiv@quotient,f
 10798  0FE9  0DF5               	rlf	i1___lwdiv@quotient+1,f
 10799  0FEA  0871               	movf	i1___lwdiv@divisor+1,w
 10800  0FEB  0273               	subwf	i1___lwdiv@dividend+1,w
 10801  0FEC  1D03               	skipz
 10802  0FED  2FF0               	goto	u216_25
 10803  0FEE  0870               	movf	i1___lwdiv@divisor,w
 10804  0FEF  0272               	subwf	i1___lwdiv@dividend,w
 10805  0FF0                     u216_25:	
 10806  0FF0  1C03               	skipc
 10807  0FF1  2FF7               	goto	i1l2650
 10808  0FF2  0870               	movf	i1___lwdiv@divisor,w
 10809  0FF3  02F2               	subwf	i1___lwdiv@dividend,f
 10810  0FF4  0871               	movf	i1___lwdiv@divisor+1,w
 10811  0FF5  3BF3               	subwfb	i1___lwdiv@dividend+1,f
 10812  0FF6  1474               	bsf	i1___lwdiv@quotient,0
 10813  0FF7                     i1l2650:	
 10814  0FF7  36F1               	lsrf	i1___lwdiv@divisor+1,f
 10815  0FF8  0CF0               	rrf	i1___lwdiv@divisor,f
 10816  0FF9  0BF6               	decfsz	i1___lwdiv@counter,f
 10817  0FFA  2FE8               	goto	i1l2642
 10818  0FFB                     i1l2654:	
 10819  0FFB  0875               	movf	i1___lwdiv@quotient+1,w
 10820  0FFC  00F1               	movwf	?i1___lwdiv+1
 10821  0FFD  0874               	movf	i1___lwdiv@quotient,w
 10822  0FFE  00F0               	movwf	?i1___lwdiv
 10823  0FFF  0008               	return
 10824  1000                     __end_ofi1___lwdiv:	
 10825                           
 10826                           	psect	text53
 10827  07E0                     __ptext53:	
 10828 ;; *************** function _EUSART2_Transmit_ISR *****************
 10829 ;; Defined at:
 10830 ;;		line 172 in file "mcc_generated_files/eusart2.c"
 10831 ;; Parameters:    Size  Location     Type
 10832 ;;		None
 10833 ;; Auto vars:     Size  Location     Type
 10834 ;;		None
 10835 ;; Return value:  Size  Location     Type
 10836 ;;                  1    wreg      void 
 10837 ;; Registers used:
 10838 ;;		wreg, fsr1l, fsr1h, status,2, status,0
 10839 ;; Tracked objects:
 10840 ;;		On entry : 3F/1
 10841 ;;		On exit  : 30/0
 10842 ;;		Unchanged: 0/0
 10843 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10844 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10845 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10846 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10847 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10848 ;;Total ram usage:        0 bytes
 10849 ;; Hardware stack levels used:    1
 10850 ;; This function calls:
 10851 ;;		Nothing
 10852 ;; This function is called by:
 10853 ;;		_EUSART2_Initialize
 10854 ;;		_INTERRUPT_InterruptManager
 10855 ;; This function uses a non-reentrant model
 10856 ;;
 10857                           
 10858                           
 10859                           ;psect for function _EUSART2_Transmit_ISR
 10860  07E0                     _EUSART2_Transmit_ISR:	
 10861                           
 10862                           ;eusart2.c: 176: if(sizeof(eusart2TxBuffer) > eusart2TxBufferRemaining)
 10863                           
 10864                           ;incstack = 0
 10865                           ; Regs used in _EUSART2_Transmit_ISR: [wreg+fsr1l+fsr1h+status,2+status,0]
 10866  07E0  3008               	movlw	8
 10867  07E1  0263               	subwf	_eusart2TxBufferRemaining^(0+128),w
 10868  07E2  1803               	skipnc
 10869  07E3  2FF3               	goto	i1l378
 10870                           
 10871                           ;eusart2.c: 177: {
 10872                           ;eusart2.c: 178: TX2REG = eusart2TxBuffer[eusart2TxTail++];
 10873  07E4  0853               	movf	_eusart2TxTail^(0+128),w
 10874  07E5  3EB2               	addlw	(low (_eusart2TxBuffer| 0))& (0+255)
 10875  07E6  0086               	movwf	6
 10876  07E7  0187               	clrf	7
 10877  07E8  0801               	movf	1,w
 10878  07E9  0154               	movlb	20	; select bank20
 10879  07EA  009A               	movwf	26	;volatile
 10880  07EB  0141               	movlb	1	; select bank1
 10881  07EC  0AD3               	incf	_eusart2TxTail^(0+128),f	;volatile
 10882                           
 10883                           ;eusart2.c: 179: if(sizeof(eusart2TxBuffer) <= eusart2TxTail)
 10884  07ED  3008               	movlw	8
 10885  07EE  0253               	subwf	_eusart2TxTail^(0+128),w
 10886  07EF  1803               	btfsc	3,0
 10887                           
 10888                           ;eusart2.c: 180: {
 10889                           ;eusart2.c: 181: eusart2TxTail = 0;
 10890  07F0  01D3               	clrf	_eusart2TxTail^(0+128)	;volatile
 10891                           
 10892                           ;eusart2.c: 182: }
 10893                           ;eusart2.c: 183: eusart2TxBufferRemaining++;
 10894  07F1  0AE3               	incf	_eusart2TxBufferRemaining^(0+128),f	;volatile
 10895                           
 10896                           ;eusart2.c: 184: }
 10897  07F2  0008               	return
 10898  07F3                     i1l378:	
 10899                           
 10900                           ;eusart2.c: 185: else
 10901                           ;eusart2.c: 186: {
 10902                           ;eusart2.c: 187: PIE3bits.TX2IE = 0;
 10903  07F3  014E               	movlb	14	; select bank14
 10904  07F4  1319               	bcf	25,6	;volatile
 10905  07F5  0008               	return
 10906  07F6                     __end_of_EUSART2_Transmit_ISR:	
 10907                           
 10908                           	psect	text54
 10909  0E5E                     __ptext54:	
 10910 ;; *************** function _EUSART2_Receive_ISR *****************
 10911 ;; Defined at:
 10912 ;;		line 191 in file "mcc_generated_files/eusart2.c"
 10913 ;; Parameters:    Size  Location     Type
 10914 ;;		None
 10915 ;; Auto vars:     Size  Location     Type
 10916 ;;		None
 10917 ;; Return value:  Size  Location     Type
 10918 ;;                  1    wreg      void 
 10919 ;; Registers used:
 10920 ;;		wreg, fsr1l, fsr1h, status,2, status,0
 10921 ;; Tracked objects:
 10922 ;;		On entry : 3F/1
 10923 ;;		On exit  : 3F/1
 10924 ;;		Unchanged: 0/0
 10925 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10926 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10927 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10928 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10929 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10930 ;;Total ram usage:        0 bytes
 10931 ;; Hardware stack levels used:    1
 10932 ;; This function calls:
 10933 ;;		Nothing
 10934 ;; This function is called by:
 10935 ;;		_EUSART2_Initialize
 10936 ;;		_INTERRUPT_InterruptManager
 10937 ;; This function uses a non-reentrant model
 10938 ;;
 10939                           
 10940                           
 10941                           ;psect for function _EUSART2_Receive_ISR
 10942  0E5E                     _EUSART2_Receive_ISR:	
 10943                           
 10944                           ;eusart2.c: 194: if(1 == RC2STAbits.OERR)
 10945                           
 10946                           ;incstack = 0
 10947                           ; Regs used in _EUSART2_Receive_ISR: [wreg+fsr1l+fsr1h+status,2+status,0]
 10948  0E5E  0154               	movlb	20	; select bank20
 10949  0E5F  1C9D               	btfss	29,1	;volatile
 10950  0E60  2E63               	goto	i1l3064
 10951                           
 10952                           ;eusart2.c: 195: {
 10953                           ;eusart2.c: 198: RC2STAbits.CREN = 0;
 10954  0E61  121D               	bcf	29,4	;volatile
 10955                           
 10956                           ;eusart2.c: 199: RC2STAbits.CREN = 1;
 10957  0E62  161D               	bsf	29,4	;volatile
 10958  0E63                     i1l3064:	
 10959                           
 10960                           ;eusart2.c: 200: }
 10961                           ;eusart2.c: 203: eusart2RxBuffer[eusart2RxHead++] = RC2REG;
 10962  0E63  0141               	movlb	1	; select bank1
 10963  0E64  0852               	movf	_eusart2RxHead^(0+128),w
 10964  0E65  3EAA               	addlw	(low (_eusart2RxBuffer| 0))& (0+255)
 10965  0E66  0086               	movwf	6
 10966  0E67  0187               	clrf	7
 10967  0E68  0154               	movlb	20	; select bank20
 10968  0E69  0819               	movf	25,w	;volatile
 10969  0E6A  0081               	movwf	1
 10970  0E6B  0141               	movlb	1	; select bank1
 10971  0E6C  0AD2               	incf	_eusart2RxHead^(0+128),f	;volatile
 10972                           
 10973                           ;eusart2.c: 204: if(sizeof(eusart2RxBuffer) <= eusart2RxHead)
 10974  0E6D  3008               	movlw	8
 10975  0E6E  0252               	subwf	_eusart2RxHead^(0+128),w
 10976  0E6F  1803               	btfsc	3,0
 10977                           
 10978                           ;eusart2.c: 205: {
 10979                           ;eusart2.c: 206: eusart2RxHead = 0;
 10980  0E70  01D2               	clrf	_eusart2RxHead^(0+128)	;volatile
 10981                           
 10982                           ;eusart2.c: 207: }
 10983                           ;eusart2.c: 208: eusart2RxCount++;
 10984  0E71  0AD0               	incf	_eusart2RxCount^(0+128),f	;volatile
 10985  0E72  0008               	return
 10986  0E73                     __end_of_EUSART2_Receive_ISR:	
 10987                           
 10988                           	psect	text55
 10989  0E88                     __ptext55:	
 10990 ;; *************** function _EUSART1_Transmit_ISR *****************
 10991 ;; Defined at:
 10992 ;;		line 181 in file "mcc_generated_files/eusart1.c"
 10993 ;; Parameters:    Size  Location     Type
 10994 ;;		None
 10995 ;; Auto vars:     Size  Location     Type
 10996 ;;		None
 10997 ;; Return value:  Size  Location     Type
 10998 ;;                  1    wreg      void 
 10999 ;; Registers used:
 11000 ;;		wreg, fsr1l, fsr1h, status,2, status,0
 11001 ;; Tracked objects:
 11002 ;;		On entry : 3F/1
 11003 ;;		On exit  : 30/0
 11004 ;;		Unchanged: 0/0
 11005 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11006 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11007 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11008 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11009 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11010 ;;Total ram usage:        0 bytes
 11011 ;; Hardware stack levels used:    1
 11012 ;; This function calls:
 11013 ;;		Nothing
 11014 ;; This function is called by:
 11015 ;;		_EUSART1_Initialize
 11016 ;;		_INTERRUPT_InterruptManager
 11017 ;; This function uses a non-reentrant model
 11018 ;;
 11019                           
 11020                           
 11021                           ;psect for function _EUSART1_Transmit_ISR
 11022  0E88                     _EUSART1_Transmit_ISR:	
 11023                           
 11024                           ;eusart1.c: 185: if(sizeof(eusart1TxBuffer) > eusart1TxBufferRemaining)
 11025                           
 11026                           ;incstack = 0
 11027                           ; Regs used in _EUSART1_Transmit_ISR: [wreg+fsr1l+fsr1h+status,2+status,0]
 11028  0E88  3008               	movlw	8
 11029  0E89  0264               	subwf	_eusart1TxBufferRemaining^(0+128),w
 11030  0E8A  1803               	skipnc
 11031  0E8B  2E9B               	goto	i1l149
 11032                           
 11033                           ;eusart1.c: 186: {
 11034                           ;eusart1.c: 187: TX1REG = eusart1TxBuffer[eusart1TxTail++];
 11035  0E8C  0858               	movf	_eusart1TxTail^(0+128),w
 11036  0E8D  3EC2               	addlw	(low (_eusart1TxBuffer| 0))& (0+255)
 11037  0E8E  0086               	movwf	6
 11038  0E8F  0187               	clrf	7
 11039  0E90  0801               	movf	1,w
 11040  0E91  0142               	movlb	2	; select bank2
 11041  0E92  009A               	movwf	26	;volatile
 11042  0E93  0141               	movlb	1	; select bank1
 11043  0E94  0AD8               	incf	_eusart1TxTail^(0+128),f	;volatile
 11044                           
 11045                           ;eusart1.c: 188: if(sizeof(eusart1TxBuffer) <= eusart1TxTail)
 11046  0E95  3008               	movlw	8
 11047  0E96  0258               	subwf	_eusart1TxTail^(0+128),w
 11048  0E97  1803               	btfsc	3,0
 11049                           
 11050                           ;eusart1.c: 189: {
 11051                           ;eusart1.c: 190: eusart1TxTail = 0;
 11052  0E98  01D8               	clrf	_eusart1TxTail^(0+128)	;volatile
 11053                           
 11054                           ;eusart1.c: 191: }
 11055                           ;eusart1.c: 192: eusart1TxBufferRemaining++;
 11056  0E99  0AE4               	incf	_eusart1TxBufferRemaining^(0+128),f	;volatile
 11057                           
 11058                           ;eusart1.c: 193: }
 11059  0E9A  0008               	return
 11060  0E9B                     i1l149:	
 11061                           
 11062                           ;eusart1.c: 194: else
 11063                           ;eusart1.c: 195: {
 11064                           ;eusart1.c: 196: PIE3bits.TX1IE = 0;
 11065  0E9B  014E               	movlb	14	; select bank14
 11066  0E9C  1219               	bcf	25,4	;volatile
 11067  0E9D  0008               	return
 11068  0E9E                     __end_of_EUSART1_Transmit_ISR:	
 11069                           
 11070                           	psect	text56
 11071  0E49                     __ptext56:	
 11072 ;; *************** function _EUSART1_Receive_ISR *****************
 11073 ;; Defined at:
 11074 ;;		line 200 in file "mcc_generated_files/eusart1.c"
 11075 ;; Parameters:    Size  Location     Type
 11076 ;;		None
 11077 ;; Auto vars:     Size  Location     Type
 11078 ;;		None
 11079 ;; Return value:  Size  Location     Type
 11080 ;;                  1    wreg      void 
 11081 ;; Registers used:
 11082 ;;		wreg, fsr1l, fsr1h, status,2, status,0
 11083 ;; Tracked objects:
 11084 ;;		On entry : 3F/1
 11085 ;;		On exit  : 3F/1
 11086 ;;		Unchanged: 0/0
 11087 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11088 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11089 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11090 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11091 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11092 ;;Total ram usage:        0 bytes
 11093 ;; Hardware stack levels used:    1
 11094 ;; This function calls:
 11095 ;;		Nothing
 11096 ;; This function is called by:
 11097 ;;		_EUSART1_Initialize
 11098 ;;		_INTERRUPT_InterruptManager
 11099 ;; This function uses a non-reentrant model
 11100 ;;
 11101                           
 11102                           
 11103                           ;psect for function _EUSART1_Receive_ISR
 11104  0E49                     _EUSART1_Receive_ISR:	
 11105                           
 11106                           ;eusart1.c: 203: if(1 == RC1STAbits.OERR)
 11107                           
 11108                           ;incstack = 0
 11109                           ; Regs used in _EUSART1_Receive_ISR: [wreg+fsr1l+fsr1h+status,2+status,0]
 11110  0E49  0142               	movlb	2	; select bank2
 11111  0E4A  1C9D               	btfss	29,1	;volatile
 11112  0E4B  2E4E               	goto	i1l3000
 11113                           
 11114                           ;eusart1.c: 204: {
 11115                           ;eusart1.c: 207: RC1STAbits.CREN = 0;
 11116  0E4C  121D               	bcf	29,4	;volatile
 11117                           
 11118                           ;eusart1.c: 208: RC1STAbits.CREN = 1;
 11119  0E4D  161D               	bsf	29,4	;volatile
 11120  0E4E                     i1l3000:	
 11121                           
 11122                           ;eusart1.c: 209: }
 11123                           ;eusart1.c: 212: eusart1RxBuffer[eusart1RxHead++] = RC1REG;
 11124  0E4E  0141               	movlb	1	; select bank1
 11125  0E4F  0857               	movf	_eusart1RxHead^(0+128),w
 11126  0E50  3EBA               	addlw	(low (_eusart1RxBuffer| 0))& (0+255)
 11127  0E51  0086               	movwf	6
 11128  0E52  0187               	clrf	7
 11129  0E53  0142               	movlb	2	; select bank2
 11130  0E54  0819               	movf	25,w	;volatile
 11131  0E55  0081               	movwf	1
 11132  0E56  0141               	movlb	1	; select bank1
 11133  0E57  0AD7               	incf	_eusart1RxHead^(0+128),f	;volatile
 11134                           
 11135                           ;eusart1.c: 213: if(sizeof(eusart1RxBuffer) <= eusart1RxHead)
 11136  0E58  3008               	movlw	8
 11137  0E59  0257               	subwf	_eusart1RxHead^(0+128),w
 11138  0E5A  1803               	btfsc	3,0
 11139                           
 11140                           ;eusart1.c: 214: {
 11141                           ;eusart1.c: 215: eusart1RxHead = 0;
 11142  0E5B  01D7               	clrf	_eusart1RxHead^(0+128)	;volatile
 11143                           
 11144                           ;eusart1.c: 216: }
 11145                           ;eusart1.c: 217: eusart1RxCount++;
 11146  0E5C  0AD5               	incf	_eusart1RxCount^(0+128),f	;volatile
 11147  0E5D  0008               	return
 11148  0E5E                     __end_of_EUSART1_Receive_ISR:	
 11149  007E                     btemp	set	126	;btemp
 11150  007E                     int$flags	set	126
 11151  007E                     wtemp0	set	126


Data Sizes:
    Strings     115
    Constant    10
    Data        6
    BSS         108
    Persistent  12
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14     13      14
    BANK0            80     45      51
    BANK1            80      0      69
    BANK2            80     29      79
    BANK3            80      0       0
    BANK4            80      0       0
    BANK5            80      0       0
    BANK6            80      0       0
    BANK7            80      0       0
    BANK8            80      0       0
    BANK9            80      0       0
    BANK10           80      0       0
    BANK11           28      0       0
    BANK12            0      0       0

Pointer List with Targets:

    sprintf@f	PTR const unsigned char  size(2) Largest target is 8
		 -> STR_2(CODE[5]), STR_1(CODE[8]), 

    sprintf@ap	PTR void [1] size(1) Largest target is 2
		 -> ?_sprintf(BANK0[2]), ?_printf(BANK0[2]), 

    sprintf@wh	PTR unsigned char  size(1) Largest target is 10
		 -> main@send_data(BANK2[10]), 

    pb.func	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> Absolute function(), putch(), 

    pb.ptr	PTR unsigned char  size(1) Largest target is 10
		 -> NULL(NULL[0]), main@send_data(BANK2[10]), 

    printf@f	PTR const unsigned char  size(2) Largest target is 51
		 -> STR_6(CODE[51]), STR_5(CODE[51]), STR_4(CODE[51]), STR_3(CODE[51]), 

    printf@ap	PTR void [1] size(1) Largest target is 2
		 -> ?_sprintf(BANK0[2]), ?_printf(BANK0[2]), 

    pb.func	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> Absolute function(), putch(), 

    pb.ptr	PTR unsigned char  size(1) Largest target is 10
		 -> NULL(NULL[0]), main@send_data(BANK2[10]), 

    memset@p1	PTR void  size(1) Largest target is 10
		 -> main@send_data(BANK2[10]), 

    memset@p	PTR unsigned char  size(1) Largest target is 10
		 -> main@send_data(BANK2[10]), 

    _doprnt@ap	PTR PTR void  size(1) Largest target is 1
		 -> sprintf@ap(BANK0[1]), printf@ap(BANK0[1]), 

    _doprnt@f	PTR const unsigned char  size(2) Largest target is 51
		 -> STR_6(CODE[51]), STR_5(CODE[51]), STR_4(CODE[51]), STR_3(CODE[51]), 
		 -> STR_2(CODE[5]), STR_1(CODE[8]), 

    S1158__prbuf$func	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> Absolute function(), putch(), 

    _doprnt@pb.func	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> Absolute function(), putch(), 

    S1158__prbuf$ptr	PTR unsigned char  size(1) Largest target is 10
		 -> NULL(NULL[0]), main@send_data(BANK2[10]), 

    _doprnt@pb.ptr	PTR unsigned char  size(1) Largest target is 10
		 -> NULL(NULL[0]), main@send_data(BANK2[10]), 

    _doprnt@pb	PTR struct __prbuf size(1) Largest target is 4
		 -> sprintf@pb(BANK0[3]), printf@pb(BANK0[3]), 

    sp__memset	PTR void  size(1) Largest target is 10
		 -> main@send_data(BANK2[10]), 

    TMR2_SetInterruptHandler@InterruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> TMR2_EMG_InterruptHandler(), TMR2_DefaultInterruptHandler(), 

    TMR2_InterruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> TMR2_EMG_InterruptHandler(), Absolute function(), TMR2_DefaultInterruptHandler(), 

    EUSART2_SetRxInterruptHandler@interruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> EUSART2_Receive_ISR(), 

    EUSART2_SetTxInterruptHandler@interruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> EUSART2_Transmit_ISR(), 

    EUSART2_RxDefaultInterruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> Absolute function(), EUSART2_Receive_ISR(), 

    EUSART2_TxDefaultInterruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> Absolute function(), EUSART2_Transmit_ISR(), 

    EUSART1_SetRxInterruptHandler@interruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> EUSART1_Receive_ISR(), 

    EUSART1_RxDefaultInterruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> Absolute function(), EUSART1_Receive_ISR(), 

    EUSART1_SetTxInterruptHandler@interruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> EUSART1_Transmit_ISR(), 

    EUSART1_TxDefaultInterruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> Absolute function(), EUSART1_Transmit_ISR(), 


Critical Paths under _main in COMMON

    None.

Critical Paths under _INTERRUPT_InterruptManager in COMMON

    _TMR2_EMG_InterruptHandler->_sbuf_insert
    _sbuf_insert->i1___lwdiv

Critical Paths under _main in BANK0

    _main->___fltol
    _sprintf->__doprnt
    _sbuf_remove->___awmod
    _printf->__doprnt
    __doprnt->___lwmod
    _putch->_EUSART1_Write
    ___lwmod->___lwdiv
    _get_neutral_peaktopeak->_pkdata_insert
    _pkdata_remove->___awmod
    _pkdata_insert->___awmod
    _get_moving_average->___xxtofl
    _madata_remove->___awmod
    _madata_insert->___awmod
    ___xxtofl->___lwdiv
    ___fltol->_get_moving_average
    _TMR2_Initialize->_TMR2_SetInterruptHandler
    _EUSART2_Initialize->_EUSART2_SetRxInterruptHandler
    _EUSART2_Initialize->_EUSART2_SetTxInterruptHandler
    _EUSART1_Initialize->_EUSART1_SetRxInterruptHandler
    _EUSART1_Initialize->_EUSART1_SetTxInterruptHandler

Critical Paths under _INTERRUPT_InterruptManager in BANK0

    _TMR2_ISR->_TMR2_EMG_InterruptHandler

Critical Paths under _main in BANK1

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK12

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                33    33      0   35318
                                             41 BANK0      4     4      0
                                              0 BANK2     29    29      0
                      _EUSART2_Write
                  _SYSTEM_Initialize
           _TMR2_SetInterruptHandler
                         _TMR2_Start
                            ___awmod
                            ___fladd
                            ___fltol
                                _abs
                 _get_moving_average
             _get_neutral_peaktopeak
                             _memset
                             _printf
                          _sbuf_peek
                        _sbuf_remove
                            _sprintf
 ---------------------------------------------------------------------------------
 (1) _sprintf                                              9     5      4    5825
                                             29 BANK0      9     5      4
                            __doprnt
 ---------------------------------------------------------------------------------
 (1) _sbuf_remove                                          2     2      0    2020
                            ___awmod
                       _sbuf_isempty
 ---------------------------------------------------------------------------------
 (2) _sbuf_isempty                                         0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _sbuf_peek                                            6     4      2       0
                                              2 BANK0      6     4      2
 ---------------------------------------------------------------------------------
 (1) _printf                                               6     4      2    5743
                                             29 BANK0      6     4      2
                            __doprnt
 ---------------------------------------------------------------------------------
 (2) __doprnt                                             23    20      3    4572
                                             14 BANK0     15    12      3
                   Absolute function *
                            ___lwdiv
                            ___lwmod
                              _putch *
 ---------------------------------------------------------------------------------
 (3) _putch                                                1     0      1     288
                                              3 BANK0      1     0      1
                      _EUSART1_Write
 ---------------------------------------------------------------------------------
 (4) _EUSART1_Write                                        1     1      0      62
                                              2 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (3) ___lwmod                                              5     1      4     412
                                              9 BANK0      5     1      4
                            ___lwdiv (ARG)
 ---------------------------------------------------------------------------------
 (7) Absolute function(Fake)                               1     0      1       0
 ---------------------------------------------------------------------------------
 (1) _memset                                               6     2      4     353
                                              2 BANK0      6     2      4
 ---------------------------------------------------------------------------------
 (1) _get_neutral_peaktopeak                              13    11      2    6667
                                             10 BANK0     13    11      2
                            ___awmod
                      _pkdata_insert
                      _pkdata_isfull
                      _pkdata_remove
 ---------------------------------------------------------------------------------
 (2) _pkdata_remove                                        2     2      0    2020
                            ___awmod
                     _pkdata_isempty
 ---------------------------------------------------------------------------------
 (3) _pkdata_isempty                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _pkdata_insert                                        2     0      2    2141
                                              8 BANK0      2     0      2
                            ___awmod
                      _pkdata_isfull
 ---------------------------------------------------------------------------------
 (2) _pkdata_isfull                                        4     4      0       0
                                              2 BANK0      4     4      0
 ---------------------------------------------------------------------------------
 (1) _get_moving_average                                   8     4      4    5590
                                             23 BANK0      8     4      4
                            ___lwdiv
                           ___xxtofl
                                _abs (ARG)
                      _madata_insert
                      _madata_isfull
                      _madata_remove
 ---------------------------------------------------------------------------------
 (2) _madata_remove                                        2     2      0    2020
                            ___awmod
                     _madata_isempty
 ---------------------------------------------------------------------------------
 (3) _madata_isempty                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _madata_insert                                        2     0      2    2141
                                              8 BANK0      2     0      2
                            ___awmod
                      _madata_isfull
 ---------------------------------------------------------------------------------
 (2) _madata_isfull                                        4     4      0       0
                                              2 BANK0      4     4      0
 ---------------------------------------------------------------------------------
 (2) ___awmod                                              6     2      4    2020
                                              2 BANK0      6     2      4
 ---------------------------------------------------------------------------------
 (2) ___xxtofl                                            14    10      4     566
                                              9 BANK0     14    10      4
                            ___lwdiv (ARG)
 ---------------------------------------------------------------------------------
 (3) ___lwdiv                                              7     3      4     711
                                              2 BANK0      7     3      4
 ---------------------------------------------------------------------------------
 (1) _abs                                                  4     2      2     214
                                              2 BANK0      4     2      2
 ---------------------------------------------------------------------------------
 (1) ___fltol                                             10     6      4     427
                                             31 BANK0     10     6      4
                                _abs (ARG)
                 _get_moving_average (ARG)
 ---------------------------------------------------------------------------------
 (1) ___fladd                                             20    12      8    3237
                                              2 BANK0     20    12      8
 ---------------------------------------------------------------------------------
 (1) _TMR2_Start                                           0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _SYSTEM_Initialize                                    0     0      0     695
                     _ADC_Initialize
                 _EUSART1_Initialize
                 _EUSART2_Initialize
              _OSCILLATOR_Initialize
             _PIN_MANAGER_Initialize
                     _PMD_Initialize
                    _TMR2_Initialize
 ---------------------------------------------------------------------------------
 (2) _TMR2_Initialize                                      0     0      0     211
           _TMR2_SetInterruptHandler
 ---------------------------------------------------------------------------------
 (1) _TMR2_SetInterruptHandler                             2     0      2     211
                                              2 BANK0      2     0      2
 ---------------------------------------------------------------------------------
 (2) _PMD_Initialize                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _PIN_MANAGER_Initialize                               0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _OSCILLATOR_Initialize                                0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _EUSART2_Initialize                                   0     0      0     242
      _EUSART2_SetRxInterruptHandler
      _EUSART2_SetTxInterruptHandler
 ---------------------------------------------------------------------------------
 (3) _EUSART2_SetTxInterruptHandler                        2     0      2     121
                                              2 BANK0      2     0      2
 ---------------------------------------------------------------------------------
 (3) _EUSART2_SetRxInterruptHandler                        2     0      2     121
                                              2 BANK0      2     0      2
 ---------------------------------------------------------------------------------
 (2) _EUSART1_Initialize                                   0     0      0     242
      _EUSART1_SetRxInterruptHandler
      _EUSART1_SetTxInterruptHandler
 ---------------------------------------------------------------------------------
 (3) _EUSART1_SetTxInterruptHandler                        2     0      2     121
                                              2 BANK0      2     0      2
 ---------------------------------------------------------------------------------
 (3) _EUSART1_SetRxInterruptHandler                        2     0      2     121
                                              2 BANK0      2     0      2
 ---------------------------------------------------------------------------------
 (2) _ADC_Initialize                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _EUSART2_Write                                        1     1      0      62
                                              2 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 7
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (5) _INTERRUPT_InterruptManager                           0     0      0     727
                   Absolute function *
                _EUSART1_Receive_ISR *
               _EUSART1_Transmit_ISR *
                _EUSART2_Receive_ISR *
               _EUSART2_Transmit_ISR *
                           _TMR2_ISR
 ---------------------------------------------------------------------------------
 (6) _TMR2_ISR                                             0     0      0     727
                   Absolute function *
       _TMR2_DefaultInterruptHandler *
          _TMR2_EMG_InterruptHandler *
 ---------------------------------------------------------------------------------
 (7) _TMR2_EMG_InterruptHandler                            2     2      0     727
                                              0 BANK0      2     2      0
            _ADC_GetConversionResult
                  _ADC_SelectChannel
                _ADC_StartConversion
                        _sbuf_insert
                          i1___lwdiv
 ---------------------------------------------------------------------------------
 (8) i1___lwdiv                                            7     3      4     214
                                              0 COMMON     7     3      4
 ---------------------------------------------------------------------------------
 (8) _sbuf_insert                                          6     4      2     468
                                              7 COMMON     6     4      2
                        _sbuf_isfull
                          i1___awmod
                          i1___lwdiv (ARG)
 ---------------------------------------------------------------------------------
 (9) i1___awmod                                            6     2      4     370
                                              0 COMMON     6     2      4
 ---------------------------------------------------------------------------------
 (9) _sbuf_isfull                                          4     4      0       0
                                              0 COMMON     4     4      0
 ---------------------------------------------------------------------------------
 (8) _ADC_StartConversion                                  0     0      0       0
 ---------------------------------------------------------------------------------
 (8) _ADC_SelectChannel                                    2     2      0      22
                                              0 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 (8) _ADC_GetConversionResult                              2     0      2       0
                                              0 COMMON     2     0      2
 ---------------------------------------------------------------------------------
 (7) _TMR2_DefaultInterruptHandler                         0     0      0       0
 ---------------------------------------------------------------------------------
 (7) Absolute function(Fake)                               1     0      1       0
 ---------------------------------------------------------------------------------
 (6) _EUSART2_Transmit_ISR                                 0     0      0       0
 ---------------------------------------------------------------------------------
 (6) _EUSART2_Receive_ISR                                  0     0      0       0
 ---------------------------------------------------------------------------------
 (6) _EUSART1_Transmit_ISR                                 0     0      0       0
 ---------------------------------------------------------------------------------
 (6) _EUSART1_Receive_ISR                                  0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 9
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _EUSART2_Write
   _SYSTEM_Initialize
     _ADC_Initialize
     _EUSART1_Initialize
       _EUSART1_SetRxInterruptHandler
       _EUSART1_SetTxInterruptHandler
     _EUSART2_Initialize
       _EUSART2_SetRxInterruptHandler
       _EUSART2_SetTxInterruptHandler
     _OSCILLATOR_Initialize
     _PIN_MANAGER_Initialize
     _PMD_Initialize
     _TMR2_Initialize
       _TMR2_SetInterruptHandler
   _TMR2_SetInterruptHandler
   _TMR2_Start
   ___awmod
   ___fladd
   ___fltol
     _abs (ARG)
     _get_moving_average (ARG)
       ___lwdiv
       ___xxtofl
         ___lwdiv (ARG)
       _abs (ARG)
       _madata_insert (ARG)
         ___awmod
         _madata_isfull
       _madata_isfull (ARG)
       _madata_remove (ARG)
         ___awmod
         _madata_isempty
   _abs
   _get_moving_average
     ___lwdiv
     ___xxtofl
       ___lwdiv (ARG)
     _abs (ARG)
     _madata_insert (ARG)
       ___awmod
       _madata_isfull
     _madata_isfull (ARG)
     _madata_remove (ARG)
       ___awmod
       _madata_isempty
   _get_neutral_peaktopeak
     ___awmod
     _pkdata_insert
       ___awmod
       _pkdata_isfull
     _pkdata_isfull
     _pkdata_remove
       ___awmod
       _pkdata_isempty
   _memset
   _printf
     __doprnt
       Absolute function(Fake) *
       ___lwdiv *
       ___lwmod *
         ___lwdiv (ARG)
       _putch *
         _EUSART1_Write
   _sbuf_peek
   _sbuf_remove
     ___awmod
     _sbuf_isempty
   _sprintf
     __doprnt
       Absolute function(Fake) *
       ___lwdiv *
       ___lwmod *
         ___lwdiv (ARG)
       _putch *
         _EUSART1_Write

 _INTERRUPT_InterruptManager (ROOT)
   Absolute function(Fake) *
   _EUSART1_Receive_ISR *
   _EUSART1_Transmit_ISR *
   _EUSART2_Receive_ISR *
   _EUSART2_Transmit_ISR *
   _TMR2_ISR *
     Absolute function(Fake) *
     _TMR2_DefaultInterruptHandler *
     _TMR2_EMG_InterruptHandler *
       _ADC_GetConversionResult
       _ADC_SelectChannel
       _ADC_StartConversion
       _sbuf_insert
         _sbuf_isfull
         i1___awmod
         i1___lwdiv (ARG)
       i1___lwdiv

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             3F0      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
BITCOMMON            E      0       0       1        0.0%
BITSFR0              0      0       0       1        0.0%
SFR0                 0      0       0       1        0.0%
COMMON               E      D       E       2      100.0%
BITSFR1              0      0       0       2        0.0%
SFR1                 0      0       0       2        0.0%
BITSFR2              0      0       0       3        0.0%
SFR2                 0      0       0       3        0.0%
STACK                0      0       0       3        0.0%
BITSFR3              0      0       0       4        0.0%
SFR3                 0      0       0       4        0.0%
ABS                  0      0      D5       4        0.0%
BITBANK0            50      0       0       5        0.0%
BITSFR4              0      0       0       5        0.0%
SFR4                 0      0       0       5        0.0%
BANK0               50     2D      33       6       63.8%
BITSFR5              0      0       0       6        0.0%
SFR5                 0      0       0       6        0.0%
BITBANK1            50      0       0       7        0.0%
BITSFR6              0      0       0       7        0.0%
SFR6                 0      0       0       7        0.0%
BANK1               50      0      45       8       86.3%
BITSFR7              0      0       0       8        0.0%
SFR7                 0      0       0       8        0.0%
BITBANK2            50      0       0       9        0.0%
BITSFR8              0      0       0       9        0.0%
SFR8                 0      0       0       9        0.0%
BANK2               50     1D      4F      10       98.8%
BITSFR9              0      0       0      10        0.0%
SFR9                 0      0       0      10        0.0%
BITBANK3            50      0       0      11        0.0%
BITSFR10             0      0       0      11        0.0%
SFR10                0      0       0      11        0.0%
BANK3               50      0       0      12        0.0%
BITSFR11             0      0       0      12        0.0%
SFR11                0      0       0      12        0.0%
BITBANK4            50      0       0      13        0.0%
BITSFR12             0      0       0      13        0.0%
SFR12                0      0       0      13        0.0%
BANK4               50      0       0      14        0.0%
BITSFR13             0      0       0      14        0.0%
SFR13                0      0       0      14        0.0%
BITBANK5            50      0       0      15        0.0%
BITSFR14             0      0       0      15        0.0%
SFR14                0      0       0      15        0.0%
BANK5               50      0       0      16        0.0%
BITSFR15             0      0       0      16        0.0%
SFR15                0      0       0      16        0.0%
BITBANK6            50      0       0      17        0.0%
BITSFR16             0      0       0      17        0.0%
SFR16                0      0       0      17        0.0%
BANK6               50      0       0      18        0.0%
BITSFR17             0      0       0      18        0.0%
SFR17                0      0       0      18        0.0%
BITBANK7            50      0       0      19        0.0%
BITSFR18             0      0       0      19        0.0%
SFR18                0      0       0      19        0.0%
BANK7               50      0       0      20        0.0%
BITSFR19             0      0       0      20        0.0%
SFR19                0      0       0      20        0.0%
BITBANK8            50      0       0      21        0.0%
BITSFR20             0      0       0      21        0.0%
SFR20                0      0       0      21        0.0%
BANK8               50      0       0      22        0.0%
BITSFR21             0      0       0      22        0.0%
SFR21                0      0       0      22        0.0%
BITBANK9            50      0       0      23        0.0%
BITSFR22             0      0       0      23        0.0%
SFR22                0      0       0      23        0.0%
BANK9               50      0       0      24        0.0%
BITSFR23             0      0       0      24        0.0%
SFR23                0      0       0      24        0.0%
BITBANK10           50      0       0      25        0.0%
BITSFR24             0      0       0      25        0.0%
SFR24                0      0       0      25        0.0%
BANK10              50      0       0      26        0.0%
BITSFR25             0      0       0      26        0.0%
SFR25                0      0       0      26        0.0%
BITBANK11           50      0       0      27        0.0%
BITSFR26             0      0       0      27        0.0%
SFR26                0      0       0      27        0.0%
BANK11              1C      0       0      28        0.0%
BITSFR27             0      0       0      28        0.0%
SFR27                0      0       0      28        0.0%
BITBANK12           30      0       0      29        0.0%
BITSFR28             0      0       0      29        0.0%
SFR28                0      0       0      29        0.0%
BITSFR29             0      0       0      30        0.0%
SFR29                0      0       0      30        0.0%
BANK12               0      0       0      30        0.0%
BITSFR30             0      0       0      31        0.0%
SFR30                0      0       0      31        0.0%
DATA                 0      0      D5      31        0.0%
BITSFR31             0      0       0      32        0.0%
SFR31                0      0       0      32        0.0%
BITSFR32             0      0       0      33        0.0%
SFR32                0      0       0      33        0.0%
BITSFR33             0      0       0      34        0.0%
SFR33                0      0       0      34        0.0%
BITSFR34             0      0       0      35        0.0%
SFR34                0      0       0      35        0.0%
BITSFR35             0      0       0      36        0.0%
SFR35                0      0       0      36        0.0%
BITSFR36             0      0       0      37        0.0%
SFR36                0      0       0      37        0.0%
BITSFR37             0      0       0      38        0.0%
SFR37                0      0       0      38        0.0%
BITSFR38             0      0       0      39        0.0%
SFR38                0      0       0      39        0.0%
BITSFR39             0      0       0      40        0.0%
SFR39                0      0       0      40        0.0%
BITSFR40             0      0       0      41        0.0%
SFR40                0      0       0      41        0.0%
BITSFR41             0      0       0      42        0.0%
SFR41                0      0       0      42        0.0%
BITSFR42             0      0       0      43        0.0%
SFR42                0      0       0      43        0.0%
BITSFR43             0      0       0      44        0.0%
SFR43                0      0       0      44        0.0%
BITSFR44             0      0       0      45        0.0%
SFR44                0      0       0      45        0.0%
BITSFR45             0      0       0      46        0.0%
SFR45                0      0       0      46        0.0%
BITSFR46             0      0       0      47        0.0%
SFR46                0      0       0      47        0.0%
BITSFR47             0      0       0      48        0.0%
SFR47                0      0       0      48        0.0%
BITSFR48             0      0       0      49        0.0%
SFR48                0      0       0      49        0.0%
BITSFR49             0      0       0      50        0.0%
SFR49                0      0       0      50        0.0%
BITSFR50             0      0       0      51        0.0%
SFR50                0      0       0      51        0.0%
BITSFR51             0      0       0      52        0.0%
SFR51                0      0       0      52        0.0%
BITSFR52             0      0       0      53        0.0%
SFR52                0      0       0      53        0.0%
BITSFR53             0      0       0      54        0.0%
SFR53                0      0       0      54        0.0%
BITSFR54             0      0       0      55        0.0%
SFR54                0      0       0      55        0.0%
BITSFR55             0      0       0      56        0.0%
SFR55                0      0       0      56        0.0%
BITSFR56             0      0       0      57        0.0%
SFR56                0      0       0      57        0.0%
BITSFR57             0      0       0      58        0.0%
SFR57                0      0       0      58        0.0%
BITSFR58             0      0       0      59        0.0%
SFR58                0      0       0      59        0.0%
BITSFR59             0      0       0      60        0.0%
SFR59                0      0       0      60        0.0%
BITSFR60             0      0       0      61        0.0%
SFR60                0      0       0      61        0.0%
BITSFR61             0      0       0      62        0.0%
SFR61                0      0       0      62        0.0%
BITSFR62             0      0       0      63        0.0%
SFR62                0      0       0      63        0.0%
BITSFR63             0      0       0      64        0.0%
SFR63                0      0       0      64        0.0%


Microchip Technology PIC Macro Assembler V1.44 build -154322312 
Symbol Table                                                                                   Mon Aug 13 15:44:07 2018

             __end_of_TMR2_SetInterruptHandler 0237                       _eusart1TxBufferRemaining 00E4  
                                            _i 00CE                                    __CFG_CP$OFF 0000  
                                           PL2 03E0                                             PL4 0648  
                                           PL6 0655                                             PL8 0661  
                               ?_madata_insert 0028                                 ?_madata_isfull 0070  
                               ?_madata_remove 0070                                            PL10 0759  
                                          PL20 0402                                            PL12 03EF  
                                          PL30 0F22                                            PL22 0765  
                                          PL14 03F9                                            PL40 07DB  
                                          PL32 0575                                            PL24 0669  
                                          PL16 075F                                            PL42 0410  
                                          PL34 040A                                            PL26 066F  
                                          PL18 056D                                            PL44 0415  
                                          PL36 069A                                            PL28 0675  
                                          PL38 057C                                    __CFG_LVP$ON 0000  
                                          l137 0EAD                                            l372 0201  
                                          l569 00AD                                            l587 01A2  
                                          l773 06DF                          __end_of_pkdata_insert 073F  
                        __end_of_pkdata_isfull 0726                                            _abs 02F0  
                        __end_of_pkdata_remove 0756                         _get_neutral_peaktopeak 06A0  
                      __size_of_PMD_Initialize 0008                                   ___awmod@sign 0027  
                              _TMR2_Initialize 0291                                   __CFG_BORV$LO 0000  
                                          wreg 0009                                ?_madata_isempty 0070  
                                __CFG_BBEN$OFF 0000             __size_of_TMR2_EMG_InterruptHandler 001C  
                                 __CFG_ZCD$OFF 0000                     ?_TMR2_EMG_InterruptHandler 0070  
                                 ___fltol@exp1 0048                                           l1112 0567  
                                         ?_abs 0022                                           l1070 0462  
                                         l1206 07B6                                           l1064 0449  
                                         l1065 0447                                           l1075 04C4  
                                         l1092 0524                                           l1077 04B6  
                                         l1069 0464                                           l1086 04DB  
                                         l1078 04BC                                           l1087 04DC  
                                         l1079 04BD                                           l4000 07BF  
                                         l1097 0539                                           l1193 0788  
                                         l4008 07D2                                           l4120 0E41  
                                         l4034 01F5                                           l4114 035B  
                                         l5010 05A2                                           l4124 0E38  
                                         l4310 052E                                           l5030 05C6  
                                         l5006 0599                                           l4048 0211  
                                         l4304 051C                                           l4232 0470  
                                         l5024 05C4                                           l5016 05AF  
                                         l4330 0548                                           l4322 053D  
                                         l4170 02CD                                           l4154 02B2  
                                         l3530 0EA1                                           l5050 05F0  
                                         l4324 053F                                           l4180 02D8  
                                         l4156 02B7                                           l4092 06FB  
                                         l4076 06AD                                           l5060 0617  
                                         l5052 05F3                                           l4148 068D  
                                         l4334 054A                                           l4318 053A  
                                         l4262 048E                                           l4182 02E1  
                                         l4174 02D4                                           l3622 0308  
                                         l5046 05E8                                           l5038 05D8  
                                         l5230 01AA                                           l5206 0178  
                                         l4088 06F1                                           l3544 0EBC  
                                         l5064 061F                                           l5240 01DF  
                                         l4354 0563                                           l4346 0557  
                                         l4282 04CA                                           l3634 031A  
                                         l3642 032A                                           l3626 030F  
                                         l5066 0584                                           l5170 00BC  
                                         l5154 008F                                           l5146 007A  
                                         l4276 04BF                                           l3660 038E  
                                         l5068 0623                                           l5236 01B4  
                                         l5180 00E7                                           l4358 0568  
                                         l4294 04DF                                           l3646 0332  
                                         l3638 0326                                           l3830 03CD  
                                         l5166 00A0                                           l3672 03A1  
                                         l5192 0152                                           l5194 015F  
                                         l3668 039D                                           l3860 072E  
                                         l3684 0633                                           l3692 0643  
                                         l3790 0EBF                                           l3846 0428  
                                         l3688 063F                                           l3876 074D  
                                         l3990 07A6                                           l3982 0795  
                                         l3974 0780                                           l3984 079D  
                                         l3994 07B4                                           l3978 0793  
                                         l3996 07AB                                           STR_1 1070  
                                         STR_2 1078                                           STR_3 1000  
                                         STR_4 1033                                           STR_5 1000  
                                         STR_6 1033                                           _LATA 0018  
                                         _LATB 0019                                           _LATC 001A  
                                         _LATD 001B                                           _LATE 001C  
                                         _T2PR 028D                                  _ma_window_sum 00CA  
                                         u4330 04AD                                           u4075 06D8  
                                         u4340 04AE                                           u4325 04A2  
                                         u4165 02BA                                           u4085 06EA  
                                         u4095 06CC                                           u4433 04F1  
                                         u3625 0320                                           u3545 071C  
                                         u3715 0639                                           _PMD0 0796  
                                         u6117 0089                                           _PMD1 0797  
                                         _PMD2 0798                                           u3495 03BB  
                                         u6127 00B6                                           _PMD3 0799  
                                         _PMD4 079A                                           _PMD5 079B  
                                         u3675 0396                                           u5745 05D1  
                                         u5985 00D4                                           u5995 00F3  
                                         _WPUA 1F39                                           _WPUB 1F44  
                                         _WPUC 1F4F                                           _WPUD 1F5A  
                                         _WPUE 1F65                          ??_EUSART2_Receive_ISR 0070  
                                _EUSART1_Write 0EA0                         __end_of_pkdata_isempty 0759  
                                __CFG_FCMEN$ON 0000                                  _EUSART2_Write 01F3  
                                         abs@a 0022                                           _main 0065  
                                         fsr0h 0005                                           fsr1h 0007  
                                         indf0 0000                                           fsr0l 0004  
                                         indf1 0001                                           fsr1l 0006  
                                         btemp 007E                                  __CFG_BOREN$ON 0000  
                  __size_of_get_moving_average 004A                                           start 0038  
                 __end_of_EUSART2_Transmit_ISR 07F6                                  __CFG_CSWEN$ON 0000  
                                __CFG_MCLRE$ON 0000                                          ??_abs 0024  
               __size_of_OSCILLATOR_Initialize 000A                  __end_of_OSCILLATOR_Initialize 0256  
                                ___fltol@sign1 0047                                __end_of___fladd 056D  
                                        ?_main 0070                                  __CFG_WDTE$OFF 0000  
                              __end_of___awmod 0337                                __end_of___fltol 02F0  
                                        _T2CON 028E                                          _T2HLT 028F  
                              __end_of___lwdiv 03A6                                          _T2TMR 028C  
                                        _T2RST 0291                                          i1l149 0E9B  
                              __end_of___lwmod 0648                                          i1l290 001D  
                                        i1l292 0027                                          i1l294 0031  
                                        i1l288 0013                                          i1l378 07F3  
                                        i1l299 0036                                          _OSCEN 0891  
                              __end_of__doprnt 0628                                          _TRISA 0012  
                                        _TRISB 0013                                          _TRISC 0014  
                                        _TRISD 0015                                          _TRISE 0016  
             __size_of_ADC_GetConversionResult 0008                           _EUSART1_Transmit_ISR 0E88  
                             __end_of_TMR2_ISR 0E2A                                  __CFG_WRTB$OFF 0000  
                                __CFG_WRTC$OFF 0000                                 i1___awmod@sign 0075  
                              __end_of_dpowers 1070                                    ?_TMR2_Start 0070  
                                        _putch 0E9E                                          main@j 016D  
                               ?_EUSART1_Write 0070              __end_of_TMR2_EMG_InterruptHandler 0F45  
                               ?_EUSART2_Write 0070                                          pclath 000A  
                              ?_pkdata_isempty 0070                                          status 0003  
                                        wtemp0 007E                                __end_of_sprintf 022F  
                           __size_ofi1___awmod 0039                             __size_ofi1___lwdiv 0025  
        __end_of_EUSART2_SetTxInterruptHandler 0EF0         __size_of_EUSART2_SetTxInterruptHandler 0008  
                _EUSART2_SetTxInterruptHandler 0EE8                                __initialization 003A  
                   __end_of_EUSART1_Initialize 0F12                                   __end_of_main 01E3  
                               __CFG_SAFEN$OFF 0000                                ??_madata_insert 002A  
                              ??_madata_isfull 0022                                ??_madata_remove 0028  
                      __end_of_TMR2_Initialize 02A6                    ?_INTERRUPT_InterruptManager 0070  
                                main@datapoint 0166                       _TMR2_SetInterruptHandler 022F  
                                       ??_main 0049                          ?_EUSART1_Transmit_ISR 0070  
                                main@flex_flag 016A                     __end_of_EUSART2_Initialize 0EE0  
                                       _ADCON0 009D                                         _ADCON1 009E  
                     _eusart2TxBufferRemaining 00E3                    get_moving_average@datapoint 0037  
                                       _ADRESH 009C                                         _ADRESL 009B  
                                       _ANSELA 1F38                                         ?_putch 0023  
                                       _ANSELB 1F43                                         _ANSELC 1F4E  
                                       _ANSELD 1F59                                         _ANSELE 1F64  
                           __CFG_RSTOSC$HFINT1 0000                                         _RC1REG 0119  
                                       _RC2REG 0A19                                         _RC1STA 011D  
                                       _RC2STA 0A1D                                         _RB6PPS 1F1E  
                                       i1l3000 0E4E                                         _ODCONA 1F3A  
                                       _ODCONB 1F45                                         _ODCONC 1F50  
                                       _RC6PPS 1F26                                         _ODCOND 1F5B  
                                       _ODCONE 1F66                                         i1l3064 0E63  
                                       i1l2440 0FBE                                         i1l2432 0FB3  
                                       i1l2452 0FD6                                         i1l2444 0FCA  
                                       i1l2428 0FAC                                         i1l2448 0FCE  
                                       i1l2650 0FF7                                         i1l2642 0FE8  
                                       i1l2478 0F5A                                         i1l2654 0FFB  
                                       i1l2488 0F63                                 __CFG_WDTCCS$SC 0000  
                                       u216_25 0FF0                                         u184_25 0FC4  
                                       u177_25 0F97                                   ?_sbuf_insert 0077  
                                       _OSCFRQ 0893                                   ?_sbuf_isfull 0070  
                                       _TX1REG 011A                                         _TX2REG 0A1A  
                                 ?_sbuf_remove 0070                                         _TX1STA 011E  
                                       _TX2STA 0A1E                               __end_of___xxtofl 07DB  
                               __CFG_PWRTE$OFF 0000              get_neutral_peaktopeak@lowest_peak 0034  
                                    ??___fladd 002A                                 __CFG_STVREN$ON 0000  
                                    ??___awmod 0026                                      ??___fltol 0043  
                                main@send_data 0152                                      ??___lwdiv 0026  
                                    ??___lwmod 002D                            __size_of_TMR2_Start 0003  
                                    ??__doprnt 0031                                         _memset 0E36  
                              ___awmod@divisor 0022                                         _sent_0 00CC  
                                       _sent_1 00CD                                   __doprnt@ccnt 0037  
                                 __doprnt@flag 0035                                ___awmod@counter 0026  
                                       _printf 01E3                                   __doprnt@prec 0036  
                                main@num_bytes 0168                              __end_ofi1___awmod 0FDB  
                               _PMD_Initialize 0289                              __end_ofi1___lwdiv 1000  
                         _EUSART2_Transmit_ISR 07E0                                ??_EUSART1_Write 0022  
                              ??_EUSART2_Write 0022       TMR2_SetInterruptHandler@InterruptHandler 0022  
                                    ??_sprintf 0041                                _eusart1RxBuffer 00BA  
                              _eusart1TxBuffer 00C2                                _eusart2RxBuffer 00AA  
                                 ___xxtofl@arg 0033                                   ___xxtofl@exp 0032  
                            _SYSTEM_Initialize 0237                                   ___xxtofl@val 0029  
                              _eusart2TxBuffer 00B2                        __end_of__initialization 0062  
                           ?_SYSTEM_Initialize 0070                                     ___fltol@f1 003F  
                 __size_of_ADC_StartConversion 0002                                 __pcstackCOMMON 0070  
                                 __pidataBANK0 0000                            ??_SYSTEM_Initialize 0024  
                                    ?_TMR2_ISR 0070                 ?_EUSART2_SetTxInterruptHandler 0022  
                                __end_of_putch 0EA0                               ?_TMR2_Initialize 0070  
                                   __end_ofPL2 03EF                                     __end_ofPL4 0655  
                                   __end_ofPL6 0661                                     __end_ofPL8 0669  
                      ?_get_neutral_peaktopeak 002A                         __end_of_PMD_Initialize 0291  
                             ??_madata_isempty 0022                         ??_EUSART1_Transmit_ISR 0070  
                      _ADC_GetConversionResult 0F45                           pkdata_insert@element 0028  
                        ?_EUSART2_Transmit_ISR 0070                    __end_of_EUSART1_Receive_ISR 0E5E  
                                   __doprnt@ap 0030                                     __doprnt@pb 003C  
                    __end_of_SYSTEM_Initialize 0244                                        ??_putch 0024  
                  ??_TMR2_EMG_InterruptHandler 007D                                  _eusart1RxHead 00D7  
                        main@neutral_datapoint 0160                                  _eusart2RxHead 00D2  
                                _eusart1TxHead 007D                                  _eusart1RxTail 00D6  
                                _eusart2TxHead 00D4                                     __pbssBANK1 00A0  
                                   __pbssBANK2 0120                                  _eusart1TxTail 00D8  
                                _eusart2RxTail 00D1              _EUSART1_TxDefaultInterruptHandler 00E1  
                                _eusart2TxTail 00D3                ??_EUSART1_SetRxInterruptHandler 0024  
               TMR2_EMG_InterruptHandler@adval 0020                                     __pmaintext 0065  
                              __CFG_PPS1WAY$ON 0000                                     ??_TMR2_ISR 007D  
                                   __pintentry 0004                 __end_of_get_neutral_peaktopeak 0708  
                                      ?_memset 0022                             __size_of_sbuf_peek 0015  
                                      ?_printf 003D                                ?_PMD_Initialize 0070  
                      __size_of_ADC_Initialize 0008                                      ?___xxtofl 0029  
                                      _SP1BRGH 011C                                        _SP1BRGL 011B  
                                      _SP2BRGH 0A1C                                        _SP2BRGL 0A1B  
                                      _OSCCON1 088D                                        _OSCCON3 088F  
                  __end_of_EUSART2_Receive_ISR 0E73                                  ?_sbuf_isempty 0070  
                                      _OSCSTAT 0890                                        _OSCTUNE 0892  
                             ??_pkdata_isempty 0022                                   ??_TMR2_Start 0022  
                   __end_of_get_moving_average 0381                           __size_of_sbuf_insert 002A  
                         __size_of_sbuf_isfull 001E                           __size_of_sbuf_remove 001B  
                       __size_of_pkdata_insert 0019                         __size_of_pkdata_isfull 001E  
                       __size_of_pkdata_remove 0017                     ??_TMR2_SetInterruptHandler 0024  
                                      ___fladd 0436                      _TMR2_EMG_InterruptHandler 0F29  
                                      ___awmod 02FE                                        ___fltol 02A9  
                                      ___lwdiv 0381                                        ___lwmod 0628  
                                      __doprnt 0581                      ??_ADC_GetConversionResult 0072  
                           __end_of_TMR2_Start 02A9                                __size_of_memset 0013  
                                      __ptext1 0214                                        __ptext2 067B  
                                      __ptext3 0696                                        __ptext4 0E73  
                                      __ptext5 01E3                                        __ptext6 0581  
                                      __ptext7 0E9E                                        __ptext8 0EA0  
                                      __ptext9 0628                                        _ma_data 0120  
                              __size_of_printf 0010                                        _ma_rear 004D  
                              __CFG_WRTAPP$OFF 0000                                        _dpowers 1066  
                            i1___lwdiv@divisor 0070                          _OSCILLATOR_Initialize 024C  
                       ??_EUSART2_Transmit_ISR 0070                                      _T2CONbits 028E  
                                 __size_of_abs 000E                                        _sb_data 238C  
                            i1___lwdiv@counter 0076                                     ??___xxtofl 002D  
                                      _pk_data 00A0                                        _sb_rear 0051  
                             ___awmod@dividend 0024                                        _pk_rear 004F  
                               ??_sbuf_isempty 0022                             _EUSART1_Initialize 0EF0  
                     ??_PIN_MANAGER_Initialize 0022                                __CFG_WRTSAF$OFF 0000  
                   __size_of_SYSTEM_Initialize 000D                                        _sprintf 0214  
                                      clrloop0 0E2B                           end_of_initialization 0062  
                          ?_EUSART1_Initialize 0070                              __end_of_sbuf_peek 0E88  
                                      memset@c 0022                                        memset@n 0024  
                                      memset@p 0027          __end_of_EUSART1_SetRxInterruptHandler 0F1A  
       __size_of_EUSART1_SetRxInterruptHandler 0008                  _EUSART1_SetRxInterruptHandler 0F12  
                           _EUSART2_Initialize 0EBF                                        printf@f 003D  
                         ??_EUSART1_Initialize 0024                          __CFG_WDTCPS$WDTCPS_31 0000  
                          ?_EUSART2_Initialize 0070                          __end_of_madata_insert 03E0  
                        __end_of_madata_isfull 03C5                          __end_of_madata_remove 0432  
                                    _PORTBbits 000D                                      _PORTCbits 000E  
                                  ___fladd@grs 0035                                  _pkdata_insert 0726  
                                _pkdata_isfull 0708                                  ___xxtofl@sign 0031  
                                _pkdata_remove 073F                            _ADC_StartConversion 0F58  
                           sbuf_insert@element 0077                                      i1___awmod 0FA2  
                                    i1___lwdiv 0FDB                            EUSART1_Write@txData 0022  
                             __CFG_FEXTOSC$OFF 0000                                     _start_flag 00CF  
                         ??_EUSART2_Initialize 0024                                     main@result 016B  
                         ?_ADC_StartConversion 0070                get_neutral_peaktopeak@datapoint 002A  
         __end_of_TMR2_DefaultInterruptHandler 07F7          __size_of_TMR2_DefaultInterruptHandler 0001  
                 _TMR2_DefaultInterruptHandler 07F6                              __size_of_TMR2_ISR 000C  
                               _ADC_Initialize 0244                         ?_OSCILLATOR_Initialize 0070  
                               __end_of_memset 0E49                                 ?_pkdata_insert 0028  
                               __end_of_printf 01F3                                 ?_pkdata_isfull 0070  
                            main@motor_started 0165                                 ?_pkdata_remove 0070  
                                  __end_ofPL10 075F                                    __end_ofPL20 040A  
                                  __end_ofPL12 03F9                                    __end_ofPL30 0F29  
                                  __end_ofPL22 076B                                    __end_ofPL14 0402  
                                  __end_ofPL40 07E0                                    __end_ofPL32 057C  
                                  __end_ofPL24 066F                                    __end_ofPL16 0765  
                                  __end_ofPL42 0415                                    __end_ofPL34 0410  
                                  __end_ofPL26 0675                                    __end_ofPL18 0575  
                                  __end_ofPL44 041A                                    __end_ofPL36 06A0  
                                  __end_ofPL28 067B                                    __end_ofPL38 0581  
                          start_initialization 003A                __size_of_PIN_MANAGER_Initialize 0033  
                                  __end_of_abs 02FE                                     ?i1___awmod 0070  
                                   ?i1___lwdiv 0070  EUSART2_SetRxInterruptHandler@interruptHandler 0022  
EUSART2_SetTxInterruptHandler@interruptHandler 0022  EUSART1_SetRxInterruptHandler@interruptHandler 0022  
EUSART1_SetTxInterruptHandler@interruptHandler 0022                                    putch@txData 0023  
                        __end_of_EUSART1_Write 0EBF                          __end_of_EUSART2_Write 0214  
                        ??_ADC_StartConversion 0070                               __CFG_LPBOREN$OFF 0000  
                         __end_of_sbuf_isempty 069A             get_neutral_peaktopeak@highest_peak 0032  
                             ??_PMD_Initialize 0022                 ?_EUSART1_SetRxInterruptHandler 0022  
                       __end_of_ADC_Initialize 024C                                    __doprnt@val 0039  
                                  __pdataBANK0 004D                             i1___awmod@dividend 0072  
                                     ??_memset 0026                  ?_TMR2_DefaultInterruptHandler 0070  
                                     ??_printf 003F                                 _eusart1RxCount 00D5  
                         madata_insert@element 0028                                      ___fladd@a 0026  
                                    ___fladd@b 0022                                 _eusart2RxCount 00D0  
                                  __pbssBIGRAM 238C                                    __pbssCOMMON 007D  
            _EUSART1_RxDefaultInterruptHandler 00DF                                      ___latbits 0002  
                __size_of_EUSART1_Transmit_ISR 0016                                  __pcstackBANK0 0020  
                                __pcstackBANK2 0152                       __size_of_TMR2_Initialize 0015  
                            __size_of___xxtofl 0070                            EUSART2_Write@txData 0022  
              ??_EUSART1_SetTxInterruptHandler 0024                ??_EUSART2_SetRxInterruptHandler 0024  
                 __size_of_EUSART1_Receive_ISR 0015                                      __doprnt@c 003B  
                                    __doprnt@f 002E                                      __pnvBANK1 00D9  
                             ___lwdiv@dividend 0024                         _PIN_MANAGER_Initialize 0256  
                            _ADC_SelectChannel 0F4D                        get_neutral_peaktopeak@i 0036  
                                     ?___fladd 0022                             _get_moving_average 0337  
                                     ?___awmod 0022                                       ?___fltol 003F  
                                     ?___lwdiv 0022                                       ?___lwmod 0029  
                              ?_ADC_Initialize 0070                             ?_ADC_SelectChannel 0070  
            _EUSART2_TxDefaultInterruptHandler 00DD                                       ?__doprnt 002E  
                 ??_INTERRUPT_InterruptManager 007D                                ??_pkdata_insert 002A  
                              ??_pkdata_isfull 0022                                ??_pkdata_remove 0028  
                          ?_get_moving_average 0037                                       _BAUD1CON 011F  
                                     _BAUD2CON 0A1F                            ??_ADC_SelectChannel 0070  
                                  ??i1___awmod 0074                               ___lwdiv@quotient 0027  
                                  ??i1___lwdiv 0074                  get_neutral_peaktopeak@neutral 0030  
                                     ?_sprintf 003D                                       _T2CLKCON 0290  
                      __size_of_madata_isempty 0004                                 __size_of_putch 0002  
                                  _T2INPPSbits 1E9C                                  ??_sbuf_insert 0079  
                                ??_sbuf_isfull 0070                                  ??_sbuf_remove 0028  
                 __size_of_EUSART2_Receive_ISR 0015                                       _LATAbits 0018  
                         ??_get_moving_average 003B                                      clear_ram0 0E2A  
                                     _PIE3bits 0719                                       _PIE4bits 071A  
                                    _sbuf_peek 0E73                      __end_of_ADC_SelectChannel 0F58  
          __size_of_INTERRUPT_InterruptManager 0034                                       _PIR3bits 070F  
                                     _PIR4bits 0710                              __CFG_BBSIZE$BB512 0000  
                                     _TMR2_ISR 0E1E                                     _ADCON0bits 009D  
                                 _RX1DTPPSbits 1ECB                       ADC_SelectChannel@channel 0071  
                                    main@count 0163                 ??_TMR2_DefaultInterruptHandler 0070  
            __size_of_TMR2_SetInterruptHandler 0008                      ?_TMR2_SetInterruptHandler 0022  
                __size_of_EUSART2_Transmit_ISR 0016                               main@time_elapsed 015C  
                            ??_TMR2_Initialize 0024                          __size_of_sbuf_isempty 0004  
                      __size_of_pkdata_isempty 0003                       ??_get_neutral_peaktopeak 002C  
        __end_of_EUSART1_SetTxInterruptHandler 0F22         __size_of_EUSART1_SetTxInterruptHandler 0008  
                _EUSART1_SetTxInterruptHandler 0F1A                                     ?_sbuf_peek 0022  
        __end_of_EUSART2_SetRxInterruptHandler 0EE8         __size_of_EUSART2_SetRxInterruptHandler 0008  
                _EUSART2_SetRxInterruptHandler 0EE0                            __end_of_sbuf_insert 0F84  
                          __end_of_sbuf_isfull 0FA2                       ?_ADC_GetConversionResult 0070  
                          __end_of_sbuf_remove 0696                              i1___awmod@divisor 0070  
                      ??_OSCILLATOR_Initialize 0022                              i1___awmod@counter 0074  
                             __size_of___fladd 0137                               __size_of___awmod 0039  
                             __size_of___fltol 0047                    __size_of_EUSART1_Initialize 0022  
                             __size_of___lwdiv 0025                               __size_of___lwmod 0020  
                             __size_of__doprnt 00A7                                       ___xxtofl 076B  
                              ___lwdiv@divisor 0022                                   _sbuf_isempty 0696  
                              ___lwdiv@counter 0026                                       __ptext10 0E36  
                                     __ptext11 06A0                                       __ptext20 03A6  
                                     __ptext12 073F                                       __ptext21 02FE  
                                     __ptext13 0756                                       __ptext30 022F  
                                     __ptext22 076B                                       __ptext14 0726  
                                     __ptext31 0289                                       __ptext23 0381  
                                     __ptext15 0708                                       __ptext40 0244  
                                     __ptext32 0256                                       __ptext24 02F0  
                                     __ptext16 0337                                       __ptext41 01F3  
                                     __ptext33 024C                                       __ptext25 02A9  
                                     __ptext17 041A                                       __ptext50 0F58  
                                     __ptext34 0EBF                                       __ptext26 0436  
                                     __ptext18 0432                                       __ptext51 0F4D  
                                     __ptext43 0E1E                                       __ptext35 0EE8  
                                     __ptext27 02A6                                       __ptext19 03C5  
                                     __ptext52 0F45                                       __ptext44 07F6  
                                     __ptext36 0EE0                                       __ptext28 0237  
                                     __ptext53 07E0                                       __ptext45 0F29  
                                     __ptext37 0EF0                                       __ptext29 0291  
                                     __ptext54 0E5E                                       __ptext46 0FDB  
                                     __ptext38 0F1A                                       __ptext55 0E88  
                                     __ptext47 0F5A                                       __ptext39 0F12  
                                     __ptext56 0E49                                       __ptext48 0FA2  
                                     __ptext49 0F84                                       _ma_front 004E  
                             __size_of_sprintf 001B                             i1___lwdiv@dividend 0072  
                  __size_of_EUSART2_Initialize 0021                                  __size_of_main 017E  
                       __size_of_madata_insert 001B                         __size_of_madata_isfull 001F  
                                     _sb_front 0052                         __size_of_madata_remove 0018  
                                     _pk_front 0050                           __CFG_WDTCWS$WDTCWS_7 0000  
                   __size_of_ADC_SelectChannel 000B                                     _RC1STAbits 011D  
                                   _RC2STAbits 0A1D                                       int$flags 007E  
           __end_of_INTERRUPT_InterruptManager 0038                     _INTERRUPT_InterruptManager 0004  
                                     main@mode 0162                            _EUSART1_Receive_ISR 0E49  
                           i1___lwdiv@quotient 0074                                     _INTCONbits 000B  
                                     memset@p1 0026                                 _madata_isempty 0432  
                                     intlevel1 0000                                      sprintf@ap 0041  
                                    sprintf@pb 0043                                      sprintf@wh 0042  
                         ?_EUSART1_Receive_ISR 0070                    __end_of_ADC_StartConversion 0F5A  
                                  _sbuf_insert 0F5A                                    _sbuf_isfull 0F84  
                             ___lwmod@dividend 002B                                    _sbuf_remove 067B  
                      ?_PIN_MANAGER_Initialize 0070                __end_of_ADC_GetConversionResult 0F4D  
                            __CFG_CLKOUTEN$OFF 0000                   __end_of_EUSART1_Transmit_ISR 0E9E  
                                  ??_sbuf_peek 0024                               ??_ADC_Initialize 0022  
              __size_of_get_neutral_peaktopeak 0068                                       printf@ap 003F  
                                     printf@pb 0040                 ?_EUSART1_SetTxInterruptHandler 0022  
               ?_EUSART2_SetRxInterruptHandler 0022                         __size_of_EUSART1_Write 001F  
                       __size_of_EUSART2_Write 0021                                  __pstringtext1 1066  
                                __pstringtext2 1000                                  __pstringtext3 1033  
                                __pstringtext4 1070                                  __pstringtext5 1078  
                                __pstringtext6 0000                            _EUSART2_Receive_ISR 0E5E  
                                _madata_insert 03C5                                  _madata_isfull 03A6  
                                _madata_remove 041A                                       sprintf@f 003D  
                              ___lwmod@divisor 0029                                ___lwmod@counter 002D  
                       __end_of_madata_isempty 0436                                     _TMR2_Start 02A6  
                                ___fladd@signs 0032                          ??_EUSART1_Receive_ISR 0070  
               __end_of_PIN_MANAGER_Initialize 0289                ??_EUSART2_SetTxInterruptHandler 0024  
                         ?_EUSART2_Receive_ISR 0070                                   ___fladd@aexp 0033  
                                 ___fladd@bexp 0034                          _TMR2_InterruptHandler 00D9  
                               _pkdata_isempty 0756              _EUSART2_RxDefaultInterruptHandler 00DB  
